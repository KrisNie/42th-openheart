<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical on 42th openheart</title>
    <link>https://www.openheart.icu/categories/technical/</link>
    <description>Recent content in Technical on 42th openheart</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ALL RIGHTS RESERVED KRIS NIE</copyright>
    <lastBuildDate>Thu, 12 Aug 2021 15:15:57 +0000</lastBuildDate><atom:link href="https://www.openheart.icu/categories/technical/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working Effectively with Legacy Code</title>
      <link>https://www.openheart.icu/cs/working-effectively-with-legacy-code/</link>
      <pubDate>Thu, 12 Aug 2021 15:15:57 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/working-effectively-with-legacy-code/</guid>
      <description>The Mechanics of Change Changing Software Four Reasons to Change Software  Adding a feature Fixing a bug Improving the design Optimizing resource usage  Changing Software Dependency-Breaking Techniques </description>
    </item>
    
    <item>
      <title>CS Conferences</title>
      <link>https://www.openheart.icu/cs/cs-conferences/</link>
      <pubDate>Mon, 09 Aug 2021 13:43:10 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/cs-conferences/</guid>
      <description>List of computer science conferences </description>
    </item>
    
    <item>
      <title>Design Patterns</title>
      <link>https://www.openheart.icu/cs/design-patterns/</link>
      <pubDate>Mon, 02 Aug 2021 15:57:23 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/design-patterns/</guid>
      <description>Structural Design Patterns Creational Design Patterns Behavioral Design Patterns Observer  The observer design pattern is suitable for distributed push-based notifications, because it supports a clean separation between two different components or application layers, such as a data source (business logic) layer and a user interface (display) layer. The pattern can be implemented whenever a provider uses callbacks to supply its clients with current information.
Implementing the pattern requires that you provide the following:</description>
    </item>
    
    <item>
      <title>CSharp Special Characters</title>
      <link>https://www.openheart.icu/cs/csharp-special-characters/</link>
      <pubDate>Sat, 23 Jan 2021 12:14:19 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/csharp-special-characters/</guid>
      <description>? There are 4 question marks ? used in C# syntax which I think is pretty confusing sometimes. Here I will attempt to explain them to you.
1) The ?: Operator (since Visual Studio 2003) The format : condition ? first_expression : second_expression;
If condition evaluates to true, first_expression shall be returned, otherwise second_expression.
Example
Random rnd = new Random(); var randomNo = rnd.Next(); var status = randomNo % 2 == 0 ?</description>
    </item>
    
    <item>
      <title>Win Operation</title>
      <link>https://www.openheart.icu/cs/windows/</link>
      <pubDate>Tue, 12 Jan 2021 11:47:28 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/windows/</guid>
      <description>Windows Terminal oh-my-posh Install-Module oh-my-posh -Scope CurrentUser -AllowPrerelease PSReadLine PowerShell/PSReadLine
Install-Module PSReadLine -AllowPrerelease -Force notepad $profile
Import-Module PSReadLine Set-PSReadLineOption -PredictionSource History # 下面是三条是文档里推荐的，根据自己的习惯决定是否添加 Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward Set-PSReadLineKeyHandler -Key Tab -Function Complete # Hot-Key Set-PSReadLineKeyHandler -Key &amp;#34;Ctrl+g&amp;#34; -Function MenuComplete posh-git dahlbyk/posh-git
Install-Module posh-git -Scope CurrentUser -AllowPrerelease -Force Import-Module posh-git Scoop iwr -useb get.scoop.sh | iex  Command net share # view your pc&amp;#39;s share folder </description>
    </item>
    
    <item>
      <title>Effective CSharp</title>
      <link>https://www.openheart.icu/cs/effective-csharp6.0/</link>
      <pubDate>Sat, 09 Jan 2021 16:22:42 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/effective-csharp6.0/</guid>
      <description>Effective C# Effective C# does not take you on a historical journey through the changes in the language. Rather, I provide advice on how to use the current C# language.
C # Language Idioms You change tools or languages because you can be more productive.
Item 1: Prefer Implicitly Typed Local Variables The var keyword may be used in the following contexts:
  On local variables (variables declared at method scope).</description>
    </item>
    
    <item>
      <title>Dot Net Runtime</title>
      <link>https://www.openheart.icu/cs/dot-net-runtime/</link>
      <pubDate>Sat, 26 Dec 2020 11:25:57 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/dot-net-runtime/</guid>
      <description>Source Code Learning for 「Dot Net Runtime」.
 Microsoft.Extensions.DependencyInjection Branch: release/5.0
之前使用的都是.NET MVC DI，相对封装较为严重。公司的设计为Composition Root实现MVC中的ConfigureDependencies然后创建BuildServiceProvider。在对方法进行调用前通过IServiceProvider.GetService注入所需类构造函数中的依赖。
 Dependency injection addresses these problems through:
 The use of an interface or base class to abstract the dependency implementation. Registration of the dependency in a service container. .NET provides a built-in service container, IServiceProvider. Services are typically registered at the app&amp;rsquo;s start-up, and appended to an IServiceCollection. Once all services are added, you use BuildServiceProvider to create the service container.</description>
    </item>
    
    <item>
      <title>Adaptive Code</title>
      <link>https://www.openheart.icu/cs/adaptive-code/</link>
      <pubDate>Sat, 21 Nov 2020 22:30:12 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/adaptive-code/</guid>
      <description>Adaptive Code: Agile coding with design patterns and SOLID principles 从标题中就不难发现，Adaptive Code的重点有三个：
  敏捷编码
  设计模式
  SOLID(单一功能、开闭原则、里氏替换、接口隔离以及依赖反转)原则
  Scrum scrum.org 2020-Scrum-Guide-US
 Scrum is:
 Lightweight Simple to understand Difficult to master   What  All work is prioritized on the product backlog and, at the start of each sprint, the development team commits to the work that they will complete during the new iteration by placing it on the sprint backlog.</description>
    </item>
    
    <item>
      <title>Unit Test Practice</title>
      <link>https://www.openheart.icu/cs/unit-test-practice/</link>
      <pubDate>Sat, 21 Nov 2020 22:30:12 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/unit-test-practice/</guid>
      <description>Unit Test Practice  纸上得来终觉浅，绝知此事要躬行。
 Shifting Left 所谓左移，左倾，不是指冒险主义。是将整个流程中右边部分向左边移动，比如测试。 : )
 Shift Left is a practice intended to find and prevent defects early in the software delivery process. The idea is to improve quality by moving tasks to the left as early in the lifecycle as possible.
In the traditional software development model, requirements are kept on the left side of the plan, and the delivery and testing requirements on the right.</description>
    </item>
    
    <item>
      <title>处理器中的流水线技术</title>
      <link>https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sat, 14 Nov 2020 16:55:11 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/</guid>
      <description>处理器中的流水线 在现代处理器中，流水线是一个最基本的概念。在了解cpu的时候，很多时候会提及拥有多少级流水线。虽然这个概念并不是在计算机技术中诞生的，但是这个技术却在处理器世界中大放异彩。
流水线(Pipeline)技术是指程序在执行时候多条指令重叠进行操作的一种准并行处理实现技术。通俗的讲将一个时序过程，分解成若干个子过程，每个过程都能有效的与其他子过程同时执行。这种思想最初是在RISC的架构中出现的，旨在提高处理器处理效率，争取在一个时钟周期中完成一条指令。
最经典的当属MIPS(无内部互锁的流水线处理器)的五级流水线技术。MIPS体系结构本身就是为了流水线而设计的，cpu在高速缓存中运行，每条指令的执行过程都分成五级。每一级成为一个流水线阶段，每个阶段占用固定的时间，通常是一个时钟周期。
上图是MIPS的五级流水线
其中：
IF(instruction fetch)：从指令高速缓存中获取下一条指令。
RD(Read register)：从指定的源寄存器域中指定的cpu寄存器中读取数据。
ALU(arithmetic/logic unit)：算术和逻辑运算操作。
MEM(memory R/W)：读写数据高速缓存中的内存变量。
WB(Write back)：将结果写入寄存器堆中。
很明显，如果只执行一条指令的话，流水线是不会提高效率的。但是如果要完成多条指令，利用流水线的并行原理，其实是可以提高几倍的处理速度。
由于流水线技术的高效性，后来所有的处理器都引进了该实现，当然包括x86的处理器，当年奔四号称20级的流水线结构。但是，是不是流水线级数越多越好呢？流水线级数越多，在处理多指令的时候确实也会越高效，但必然以高成本为代价，同时也会出现很多相关的一些副作用。
流水线的更多详细说明可以参阅更多书籍或者wiki。对于基础书籍推荐一下《大话处理器》的部分章节。
处理器中的冒险 流水线给处理器带来了效率，当然也有问题。称之为流水线冒险(HaZard)。
结构冒险 由于处理器资源冲突，而无法实现某些指令或者阶段的组合实现，就称之为处理器有结构冒险。
比如，早期的处理器中，程序和数据是存储在一起的，那么容易出现下图的情况：在第四个cycle中，IF和MEM同时访问存储器导致有一个操作要等待，此时hazard就出现了。现在的处理器已经解决了该问题：指令存储在L1P cache中，数据存储L1D cache中，单独访问，不会影响相互操作。
数据冒险 如果流水线中原来有先后顺序的指令同一时刻处理时，可能会导致出现访问了错误的数据的情况。
在汇编语句中，add R1,R2,R3 将寄存器R2和R3的和赋予R1，改变R1的值；而紧接着下面的语句：add R4,R1,R5则会使用R1的值，可是R1必须在第一条语句中的第5个cycle才能更新到寄存器中，语句二是在第4个cycle就要访问R1，也就是说第二,条指令此时在使用错误的R1的值。这是数据hazard出现了。
很容易就能想到一种方式解决：在两条指令中添加一条空指令：nop。但是会影响处理器的指令的执行效率。在现代处理器技术中，已经用forwarding的方式解决了。如下图，如果处理器在检测到当前指令的源操作数正好在流水线的EX或者MEM阶段，接直接将ex和mem寄存器的值传递给ALU的输入，而不是再从寄存器堆中获取数据了。因为此时寄存器堆中的数据可能是没有被及时更新的。
当然不仅在EX阶段有这种问题出现，在mem阶段也容易出现。
控制冒险 在流水线中的的执行指令时，由于并行处理的关系，后面很多指令其实都在流水线中开始处理了，包括预取值和译码。那么，如果此时程序中出现一条跳转语句怎么办呢？因为程序已经跑到其他地址处执行，流水线中之前已经做好的预取值和译码动作都不能使用了。这些会被处理器的专有部件flush掉，重新开始新的流水线。此时我们可以称之为出现了控制hazard。这种情况对于程序和效率来说是存在很大损失的。
当然，我们也有解决方案，也就是在jump指令后面(不会被真正使用，但是会进入流水线)添加nop。在MIPS程序中，经常在jump指令后面添加nop语句。
在X86架构中，是通过硬件来实现flush，将无效的流水线排空，以保证正确运行流水线。这里会涉及到分支预测技术的使用。
在其他一些处理器中，用软件的方式来处理，添加nop。同时在编译器中通过乱序的思想用有效指令代替nop。这样也可以避免转跳带来的性能损失。</description>
    </item>
    
    <item>
      <title>Idempotent</title>
      <link>https://www.openheart.icu/cs/idempotent/</link>
      <pubDate>Thu, 12 Nov 2020 15:58:21 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/idempotent/</guid>
      <description>什么是幂等？ 在数学里，幂等有两种主要的定义。
 在某二元运算下，幂等元素是指被自己重复运算（或对于函数是为复合）的结果等于它自己的元素。例如，乘法下唯一两个幂等实数为0和1。 某一元运算为幂等的时，其作用在任一元素两次后会和其作用一次的结果相同。例如，高斯符号便是幂等的。 一元运算的定义是二元运算定义的特例  In computer science, the term idempotence may have a different meaning depending on the context in which it is applied:
 in imperative programming(命令编程), a subroutine(子程序) with side effects is idempotent if the system state remains the same after one or several calls, in other words if the function from the system state space to itself associated to the subroutine is idempotent in the mathematical sense given in the definition; in functional programming, a pure function is idempotent if it is idempotent in the mathematical sense given in the definition.</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://www.openheart.icu/cs/dependency-injection/</link>
      <pubDate>Thu, 15 Oct 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/dependency-injection/</guid>
      <description>Dependency Injection IOC Spring 框架为Java提供了IOC（Inversion of Control），只是提供了一个服务容器，程序控制我们需要的对象，而不是在使用对象时我们亲自直接控制。既然提到了IOC就详细了解一下这种设计思想：
为了解决对象间耦合度过高的问题，软件专家Michael Mattson提出了IOC理论，用来实现对象之间的“解耦”。
控制反转是一种是面向对象编程中的一种设计原则，用来减低计算机代码之间的耦合度。其基本思想是：借助于“第三方”实现具有依赖关系的对象之间的解耦。
软件系统在没有引入IOC容器之前，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。
软件系统在引入IOC容器之后，这种情形就完全改变了，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。
通过前后的对比，我们不难看出来：对象A获得依赖对象B的过程，由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。
控制反转可以用来减低计算机代码之间的耦合度。 其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。
DIP 要了解控制反转( Inversion of Control ), 我觉得有必要先了解软件设计的一个重要思想：依赖倒置原则（Dependency Inversion Principle ）。
依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。 简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。
在面向对象编程领域中，依赖反转原则（Dependency inversion principle，DIP）是指一种特定的解耦（传统的依赖关系创建在高层次上，而具体的策略设置则应用在低层次的模块上）形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。
该原则规定：
 高层次的模块不应该依赖于低层次的模块，两者都应该依赖于抽象接口。 抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。  该原则颠倒了一部分人对于面向对象设计的认识方式。如高层次和低层次对象都应该依赖于相同的抽象接口。控制反转就是依赖倒置原则的一种代码设计的思路。具体采用的方法就是所谓的依赖注入（Dependency Injection）。
设计模式中的五大原则 SOLID 中的 D 指代的就是依赖反转原则。
eg: Lamp and Button：A Simple DIP Example
DI IOC与DI的区别  控制反转是一种在软件工程中解耦合的思想，调用类只依赖接口，而不依赖具体的实现类，减少了耦合。控制权交给了容器，在运行的时候才由容器决定将具体的实现动态的“注入”到调用类的对象中。 依赖注入是一种设计模式，可以作为控制反转的一种实现方式。依赖注入就是将实例变量传入到一个对象中去(Dependency injection means giving an object its instance variables)。 通过IOC框架，类A依赖类B的强耦合关系可以在运行时通过容器建立，也就是说把创建B实例的工作移交给容器，类A只管使用就可以。  .net core 框架自带IServiceProvider以实现依赖注入</description>
    </item>
    
    <item>
      <title>Dot Net Issue</title>
      <link>https://www.openheart.icu/cs/dot-net-issue/</link>
      <pubDate>Thu, 10 Sep 2020 11:00:35 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/dot-net-issue/</guid>
      <description>Hot-Reload Razor Views 在mac上使用Rider创建 .net core mvc项目后发现run和debug，都无法热加载razor页面。经过Google后发现，这并不是Rider的bug，这得需要知道mvc到底是如何运行的（it&amp;rsquo;s fundamentally how ASP.NET MVC Core works）。
 Razor files are compiled at both build and publish time using the Razor SDK. Runtime compilation may be optionally enabled by configuring your application.
 使用Razor SDK在构建和发布时都会编译Razor文件。通过配置您的应用程序，可以选择启用运行时编译。
Note that run time is not included in this list by default. To change this behaviour:
 Add the Nuget package Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation. Change your Startup.ConfigureServices code to include runtime compilation:  public void ConfigureServices(IServiceCollection services) { services .</description>
    </item>
    
    <item>
      <title>SQLserver</title>
      <link>https://www.openheart.icu/cs/sqlserver/</link>
      <pubDate>Sat, 15 Aug 2020 16:27:30 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/sqlserver/</guid>
      <description>Common Operation SQLCMD sqlcmd -S localhost -d CSI10 -q &amp;#34;SELECT * FROM SITE&amp;#34; sqlcmd -S localhost -d CSI10 -Q &amp;#34;SELECT * FROM SITE&amp;#34; sqlcmd -S localhost -U SA -Q &amp;#39;select @@VERSION&amp;#39; sqlcmd -S localhost  Issues Cannot insert explicit value for identity column in table &amp;lsquo;table&amp;rsquo; when IDENTITY_INSERT is set to OFF SET IDENTITY_INSERT Table1 ON --Do INSERT  SET IDENTITY_INSERT Table1 OFF SQL-Server: The backup set holds a backup of a database other than the existing   Don&amp;rsquo;t create an empty database and restore the .</description>
    </item>
    
    <item>
      <title>Static Search Table &amp; Dynamic Search Table</title>
      <link>https://www.openheart.icu/cs/%E5%8A%A8%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8%E4%B8%8E%E9%9D%99%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8/</link>
      <pubDate>Sat, 25 Jul 2020 18:32:23 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/%E5%8A%A8%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8%E4%B8%8E%E9%9D%99%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8/</guid>
      <description>今天在看BST时，指导书上讲二叉排序树时与二分查找进行对比，引出几个模棱两可的概念（静态查找表、动态查找表），经查找后整理得本文
概述 首先要了解几个基础概念
查找(Searching) 是根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素。
查找表(Search Table) 是由同⼀类型的数据元素(记录)构成的集合。
关键字(Key) 是数据元素中某个数据项的值，又称为键值，用它可以表示⼀个数据元素，也可以标识一个记录的某个数据项(字段)，我们称为关键码。 若关键字可以唯⼀地标识一个记录, 则称此关键字为主关键字 (Primary Key)。 对于那些可以识别多个属于元素(记录)的关键字，我们称为次关键字(Secondary Key)。
查找表操作可分为静态查找和动态查找。
静态查找表(Static Search Table) 只作查找操作的查找表。
 查询某个”特定的”数据元素是否在查找表中; 检索某个&amp;quot;特定的&amp;quot;数据元素和各种属性;  静态查找只是仅查找，并不会去改变集合内的数据元素。常用的查找有。
顺序查找（ Linear search，又称线性查找）  原理 ：顺序查找就是按顺序从头到尾依次往下查找，从表中的第一个(或最后一个)记录开始，逐个进行记录关键字和给定值比较，找到数据，则提前结束查找，找不到便一直查找下去，直到数据最后一位
 public static int linearSearch(int[] a, int num) { for(int i = 0; i &amp;lt; a.length; i++) { if(a[i] == num){ // 返回数据所在的下标，也就是位置  return i; } } // 不存在的话返回-1  return -1; } 索引顺序表查找（分块查找） 整个表中的元素未必有序，但若划分为若干块后，每一块中的所有元素均小于（或大于）其后面块中的所有元素。我们称这种为分块有序。
分块查找要求把一个数据分为若干块，每一块里面的元素可以是无序的，但是块与块之间的元素需要是有序的。（对于一个非递减的数列来说，第i块中的每个元素一定比第i-1块中的任意元素大）
 原理：</description>
    </item>
    
    <item>
      <title>C# in Depth</title>
      <link>https://www.openheart.icu/cs/csharp-in-depth/</link>
      <pubDate>Sat, 25 Jul 2020 00:14:11 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/csharp-in-depth/</guid>
      <description>本文为「C# in Depth」(4th edition)学习记录。
Part 1 C# in context Survival of the sharpest 本章主要讲C#的由来与介绍（吹嘘）。
开始前可以回顾一下C#的历史，现在是北京时间2021-05-29 14:06:54，the last C# version is C# 9.
Reference  The history of C#  Part 2 C# in 2-5 C# 3: LINQ and everything that comes with it Extension methods  Extension methods allow existing classes to be extended without relying on inheritance or having to change the class&amp;rsquo;s source code. This means that if you want to add some methods into the existing String class you can do it quite easily.</description>
    </item>
    
    <item>
      <title>Implementing the Singleton Pattern in C#</title>
      <link>https://www.openheart.icu/cs/implementing-the-singleton-pattern-in-csharp/</link>
      <pubDate>Sat, 25 Jul 2020 00:14:11 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/implementing-the-singleton-pattern-in-csharp/</guid>
      <description>Implementing the Singleton Pattern in C# 在C＃中实现单例模式。该模式是非常常见的设计模式之一，某个对象全局只需要一个实例时，就可以使用单例模式。它的优点也显而易见：
 它能够避免对象重复创建，节约空间并提升效率 避免由于操作不同实例导致的逻辑错误  以下是原文作者Jon Skeet 对C#单例模式的介绍。
Introduction 单例模式是软件工程中最著名的模式之一。本质上，单例是仅允许创建其自身的单个实例的类，并且通常提供对该实例的简单访问。最常见的是，单例在创建实例时不允许指定任何参数，否则对实例的第二次请求但参数不同可能会出现问题！ （如果应该为具有相同参数的所有请求访问相同的实例，则使用工厂模式更为合适。）本文仅涉及不需要参数的情况。通常，单例的要求是它们是懒惰地创建的，即：直到首次需要实例时才创建实例。
在C＃中有多种不同的方式来实现单例模式。我将在这里以从简到难顺序（in reverse order of elegance）介绍它们，从最常见的线程安全性开始，逐步发展为完全延迟加载，线程安全，简单且高性能的版本。
所有这些实现都有四个共同的特征，但是：
 单个构造函数，私有且无参数。这样可以防止其他类实例化它（这将违反模式）。请注意，它还防止了子类化（subclassing）如果一个单例可以被子类化一次，则可以被子类化两次，并且如果每个子类都可以创建一个实例，则将违反（violated）该模式。如果您需要基本类型的单个实例，则可以使用工厂模式，但是直到运行时才知道确切的类型。 该类是密封的。严格来说，由于上述几点，这是不必要的，但可以帮助JIT进行更多优化。 一个静态变量，其中包含对创建的单个实例的引用（如果有）。 公共静态方法是获取对创建的单个实例的引用，并在必要时创建一个实例。  请注意，所有这些实现还使用公共静态属性Instance作为访问实例的方式。在所有情况下，都可以轻松地将属性转换为方法，而不会影响线程安全性或性能。
First version - not thread-safe // Bad code! Do not use! public sealed class Singleton { private static Singleton instance = null; private Singleton() { } public static Singleton Instance { get { if (instance == null) { instance = new Singleton(); } return instance; } } } 如前所述，以上内容不是线程安全的。</description>
    </item>
    
    <item>
      <title>Distributed cache</title>
      <link>https://www.openheart.icu/cs/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</link>
      <pubDate>Fri, 24 Jul 2020 00:00:50 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</guid>
      <description>简单了解分布式缓存的各种概念
缓存雪崩 缓存雪崩我们可以简单的理解为：由于原有缓存失效，新缓存未到期间所有原本应该访问缓存的请求都去查询数据库了，而对数据库 CPU 和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。
关键词：缓存失效，针对这种情况一般有三种处理办法：
 一般并发量不是特别多的时候，使用最多的解决方案是加锁排队。 给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存。 为 key 设置不同的缓存失效时间。  第二、第三中方法在面试中均被提到过，很遗憾我只想到了第一种解决办法（纯粹靠蒙） 😁
缓存穿透 缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在 缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）。这样请求就绕过缓存直接查数据库，这也是经常提的缓存命中率问题。
有很多种方法可以有效地解决缓存穿透问题，最常见的则是采用布隆过滤器，将所有可能存在的数据哈 希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存 储系统的查询压力。
另外也有一个更为简单粗暴的方法，如果一个查询返回的数据为空（不管是数据不 存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。 通过这个直接设置的默认值存放到缓存，这样第二次到缓冲中获取就有值了，而不会继续访问数据库。
缓存预热 缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题。用户直接查询事先被预热的缓存数据。
缓存更新 缓存更新除了缓存服务器自带的缓存失效策略之外（Redis 默认的有 6 中策略可供选择），我们还可以根据具体的业务需求进行自定义的缓存淘汰，常见的策略有两种：
（1）定时去清理过期的缓存；
（2）当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。
缓存降级 当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。 降级的最终目的是保证核心服务可用，即使是有损的。 而且有些服务是无法降级的（如加入购物车、结算）。</description>
    </item>
    
    <item>
      <title>Reliability&amp;Availability</title>
      <link>https://www.openheart.icu/cs/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E9%AB%98%E5%8F%AF%E9%9D%A0%E6%80%A7/</link>
      <pubDate>Fri, 24 Jul 2020 00:00:50 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E9%AB%98%E5%8F%AF%E9%9D%A0%E6%80%A7/</guid>
      <description>区分高可靠性与高可用性 Reliability和Availability分别对应可靠性和可用性, 这两个概念既有区别也有联系:
 Reliability定义为一个服务连续无故障运行的时间，无故障运行的时间越长，可靠性就越高。 Availiability定义为在足够长的时间里，比如一年的时间里，一个服务可用的时间，服务可用时间越长越好。一般用可服务时间除于总时间算出一个百分比，用百分比作为度量。比如一个服务如果有5个9的可用性，指的就是一年里99.999%时间里服务都是可用的。  有两个极端的例子可以很好的说明这两个概念的区别:
 假想一个服务，可靠性很高，平均来说可以稳定运行10年，但是一旦服务中断，要用一年的时间来恢复，那么它的可用性只有90%。 假想另一个服务，可靠性很差，运行10秒就会宕机，但是恢复服务只需要1ms, 那么它的可用性是99.99%  从这两个极端的例子可以看出，提高可用性有两条路:
 一是提高可靠性，当然影响可靠性的原因有很多，包括硬件，软件，网络，运维等。但是有人做过统计，软件的bug是影响可靠性的最主要的因素。并且提高软件质量相较于使用更可靠的硬件也算成本较低的方式了， 二是减少恢复时间，一旦出现宕机，如果能在秒级恢复，那对业务影响是很小的。   高可靠性的实现 &amp;hellip;
 高可用性的实现 高可用HA（High Availability）是分布式系统架构设计中必须考虑的因素之一，它通常是指，通过设计减少系统不能提供服务的时间。
在设计高可用性策略时应该首先考虑下述因素 ​ • RTO（Recovery Time Objective）-也就是恢复时间目标，意味着允许多少宕机时间，通常用几个9表示，比如说99.999%的可用性意味着每年的宕机时间不超过5分钟、99.99%的可用性意味着每年的宕机时间不超过52.5分钟、99.9%的可用性意味着每年的宕机时间不超过8.75小时。值得注意的是，RTO的计算方法要考虑系统是24*365，还是仅仅是上午6点到下午9点等。您还需要注意是否维护窗口的时间在算在宕机时间之内，如果允许在维护窗口时间进行数据库维护和打补丁，则更容易实现更高的可用性。
​ • RPO（Recovery Point Objective）-也就是恢复点目标，意味着允许多少数据损失。通常只要做好备份，可以比较容易的实现零数据损失。但当灾难发生时，取决于数据库损坏的程度，从备份恢复数据所需要的时间会导致数据库不可用，这会影响RTO的实现。一个早期比较著名的例子是某欧美的银行系统，只考虑的RPO，系统里只存在了完整备份和日志备份，每3个月一次完整备份，每15分钟一次日志备份，当灾难发生时，只能够通过完整备份和日志备份来恢复数据，因此虽然没有数据丢失，但由于恢复数据花了整整两天时间，造成银行系统2天时间不可用，因此流失了大量客户。另外一个相反的例子是国内某在线视频网站，使用SQL Server作为后端关系数据库，前端使用了No-SQL，定期将No-SQL的数据导入关系数据库作为备份，当灾难发生时最多允许丢失一天的数据，但是要保证高可用性。
高可用的实现 整个互联网分层系统架构的高可用，又是通过每一层的冗余+自动故障转移来综合实现的，具体的：
 【客户端层】到【反向代理层】的高可用，是通过反向代理层的冗余实现的，常见实践是keepalived + virtual IP自动故障转移 【反向代理层】到【站点层】的高可用，是通过站点层的冗余实现的，常见实践是nginx与web-server之间的存活性探测与自动故障转移 【站点层】到【服务层】的高可用，是通过服务层的冗余实现的，常见实践是通过service-connection-pool来保证自动故障转移 【服务层】到【缓存层】的高可用，是通过缓存数据的冗余实现的，常见实践是缓存客户端双读双写，或者利用缓存集群的主从数据同步与sentinel保活与自动故障转移；更多的业务场景，对缓存没有高可用要求，可以使用缓存服务化来对调用方屏蔽底层复杂性 【服务层】到【数据库“读”】的高可用，是通过读库的冗余实现的，常见实践是通过db-connection-pool来保证自动故障转移 【服务层】到【数据库“写”】的高可用，是通过写库的冗余实现的，常见实践是keepalived + virtual IP自动故障转移  SQlServer所支持的高可用特性 SQL Server中所支持的高可用性功能与版本息息相关，企业版支持所有的高可用性功能，这些功能包括：
 故障转移集群 数据库镜像（在SQL Server 2012中被标记为“过时”） 事务日志传送 数据库快照 AlwaysOn可用性组 热加载内存 在线索引操作 数据库部分在线（只还原了主文件组或主文件组和额外的NDF文件）  故障转移集群  故障转移集群为整个SQL Server实例提供高可用性支持，这意味着在集群上某个节点的SQL Server实例发生了硬件错误、操作系统错误等会故障转移到该集群上的其它节点。通过多个服务器（节点）共享一个或多个磁盘来实现高可用性，故障转移集群在网络中出现的方式就像单台计算机一样，但是具有高可用特性。值得注意的是，由于故障转移集群是基于共享磁盘，因此会存在磁盘单点故障，因此需要在磁盘层面部署SAN复制等额外的保护措施。常见的故障转移集群是双节点的故障转移集群，包括主主节点和主从节点。  事务日志传送   事务日志传送提供了数据库级别的高可用性保护。日志传送可用来维护相应生产数据库（称为“主数据库”）的一个或多个备用数据库（称为“辅助数据库”）。发生故障转移之前，必须通过手动应用全部未还原的日志备份来完全更新辅助数据库。日志传送具有支持多个备用数据库的灵活性。如果需要多个备用数据库，可以单独使用日志传送或将其作为数据库镜像的补充。当这些解决方案一起使用时，当前数据库镜像配置的主体数据库同时也是当前日志传送配置的主数据库。</description>
    </item>
    
    <item>
      <title>URL</title>
      <link>https://www.openheart.icu/cs/url/</link>
      <pubDate>Wed, 22 Jul 2020 20:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/url/</guid>
      <description>URL解析 UrlEncode    符号 意义 Encode     + 表示空格 %2B   (空格) 可以用+号替代 %20   / 分隔目录和子目录 %2F   ？ 分隔实际的URL和参数 %3F   % 指定特殊字符 %25   # 表示书签 %23   &amp;amp; URL 中指定的参数间的分隔符 %26   = URL 中指定参数的值 %3D    IE11URL解析问题 今天(2020-8-3 14:41:03)，发现项目中使用IE11时打开连接出现HTTP400的问题，有且仅在IE11里面，chrome正常。
后来查资料发现，是因为我传参的时候带了中文字符，而IE对中文字符是有限制的，所以不成功，而要解决这个问题就需要转码，把要传的中文参数用UrlEncode方法给转一下码就ok。</description>
    </item>
    
    <item>
      <title>Oracle</title>
      <link>https://www.openheart.icu/cs/oracle/</link>
      <pubDate>Tue, 21 Jul 2020 20:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/oracle/</guid>
      <description>Common Operation 删除操作前一定要先执行一遍查询 如题， 带的一个新员工做补丁把项目历史数据干掉了 My bad.
2020-8-7
Optimize 索引失效 SQL在WHERE条件里面使用了IN导致有一个关联表的索引失效，Oracle版本为11g
条件中有or，要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引
like查询是以%开头
如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引
分库 分表 分区 视图优化 基表增加索引 对基表中，视图查询SQL的WHERE条件中用到的字段增加索引
重新进行表分析 -- 视图查询慢  analyze table table_name delete statistics; analyze table table_name compute statistics; -- 在当前用户下执行  select &amp;#39;analyze table &amp;#39;||table_name||&amp;#39; compute statistics;&amp;#39; from user_tables where table_name IN (&amp;#39;tablename&amp;#39;); -- 得到如下语句，将这些语句整体执行一遍  analyze table PRODUCT_REF_LIST_NESTEDTAB compute statistics; -- ....  -- 查看统计信息  select table_name,num_rows from user_tables; 分析的结果被Oracle用于基于成本的优化生成更好的查询计划。
遇到当前表的查询或其他性能不好时，就可以对相应的表进行一次分析。
 如果你的表经常由几千万变成几百万，又变成几千万那么需要制定分析计划定期表分析，同时可以一并分析索引，计算索引中数据的分布情况，这样CBO会选择更加准确的执行计划。 如果表结构变化了也要做下，也就是经常对表做dml就需要分析，现在推荐使用dbms_stats包。  ERROR ORA-01779: 无法修改与非键值保存表对应的列 这里要搞清楚三个概念：视图、联接视图、可更新的联接视图</description>
    </item>
    
    <item>
      <title>剑指 Offer 46. 把数字翻译成字符串</title>
      <link>https://www.openheart.icu/arithmetic/%E5%89%91%E6%8C%87-offer-46.-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2-lcof/</link>
      <pubDate>Tue, 21 Jul 2020 19:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/arithmetic/%E5%89%91%E6%8C%87-offer-46.-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2-lcof/</guid>
      <description>把数字翻译成字符串 给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。
eg:
 输入: 12258 输出: 5 解释: 12258有5种不同的翻译，分别是bccfi, bwfi, bczi, mcfi和mzi
 提示：
 0 &amp;lt;= num &amp;lt; 231 动态规划 拿示例看
  首先考虑每个数字单独翻译的情况，即翻译[1,2,2,4,8]，结果为bccfi
  可以将数字拼接为两位的情况，
 [12,2,4,8] mcfi [12,24,8] mzi [12,2,48] 48&amp;gt;25 [1,22,48] 48&amp;gt;25 [1,22,4,8] bwfi [1,2,24,8] bczi [1,2,2,48] 48&amp;gt;25    归纳规则：
 可以单独作为一位来翻译 如果第 i−1 位和第 i 位组成的数字在 10 到 25 之间，可以把这两位连起来翻译  </description>
    </item>
    
    <item>
      <title>DNS</title>
      <link>https://www.openheart.icu/cs/dns/</link>
      <pubDate>Sun, 19 Jul 2020 12:50:56 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/dns/</guid>
      <description>DNSPod DNS+ ​ 首选：119.29.29.29
​ 备选：182.254.116.116
114DNS ​ 首选：114.114.114.114
​ 备选：114.114.114.115
阿里 AliDNS ​ 首选：223.5.5.5
​ 备选：223.6.6.6
DNS派 ​ 首选（电信/移动/铁通）：101.226.4.6
​ 备选（电信/移动/铁通）：218.30.118.6
​ 首选（联通）：123.125.81.6
​ 备选（联通）：140.207.198.6
百度 BaiduDNS ​ 首选：180.76.76.76
CNNIC SDNS ​ 首选：1.2.4.8
​ 备选：202.98.0.68
OpenDNS ​ 208.67.222.222
​ 208.67.220.220
​ 208.67.222.220
​ 208.67.220.222
Family Shield Servers 可以阻挡成人网站和含有恶意网站
​ 208.67.222.123
​ 208.67.220.123
IPv6地址(实验) ​ 2620:0:ccc::2
​ 2620:0:ccd::2</description>
    </item>
    
    <item>
      <title>.NET INTERVIEW</title>
      <link>https://www.openheart.icu/cs/dot-net-interview/</link>
      <pubDate>Fri, 17 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/dot-net-interview/</guid>
      <description>.NET INTERVIEW from Jeffrey Zhao&amp;rsquo;s blog 我在面试.NET/C#程序员时会提出的问题
 什么是.NET？什么是CLI？什么是CLR？IL是什么？JIT是什么，它是如何工作的？GC是什么，简述一下GC的工作方式？ 什么是.net .NET是个平台，你就把它看成C#
一个.NET应用是一个运行于.NET Framework之上的应用程序。（更精确的说，一个.NET应用是一个使用.NET Framework类库来编写，并运行于公共语言运行时 Common Language Runtime之上的应用程序。）如果一个应用程序跟.NET Framework无关，它就不能叫做.NET程序。比如，仅仅使用了XML并不就是.NET应用，仅仅使用SOAP SDK调用一个Web Service也不是.NET应用
开发平台（Dot Net Framework）：包含通用语言运行时（CLR）和Dot Net框架类库（FCL）两个部分。他们提供了一致的编程模型，简化的编程方式，可靠的版本机制（用全局程序集缓存GAC来避免DLL Hell），轻便的部署管理（程序集自带的元数据可以避免ini文件和注册表） ，广泛的平台支持（只要这台机器兼容标准下的CLR和FCL就可以部署，当然运行的时候IL会变成本机代码），无缝的语言集成，自动化的内存管理（垃圾收集），类型安全（CLR会阻止利用缓冲区溢出错误进行的攻击），CLR支持跨语言调试，统一的错误报告，全新的安全策略（CAS），兼容以往的COM组件
什么是CLR CLR(公用语言运行时)和Java虚拟机一样也是一个运行时环境，它负责资源管理（内存分配和垃圾收集），并保证应用和底层操作系统之间必要的分离。.NET Framework 提供了一个称为公共语言运行时的运行时环境**（Commen Language Runtime）**，它运行代码并提供使开发过程更轻松的服务。公共语言运行时的功能通过编译器和工具公开，你可以编写利用此托管执行环境的代码。 使用基于公共语言运行时的语言编译器开发的代码称为托管代码；托管代码具有许多优点，例如：跨语言集成、跨语言异常处理、增强的安全性、版本控制和部署支持、简化的组件交互模型、调试和分析服务等。
什么是CLI 通用语言基础结构（Common Language Infrastructure，CLI）是CLR的一个子集，也就是.NET中最终对编译成MSIL代码的应用程序的运行环境进行管理的那一部分。在 CLR结构图中CLI位于下半部分，主要包括类加载器(Class Loader)、实时编译器(IL To Native Compilers)和一个运行时环境的垃圾收集器(Garbage Collector)。CLI是.Net和CLR的灵魂，CLI为IL代码提供运行的环境，你可以将使用任何语言编写的代码通过其特定的编译器转换为 MSIL代码之后运行其上，甚至还可以自己写MSIL代码在CLI上面运行。
什么是IL IL是微软.NET平台上衍生出来的一门中间语言，.NET平台上的各种高级语言（如C#，VB，F#）的编译器会将各自的文字表述方式转化为 IL。各种不同的文字形式最终被统一到了IL的表述方式，其中包含了.NET平台上的各种元素，如“范型”，“类”、、“接口”、“模块”、“属性”等 等。值得注意的是，各种高级语言本身可能根本没有这些“概念”在里头，如IronScheme是一个在.NET平台上的Scheme语言实现，其中根本没有前面提到的这些IL——亦或说是.NET平台上的名词。IL本身并不知道自己是由哪种高级语言转化而来的，哪种语言中有哪些特性，IL也根本不会关心。
什么是JIT JIT（Just In Time, JIT）是.Net边运行边编译的一种机制。
开发人员需要通过IL与CLR进行交流，虽然IL本身支持一些面向对象的概念，但是对于开发人员来讲还是过于复杂低效，于是C#应运而生，程序员只需编写C#代码，csc编译器会将其翻译成IL；虽然CLR理解IL，但是CPU只认识二进制指令，所以CLR需要JIT的帮助，将IL翻译成CPU指令. JIT按需工作，当一个.NET方法即将被执行时，JIT会介入，把该方法（IL指令）编译成CPU指令，并保存以供重用。
什么是GC，以及它的工作方式 GC:.NET Framework 的垃圾回收器管理应用程序的内存分配和释放
分配内存 初始化新进程时，运行时会为进程保留一个连续的地址空间区域。 这个保留的地址空间被称为托管堆。 托管堆维护着一个指针，用它指向将在堆中分配的下一个对象的地址。 最初，该指针设置为指向托管堆的基址。 托管堆上包含了所有引用类型。 应用程序创建第一个引用类型时，将为托管堆的基址中的类型分配内存。 应用程序创建下一个对象时，垃圾回收器在紧接第一个对象后面的地址空间内为它分配内存。 只要地址空间可用，垃圾回收器就会继续以这种方式为新对象分配空间。
从托管堆中分配内存要比非托管内存分配速度快。 由于运行时通过为指针添加值来为对象分配内存，所以这几乎和从堆栈中分配内存一样快。 另外，由于连续分配的新对象在托管堆中是连续存储，所以应用程序可以快速访问这些对象。</description>
    </item>
    
    <item>
      <title>206. Reverse Linked List</title>
      <link>https://www.openheart.icu/arithmetic/206.-reverse-linked-list/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/arithmetic/206.-reverse-linked-list/</guid>
      <description>Reverse a singly linked list. Example:
 Input: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL Output: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL
 Follow up:
A linked list can be reversed either iteratively or recursively. Could you implement both?
 迭代 将
 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL
 转化为
 NULL&amp;lt;-1&amp;lt;-2&amp;lt;-3&amp;lt;-4&amp;lt;-5
 使用一个prev节点存储上一个节点（初始为NULL），将当前curr节点的next指向prev节点，prev节点存储curr节点，curr存储curr的原next节点，完成一次迭代。最后返回prev（最后的curr是原ListNode的NULL）
/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ public ListNode reverseList(ListNode head) { ListNode prev = null; ListNode curr = head; while (curr !</description>
    </item>
    
    <item>
      <title>Computer network</title>
      <link>https://www.openheart.icu/cs/computer-network/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/computer-network/</guid>
      <description>Computer Network Issues 网络的七层架构  物理层 数据链路层 网络层 传输层 会话层 表示层 应用层  TCP/IP 原理 TCP 三次握手/四次挥手 三次握手 TCP 在传输之前会进行三次沟通，一般称为“三次握手”。
四次挥手 TCP在传输完数据断开的时候要进行四次沟通，一般称为“四次挥手”。
Private IP Address vs Public IP Address &amp;amp; Public IP Port  0-1023是公认端口号，即已经公认定义或为将要公认定义的软件保留的，而1024-65535是并没有公共定义的端口号，用户可以自己定义这些端口的作用。
 Reference  常用端口号 为什么ipconfig和浏览器查询出的ip不一样？  </description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://www.openheart.icu/cs/git/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/git/</guid>
      <description>idea设置git git remote add origin git@github.com:Hyominn/java_demo.git git pull git@github.com:Hyominn/java_demo.git git add . dir # 查看有哪些文件夹 git rm -r --cached target # 删除target文件夹 git commit –m &amp;#34;版本更新信息&amp;#34; git push kris@github.com:Hyominn/java_demo.git 设置git代理 # http git config --global https.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 # socks5 git config --global http.proxy &amp;#39;socks5://127.0.0.1:1080&amp;#39; git config --global https.proxy &amp;#39;socks5://127.0.0.1:1080&amp;#39; # 取消代理 git config --global --unset http.proxy git config --global --unset https.proxy npm config delete proxy 查看git安装路径  Mac: which git Windows: where git powershell用 where.</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://www.openheart.icu/cs/hugo/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/hugo/</guid>
      <description>Install tar -zxvf ./hugo_0.74.1_Linux-64bit.tar.gz cp ./hugo /usr/local/bin/ hugo new site site42 cd site42 hugo version rm -r public hugo server -b &amp;#34;https://openheart.icu:1313/&amp;#34; -p 1313 --bind &amp;#34;0.0.0.0&amp;#34; #mac 安装 brew install hugo # show the location of the hugo executable which hugo # show the installed version ls -l $( which hugo ) #lrwxr-xr-x 1 hyomin admin 30 7 17 22:46 /usr/local/bin/hugo -&amp;gt; ../Cellar/hugo/0.74.1/bin/hugo # verify that hugo runs correctly hugo version Hugo Static Site Generator v0.</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://www.openheart.icu/cs/linux/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/linux/</guid>
      <description>Operation $ chown -R nginx:users ./* # 查看当前文件夹下权限 $ ls -l $ netstat -npa | grep 9000 # 查看当前路径 $ pwd # 安装git $ yum -y install git vim # 退出编辑模式，输入以下命令： Esc # 保存后退出vi，若为 :wq! 则为强制储存后退出（常用） :wq # 保存但不退出（常用） :w # 若文件属性为『只读』时，强制写入该档案 :w! # 离开 vi （常用） :q # 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。 :q! # 将档案还原到最原始的状态！ :e! tail # 现有itbilu.log日志文件，查看其后5行： $ tail -n -5 itbilu.log # 或 $ tail -n 5 itbilu.</description>
    </item>
    
    <item>
      <title>Mac Operation</title>
      <link>https://www.openheart.icu/cs/mac/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/mac/</guid>
      <description>brew使用国内镜像源（不好使） 中科大：
# 步骤一 cd &amp;#34;$(brew --repo)&amp;#34; git remote set-url origin https:*//mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git* # 步骤二 cd &amp;#34;$(brew --repo)/Library/Taps/homebrew/homebrew-core&amp;#34; git remote set-url origin https:*//mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git* #步骤三 brew update 复原：
cd &amp;#34;$(brew --repo)&amp;#34; git remote set-url origin https://github.com/Homebrew/brew.git cd &amp;#34;$(brew --repo)/Library/Taps/homebrew/homebrew-core&amp;#34; git remote set-url origin https://github.com/Homebrew/homebrew-core brew update  配置item2代理 # 打开配置文件 vim ~/.bash_profile # 如果用了`oh-my-zsh` 那么修改`~/.zshrc` # 在后面新增配置 export http_proxy=http://127.0.0.1:1087 export https_proxy=socks5://127.0.0.1:1080 # 同理，可能执行 source ~/.zshrc source ~/.bash_profile  iTerm2 + Oh My Zsh 安装Oh my zsh # curl 安装方式 sh -c &amp;#34;$(curl -fsSL https://raw.</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://www.openheart.icu/cs/markdown/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/markdown/</guid>
      <description>Expressions 公式标记 行内公式（inline） eg: $ E=mc^2 $，写法是：$E=mc^2$
整行公式（displayed） 用一对紧挨的两个美元符号$$包裹
 $$ $$
 eg: $$ \sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6} $$
 希腊字母    名称 大写 Tex 小写 Tex     alpha $A$ A α \alpha   beta $B$ B β \beat   gamma $Γ$ \Gamma γ \gamma   delta $Δ$ \Delta δ \delta   epsilon $E$ E ϵ \epsilon   zeta Z Z ζ \zeta   eta H H η \eta   theta $Θ$ \Theta θ \theta   iota I I ι \iota   kappa K K κ \kappa   lambda Λ \Lambda λ \lambda   mu M M μ \mu   nu N N ν \nu   xi $Ξ$ \Xi ξ \xi   omicron O O ο \omicron   pi Π \Pi π \pi   rho P P ρ \rho   sigma Σ \Sigma σ \sigma   tau T T τ \tau   upsilon Υ \Upsilon υ \upsilon   phi Φ \Phi ϕ \phi   chi X X χ \chi   psi $Ψ$ \Psi $ψ$ \psi   omega Ω \Omega ω \omega     角标 Markdown Language is a superset of HTML, so you can use html tag sub,sup to achieve this</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>https://www.openheart.icu/cs/mysql/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/mysql/</guid>
      <description>Install MySQL 准备操作 lsb_release -a	# 查看操作系统版本 # LSB Version:	:core-4.1-amd64:core-4.1-noarch # Distributor ID:	CentOS # Description:	CentOS Linux release 7.8.2003 (Core) # Release:	7.8.2003 # Codename:	Core cat /etc/redhat-release	# 查看Linux内核版本 # CentOS Linux release 7.8.2003 (Core) getconf LONG_BIT	# 查看系统位数 # 64 yum -y update	# 更新 yum rpm -qa | grep mysql	# 查看是否安装过MySQL 安装MySQL # 此处版本为在CentOS7下安装MySQL8.0 wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm # 安装 sudo yum localinstall mysql80-community-release-el7-3.noarch.rpm # 此时检查是否安装过 rpm -qa | grep mysql 显示：（端口默认为80） #mysql80-community-release-el7-3.</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>https://www.openheart.icu/cs/nginx/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/nginx/</guid>
      <description>Reverse Proxy &amp;amp; Forward Proxy Forward Proxy（正向代理） 我想访问 www.google.com ，然而大家都知道它被墙了，我没法直接访问它。于是我连接了一个 VPN 服务并设定其为本地 HTTP 访问的代理，然后我再访问 www.google.com ，此时我的请求被该 VPN 服务代理了，它帮我访问了 www.google.com 然后把结果返回给我。
正向代理隐藏真实客户端，www.google.com 并不知道访问他的是我。
Reverse Proxy（反向代理） 当我们在访问 www.baidu.com 时，百度背后有成千上万个服务器为我们服务，但具体是哪一台，我们并不知道。此时 www.baidu.com 就充当一个反向代理服务器，帮我们把请求转发到真实的服务器。
反向代理隐藏真实服务端，Nginx就是很好的反向代理服务器，用来做负载均衡。
正向代理与反向代理两者的区别在于代理的对象不一样：正向代理代理的对象是客户端，反向代理代理的对象是服务端。
Common Operation $sudo nginx sudo pkill -f nginx &amp;amp; wait $! sudo systemctl start nginx sudo systemctl restart nginx nginx -c /etc/nginx/nginx.conf # 重启服务 设置二级域名 增加一个新的listen 80
server_name设置为二级域名地址
root指向项目地址
server {listen 80;server_name site42.openheart.icu;location / {root /usr/project/openheart;}}强制浏览器使用本地缓存 cache-control/expires
# nginx.conf 中配置location ~ .</description>
    </item>
    
    <item>
      <title>PHP</title>
      <link>https://www.openheart.icu/cs/php/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/php/</guid>
      <description>Operation systemctl start php-fpm systemctl restart php-fpm service php-fpm start service php-fpm restart service php-fpm stop service php-fpm reload Problem 1.如果是使用nginx，需要去修改一下www.conf中的用户与用户组
user = nginx group = users </description>
    </item>
    
  </channel>
</rss>
