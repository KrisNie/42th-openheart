<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operation on 42th openheart</title>
    <link>https://www.openheart.icu/tags/operation/</link>
    <description>Recent content in Operation on 42th openheart</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ALL RIGHTS RESERVED KRIS NIE</copyright>
    <lastBuildDate>Sun, 17 Oct 2021 11:35:34 +0000</lastBuildDate><atom:link href="https://www.openheart.icu/tags/operation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CI/CD</title>
      <link>https://www.openheart.icu/cs/cicd/</link>
      <pubDate>Sun, 17 Oct 2021 11:35:34 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/cicd/</guid>
      <description>What is CI/CD?  In software engineering, CI/CD or CICD is the combined practices of continuous integration (CI) and either continuous delivery or continuous deployment (CD).
CI/CD bridges the gaps between development and operation activities and teams by enforcing automation in building, testing and deployment of applications. The process contrasts with traditional methods where all updates were integrated into one large batch before rolling out the newer version. Modern day DevOps practices involve continuous development, continuous testing, continuous integration, continuous deployment and continuous monitoring of software applications throughout its development life cycle.</description>
    </item>
    
    <item>
      <title>Database</title>
      <link>https://www.openheart.icu/cs/database/</link>
      <pubDate>Sun, 17 Oct 2021 11:35:34 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/database/</guid>
      <description>ISSUES  ORMs  ACID Atomicity 原子性 Transactions are often composed of multiple statements. Atomicity guarantees that each transaction is treated as a single &amp;ldquo;unit&amp;rdquo;, which either succeeds completely, or fails completely: if any of the statements constituting a transaction fails to complete, the entire transaction fails and the database is left unchanged. An atomic system must guarantee atomicity in each and every situation, including power failures, errors and crashes. A guarantee of atomicity prevents updates to the database occurring only partially, which can cause greater problems than rejecting the whole series outright.</description>
    </item>
    
    <item>
      <title>MongoDB </title>
      <link>https://www.openheart.icu/cs/mongodb/</link>
      <pubDate>Sun, 17 Oct 2021 11:35:34 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/mongodb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PostgreSQL</title>
      <link>https://www.openheart.icu/cs/postgresql/</link>
      <pubDate>Sun, 17 Oct 2021 11:35:34 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/postgresql/</guid>
      <description>Windows上安装其实蛮简单的，会有自带的pgAdmin工具。</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://www.openheart.icu/cs/redis/</link>
      <pubDate>Sun, 17 Oct 2021 11:35:34 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/redis/</guid>
      <description>MongoDB vs Redis
MongoDB is a document-oriented, disk-based database optimized for operational simplicity, schema-free design and very large data volumes. Redis is an in-memory, persistent data structure store that enables developers to perform common operations with minimal complexity and maximum performance. MongoDB and Redis are both NoSQL languages, but because they’re built for different purposes, Redis’ enhanced capabilities significantly augment MongoDB’s capabilities.</description>
    </item>
    
    <item>
      <title>Win Operation</title>
      <link>https://www.openheart.icu/cs/windows/</link>
      <pubDate>Tue, 12 Jan 2021 11:47:28 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/windows/</guid>
      <description>Windows Terminal oh-my-posh Install-Module oh-my-posh -Scope CurrentUser -AllowPrerelease PSReadLine PowerShell/PSReadLine
Install-Module PSReadLine -AllowPrerelease -Force notepad $profile
Import-Module PSReadLine Set-PSReadLineOption -PredictionSource History # 下面是三条是文档里推荐的，根据自己的习惯决定是否添加 Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward Set-PSReadLineKeyHandler -Key Tab -Function Complete # Hot-Key Set-PSReadLineKeyHandler -Key &amp;#34;Ctrl+g&amp;#34; -Function MenuComplete posh-git dahlbyk/posh-git
Install-Module posh-git -Scope CurrentUser -AllowPrerelease -Force Import-Module posh-git Scoop iwr -useb get.scoop.sh | iex  Command 重置Onedrive ​ %localappdata%\Microsoft\OneDrive\onedrive.exe /reset
​ %localappdata%\Microsoft\OneDrive\onedrive.exe
资源管理器打开卡顿可以通过索引选项给所有系统文件创建索引 证书管理中心 ​ 用win+R输入“certmgr.</description>
    </item>
    
    <item>
      <title>处理器中的流水线技术</title>
      <link>https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sat, 14 Nov 2020 16:55:11 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/</guid>
      <description>处理器中的流水线 在现代处理器中，流水线是一个最基本的概念。在了解cpu的时候，很多时候会提及拥有多少级流水线。虽然这个概念并不是在计算机技术中诞生的，但是这个技术却在处理器世界中大放异彩。
流水线(Pipeline)技术是指程序在执行时候多条指令重叠进行操作的一种准并行处理实现技术。通俗的讲将一个时序过程，分解成若干个子过程，每个过程都能有效的与其他子过程同时执行。这种思想最初是在RISC的架构中出现的，旨在提高处理器处理效率，争取在一个时钟周期中完成一条指令。
最经典的当属MIPS(无内部互锁的流水线处理器)的五级流水线技术。MIPS体系结构本身就是为了流水线而设计的，cpu在高速缓存中运行，每条指令的执行过程都分成五级。每一级成为一个流水线阶段，每个阶段占用固定的时间，通常是一个时钟周期。
上图是MIPS的五级流水线
其中：
IF(instruction fetch)：从指令高速缓存中获取下一条指令。
RD(Read register)：从指定的源寄存器域中指定的cpu寄存器中读取数据。
ALU(arithmetic/logic unit)：算术和逻辑运算操作。
MEM(memory R/W)：读写数据高速缓存中的内存变量。
WB(Write back)：将结果写入寄存器堆中。
很明显，如果只执行一条指令的话，流水线是不会提高效率的。但是如果要完成多条指令，利用流水线的并行原理，其实是可以提高几倍的处理速度。
由于流水线技术的高效性，后来所有的处理器都引进了该实现，当然包括x86的处理器，当年奔四号称20级的流水线结构。但是，是不是流水线级数越多越好呢？流水线级数越多，在处理多指令的时候确实也会越高效，但必然以高成本为代价，同时也会出现很多相关的一些副作用。
流水线的更多详细说明可以参阅更多书籍或者wiki。对于基础书籍推荐一下《大话处理器》的部分章节。
处理器中的冒险 流水线给处理器带来了效率，当然也有问题。称之为流水线冒险(HaZard)。
结构冒险 由于处理器资源冲突，而无法实现某些指令或者阶段的组合实现，就称之为处理器有结构冒险。
比如，早期的处理器中，程序和数据是存储在一起的，那么容易出现下图的情况：在第四个cycle中，IF和MEM同时访问存储器导致有一个操作要等待，此时hazard就出现了。现在的处理器已经解决了该问题：指令存储在L1P cache中，数据存储L1D cache中，单独访问，不会影响相互操作。
数据冒险 如果流水线中原来有先后顺序的指令同一时刻处理时，可能会导致出现访问了错误的数据的情况。
在汇编语句中，add R1,R2,R3 将寄存器R2和R3的和赋予R1，改变R1的值；而紧接着下面的语句：add R4,R1,R5则会使用R1的值，可是R1必须在第一条语句中的第5个cycle才能更新到寄存器中，语句二是在第4个cycle就要访问R1，也就是说第二,条指令此时在使用错误的R1的值。这是数据hazard出现了。
很容易就能想到一种方式解决：在两条指令中添加一条空指令：nop。但是会影响处理器的指令的执行效率。在现代处理器技术中，已经用forwarding的方式解决了。如下图，如果处理器在检测到当前指令的源操作数正好在流水线的EX或者MEM阶段，接直接将ex和mem寄存器的值传递给ALU的输入，而不是再从寄存器堆中获取数据了。因为此时寄存器堆中的数据可能是没有被及时更新的。
当然不仅在EX阶段有这种问题出现，在mem阶段也容易出现。
控制冒险 在流水线中的的执行指令时，由于并行处理的关系，后面很多指令其实都在流水线中开始处理了，包括预取值和译码。那么，如果此时程序中出现一条跳转语句怎么办呢？因为程序已经跑到其他地址处执行，流水线中之前已经做好的预取值和译码动作都不能使用了。这些会被处理器的专有部件flush掉，重新开始新的流水线。此时我们可以称之为出现了控制hazard。这种情况对于程序和效率来说是存在很大损失的。
当然，我们也有解决方案，也就是在jump指令后面(不会被真正使用，但是会进入流水线)添加nop。在MIPS程序中，经常在jump指令后面添加nop语句。
在X86架构中，是通过硬件来实现flush，将无效的流水线排空，以保证正确运行流水线。这里会涉及到分支预测技术的使用。
在其他一些处理器中，用软件的方式来处理，添加nop。同时在编译器中通过乱序的思想用有效指令代替nop。这样也可以避免转跳带来的性能损失。</description>
    </item>
    
    <item>
      <title>Idempotent</title>
      <link>https://www.openheart.icu/cs/idempotent/</link>
      <pubDate>Thu, 12 Nov 2020 15:58:21 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/idempotent/</guid>
      <description>什么是幂等？ 在数学里，幂等有两种主要的定义。
 在某二元运算下，幂等元素是指被自己重复运算（或对于函数是为复合）的结果等于它自己的元素。例如，乘法下唯一两个幂等实数为0和1。 某一元运算为幂等的时，其作用在任一元素两次后会和其作用一次的结果相同。例如，高斯符号便是幂等的。 一元运算的定义是二元运算定义的特例  In computer science, the term idempotence may have a different meaning depending on the context in which it is applied:
 in imperative programming(命令编程), a subroutine(子程序) with side effects is idempotent if the system state remains the same after one or several calls, in other words if the function from the system state space to itself associated to the subroutine is idempotent in the mathematical sense given in the definition; in functional programming, a pure function is idempotent if it is idempotent in the mathematical sense given in the definition.</description>
    </item>
    
    <item>
      <title>SQLserver</title>
      <link>https://www.openheart.icu/cs/sqlserver/</link>
      <pubDate>Sat, 15 Aug 2020 16:27:30 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/sqlserver/</guid>
      <description>Common Operation SQLCMD sqlcmd -S localhost -d CSI10 -q &amp;#34;SELECT * FROM SITE&amp;#34; sqlcmd -S localhost -d CSI10 -Q &amp;#34;SELECT * FROM SITE&amp;#34; sqlcmd -S localhost -U SA -Q &amp;#39;select @@VERSION&amp;#39; sqlcmd -S localhost  Issues Cannot insert explicit value for identity column in table &amp;lsquo;table&amp;rsquo; when IDENTITY_INSERT is set to OFF SET IDENTITY_INSERT Table1 ON --Do INSERT  SET IDENTITY_INSERT Table1 OFF SQL-Server: The backup set holds a backup of a database other than the existing   Don&amp;rsquo;t create an empty database and restore the .</description>
    </item>
    
    <item>
      <title>URL</title>
      <link>https://www.openheart.icu/cs/url/</link>
      <pubDate>Wed, 22 Jul 2020 20:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/url/</guid>
      <description>URL解析 UrlEncode    符号 意义 Encode     + 表示空格 %2B   (空格) 可以用+号替代 %20   / 分隔目录和子目录 %2F   ？ 分隔实际的URL和参数 %3F   % 指定特殊字符 %25   # 表示书签 %23   &amp;amp; URL 中指定的参数间的分隔符 %26   = URL 中指定参数的值 %3D    IE11URL解析问题 今天(2020-8-3 14:41:03)，发现项目中使用IE11时打开连接出现HTTP400的问题，有且仅在IE11里面，chrome正常。
后来查资料发现，是因为我传参的时候带了中文字符，而IE对中文字符是有限制的，所以不成功，而要解决这个问题就需要转码，把要传的中文参数用UrlEncode方法给转一下码就ok。</description>
    </item>
    
    <item>
      <title>Oracle</title>
      <link>https://www.openheart.icu/cs/oracle/</link>
      <pubDate>Tue, 21 Jul 2020 20:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/oracle/</guid>
      <description>Common Operation 删除操作前一定要先执行一遍查询 如题， 带的一个新员工做补丁把项目历史数据干掉了 My bad.
2020-8-7
Optimize 索引失效 SQL在WHERE条件里面使用了IN导致有一个关联表的索引失效，Oracle版本为11g
条件中有or，要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引
like查询是以%开头
如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则不使用索引
分库 分表 分区 视图优化 基表增加索引 对基表中，视图查询SQL的WHERE条件中用到的字段增加索引
重新进行表分析 -- 视图查询慢  analyze table table_name delete statistics; analyze table table_name compute statistics; -- 在当前用户下执行  select &amp;#39;analyze table &amp;#39;||table_name||&amp;#39; compute statistics;&amp;#39; from user_tables where table_name IN (&amp;#39;tablename&amp;#39;); -- 得到如下语句，将这些语句整体执行一遍  analyze table PRODUCT_REF_LIST_NESTEDTAB compute statistics; -- ....  -- 查看统计信息  select table_name,num_rows from user_tables; 分析的结果被Oracle用于基于成本的优化生成更好的查询计划。
遇到当前表的查询或其他性能不好时，就可以对相应的表进行一次分析。
 如果你的表经常由几千万变成几百万，又变成几千万那么需要制定分析计划定期表分析，同时可以一并分析索引，计算索引中数据的分布情况，这样CBO会选择更加准确的执行计划。 如果表结构变化了也要做下，也就是经常对表做dml就需要分析，现在推荐使用dbms_stats包。  ERROR ORA-01779: 无法修改与非键值保存表对应的列 这里要搞清楚三个概念：视图、联接视图、可更新的联接视图</description>
    </item>
    
    <item>
      <title>DNS</title>
      <link>https://www.openheart.icu/cs/dns/</link>
      <pubDate>Sun, 19 Jul 2020 12:50:56 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/dns/</guid>
      <description>DNSPod DNS+ ​ 首选：119.29.29.29
​ 备选：182.254.116.116
114DNS ​ 首选：114.114.114.114
​ 备选：114.114.114.115
阿里 AliDNS ​ 首选：223.5.5.5
​ 备选：223.6.6.6
DNS派 ​ 首选（电信/移动/铁通）：101.226.4.6
​ 备选（电信/移动/铁通）：218.30.118.6
​ 首选（联通）：123.125.81.6
​ 备选（联通）：140.207.198.6
百度 BaiduDNS ​ 首选：180.76.76.76
CNNIC SDNS ​ 首选：1.2.4.8
​ 备选：202.98.0.68
OpenDNS ​ 208.67.222.222
​ 208.67.220.220
​ 208.67.222.220
​ 208.67.220.222
Family Shield Servers 可以阻挡成人网站和含有恶意网站
​ 208.67.222.123
​ 208.67.220.123
IPv6地址(实验) ​ 2620:0:ccc::2
​ 2620:0:ccd::2</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://www.openheart.icu/cs/git/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/git/</guid>
      <description>idea设置git git remote add origin git@github.com:Hyominn/java_demo.git git pull git@github.com:Hyominn/java_demo.git git add . dir # 查看有哪些文件夹 git rm -r --cached target # 删除target文件夹 git commit –m &amp;#34;版本更新信息&amp;#34; git push kris@github.com:Hyominn/java_demo.git 设置git代理 # http git config --global https.proxy http://127.0.0.1:1080 git config --global https.proxy https://127.0.0.1:1080 # socks5 git config --global http.proxy &amp;#39;socks5://127.0.0.1:1080&amp;#39; git config --global https.proxy &amp;#39;socks5://127.0.0.1:1080&amp;#39; # 取消代理 git config --global --unset http.proxy git config --global --unset https.proxy npm config delete proxy 查看git安装路径  Mac: which git Windows: where git powershell用 where.</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://www.openheart.icu/cs/hugo/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/hugo/</guid>
      <description>Install tar -zxvf ./hugo_0.74.1_Linux-64bit.tar.gz cp ./hugo /usr/local/bin/ hugo new site site42 cd site42 hugo version rm -r public hugo server -b &amp;#34;https://openheart.icu:1313/&amp;#34; -p 1313 --bind &amp;#34;0.0.0.0&amp;#34; #mac 安装 brew install hugo # show the location of the hugo executable which hugo # show the installed version ls -l $( which hugo ) #lrwxr-xr-x 1 hyomin admin 30 7 17 22:46 /usr/local/bin/hugo -&amp;gt; ../Cellar/hugo/0.74.1/bin/hugo # verify that hugo runs correctly hugo version Hugo Static Site Generator v0.</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://www.openheart.icu/cs/linux/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/linux/</guid>
      <description>Papers The UNIX Time-Sharing System Operation $ chown -R nginx:users ./* # 查看当前文件夹下权限 $ ls -l $ netstat -npa | grep 9000 # 查看当前路径 $ pwd # 安装git $ yum -y install git vim # 退出编辑模式，输入以下命令： Esc # 保存后退出vi，若为 :wq! 则为强制储存后退出（常用） :wq # 保存但不退出（常用） :w # 若文件属性为『只读』时，强制写入该档案 :w! # 离开 vi （常用） :q # 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。 :q! # 将档案还原到最原始的状态！ :e! tail # 现有itbilu.log日志文件，查看其后5行： $ tail -n -5 itbilu.log # 或 $ tail -n 5 itbilu.</description>
    </item>
    
    <item>
      <title>Mac Operation</title>
      <link>https://www.openheart.icu/cs/mac/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/mac/</guid>
      <description>brew使用国内镜像源（不好使） 中科大：
# 步骤一 cd &amp;#34;$(brew --repo)&amp;#34; git remote set-url origin https:*//mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git* # 步骤二 cd &amp;#34;$(brew --repo)/Library/Taps/homebrew/homebrew-core&amp;#34; git remote set-url origin https:*//mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git* #步骤三 brew update 复原：
cd &amp;#34;$(brew --repo)&amp;#34; git remote set-url origin https://github.com/Homebrew/brew.git cd &amp;#34;$(brew --repo)/Library/Taps/homebrew/homebrew-core&amp;#34; git remote set-url origin https://github.com/Homebrew/homebrew-core brew update  配置item2代理 # 打开配置文件 vim ~/.bash_profile # 如果用了`oh-my-zsh` 那么修改`~/.zshrc` # 在后面新增配置 export http_proxy=http://127.0.0.1:1087 export https_proxy=socks5://127.0.0.1:1080 # 同理，可能执行 source ~/.zshrc source ~/.bash_profile  iTerm2 + Oh My Zsh 安装Oh my zsh # curl 安装方式 sh -c &amp;#34;$(curl -fsSL https://raw.</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://www.openheart.icu/cs/markdown/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/markdown/</guid>
      <description>support.typora.io  Expressions 公式标记 行内公式（inline） eg: $ E=mc^2 $，写法是：$E=mc^2$
整行公式（displayed） 用一对紧挨的两个美元符号$$包裹
 $$ $$
 eg: $$ \sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6} $$
 希腊字母    名称 大写 Tex 小写 Tex     alpha $A$ A α \alpha   beta $B$ B β \beat   gamma $Γ$ \Gamma γ \gamma   delta $Δ$ \Delta δ \delta   epsilon $E$ E ϵ \epsilon   zeta Z Z ζ \zeta   eta H H η \eta   theta $Θ$ \Theta θ \theta   iota I I ι \iota   kappa K K κ \kappa   lambda Λ \Lambda λ \lambda   mu M M μ \mu   nu N N ν \nu   xi $Ξ$ \Xi ξ \xi   omicron O O ο \omicron   pi Π \Pi π \pi   rho P P ρ \rho   sigma Σ \Sigma σ \sigma   tau T T τ \tau   upsilon Υ \Upsilon υ \upsilon   phi Φ \Phi ϕ \phi   chi X X χ \chi   psi $Ψ$ \Psi $ψ$ \psi   omega Ω \Omega ω \omega     角标 Markdown Language is a superset of HTML, so you can use html tag sub,sup to achieve this</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>https://www.openheart.icu/cs/mysql/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/mysql/</guid>
      <description>Install MySQL 准备操作 lsb_release -a	# 查看操作系统版本 # LSB Version:	:core-4.1-amd64:core-4.1-noarch # Distributor ID:	CentOS # Description:	CentOS Linux release 7.8.2003 (Core) # Release:	7.8.2003 # Codename:	Core cat /etc/redhat-release	# 查看Linux内核版本 # CentOS Linux release 7.8.2003 (Core) getconf LONG_BIT	# 查看系统位数 # 64 yum -y update	# 更新 yum rpm -qa | grep mysql	# 查看是否安装过MySQL 安装MySQL # 此处版本为在CentOS7下安装MySQL8.0 wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm # 安装 sudo yum localinstall mysql80-community-release-el7-3.noarch.rpm # 此时检查是否安装过 rpm -qa | grep mysql 显示：（端口默认为80） #mysql80-community-release-el7-3.</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>https://www.openheart.icu/cs/nginx/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/nginx/</guid>
      <description>Reverse Proxy &amp;amp; Forward Proxy Forward Proxy（正向代理） 我想访问 www.google.com ，然而大家都知道它被墙了，我没法直接访问它。于是我连接了一个 VPN 服务并设定其为本地 HTTP 访问的代理，然后我再访问 www.google.com ，此时我的请求被该 VPN 服务代理了，它帮我访问了 www.google.com 然后把结果返回给我。
正向代理隐藏真实客户端，www.google.com 并不知道访问他的是我。
Reverse Proxy（反向代理） 当我们在访问 www.baidu.com 时，百度背后有成千上万个服务器为我们服务，但具体是哪一台，我们并不知道。此时 www.baidu.com 就充当一个反向代理服务器，帮我们把请求转发到真实的服务器。
反向代理隐藏真实服务端，Nginx就是很好的反向代理服务器，用来做负载均衡。
正向代理与反向代理两者的区别在于代理的对象不一样：正向代理代理的对象是客户端，反向代理代理的对象是服务端。
Common Operation $sudo nginx sudo pkill -f nginx &amp;amp; wait $! sudo systemctl start nginx sudo systemctl restart nginx nginx -c /etc/nginx/nginx.conf # 重启服务 设置二级域名 增加一个新的listen 80
server_name设置为二级域名地址
root指向项目地址
server {listen 80;server_name site42.openheart.icu;location / {root /usr/project/openheart;}}强制浏览器使用本地缓存 cache-control/expires
# nginx.conf 中配置location ~ .</description>
    </item>
    
    <item>
      <title>PHP</title>
      <link>https://www.openheart.icu/cs/php/</link>
      <pubDate>Wed, 15 Jul 2020 23:28:00 +0000</pubDate>
      
      <guid>https://www.openheart.icu/cs/php/</guid>
      <description>Operation systemctl start php-fpm systemctl restart php-fpm service php-fpm start service php-fpm restart service php-fpm stop service php-fpm reload Problem 1.如果是使用nginx，需要去修改一下www.conf中的用户与用户组
user = nginx group = users </description>
    </item>
    
  </channel>
</rss>
