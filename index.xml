<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>42th openheart</title>
    <link>https://www.openheart.icu/</link>
    <description>Recent content on 42th openheart</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ALL RIGHTS RESERVED KRIS NIE</copyright>
    <lastBuildDate>Sun, 17 Oct 2021 11:35:34 +0000</lastBuildDate>
    
        <atom:link href="https://www.openheart.icu/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>CI/CD</title>
        <link>https://www.openheart.icu/cs/cicd/</link>
        <pubDate>Sun, 17 Oct 2021 11:35:34 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/cicd/</guid>
        <description>42th openheart https://www.openheart.icu/cs/cicd/ -&lt;h1 id=&#34;what-is-cicd&#34;&gt;What is CI/CD?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;In &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_engineering&#34;&gt;software engineering&lt;/a&gt;, &lt;strong&gt;CI/CD&lt;/strong&gt; or &lt;strong&gt;CICD&lt;/strong&gt; is the combined practices of &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;continuous integration&lt;/a&gt; (CI) and either &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_delivery&#34;&gt;continuous delivery&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_deployment&#34;&gt;continuous deployment&lt;/a&gt; (CD).&lt;/p&gt;
&lt;p&gt;CI/CD bridges the gaps between development and operation activities and teams by enforcing automation in building, testing and deployment of applications. The process contrasts with traditional methods where all updates were integrated into one large batch before rolling out the newer version. Modern day &lt;a href=&#34;https://en.wikipedia.org/wiki/DevOps&#34;&gt;DevOps&lt;/a&gt; practices involve continuous development, continuous testing, continuous integration, continuous deployment and continuous monitoring of software applications throughout its development life cycle. The CI/CD practice, or &lt;em&gt;CI/CD pipeline&lt;/em&gt;, forms the backbone of modern day DevOps operations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;continuous-integration&#34;&gt;Continuous integration&lt;/h2&gt;
&lt;p&gt;这个阶段应该是在VCS下，codebase要对每个MR进行自动化的build，甚至自动化的run unit testing。目的是为了保证merge的代码是OK的。&lt;/p&gt;
&lt;h2 id=&#34;continuous-delivery&#34;&gt;Continuous delivery&lt;/h2&gt;
&lt;p&gt;已经完成CI的代码表示可以交付给用户，此时的代码应该是随时都可以部署到生产环境中。&lt;/p&gt;
&lt;h2 id=&#34;continuous-deployment&#34;&gt;Continuous deployment&lt;/h2&gt;
&lt;p&gt;这个应该是重点，要自动部署可能基于cloud更为方便。CD过程可以更好的与蓝绿部署/滚动发布/灰度发布相结合，对用户&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/CI/CD&#34;&gt;https://en.wikipedia.org/wiki/CI/CD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/en/topics/devops/what-is-ci-cd&#34;&gt;https://www.redhat.com/en/topics/devops/what-is-ci-cd&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/cs/cicd/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Database</title>
        <link>https://www.openheart.icu/cs/database/</link>
        <pubDate>Sun, 17 Oct 2021 11:35:34 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/database/</guid>
        <description>42th openheart https://www.openheart.icu/cs/database/ -&lt;h1 id=&#34;issues&#34;&gt;ISSUES&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;orms&#34;&gt;ORMs&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;acidhttpsenwikipediaorgwikiacid&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ACID&#34;&gt;ACID&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Atomicity 原子性
Transactions are often composed of multiple statements. Atomicity guarantees that each transaction is treated as a single &amp;ldquo;unit&amp;rdquo;, which either succeeds completely, or fails completely: if any of the statements constituting a transaction fails to complete, the entire transaction fails and the database is left unchanged. An atomic system must guarantee atomicity in each and every situation, including power failures, errors and crashes. A guarantee of atomicity prevents updates to the database occurring only partially, which can cause greater problems than rejecting the whole series outright. As a consequence, the transaction cannot be observed to be in progress by another database client. At one moment in time, it has not yet happened, and at the next it has already occurred in whole (or nothing happened if the transaction was cancelled in progress).&lt;/p&gt;
&lt;p&gt;An example of an atomic transaction is a monetary transfer from bank account A to account B. It consists of two operations, withdrawing the money from account A and saving it to account B. Performing these operations in an atomic transaction ensures that the database remains in a consistent state, that is, money is neither debited nor credited if either of those two operations fail.&lt;/p&gt;
&lt;p&gt;Consistency (Correctness) 一致性
&lt;strong&gt;Consistency ensures that a transaction can only bring the database from one valid state to another&lt;/strong&gt;, maintaining database invariants: any data written to the database must be valid according to all defined rules, including constraints, cascades, triggers, and any combination thereof. This prevents database corruption by an illegal transaction, but does not guarantee that a transaction is correct. Referential integrity guarantees the primary key – foreign key relationship.&lt;/p&gt;
&lt;p&gt;Isolation 隔离性
Transactions are often executed concurrently (e.g., multiple transactions reading and writing to a table at the same time). Isolation ensures that concurrent execution of transactions leaves the database in the same state that would have been obtained if the transactions were executed sequentially. Isolation is the main goal of concurrency control; depending on the method used, the effects of an incomplete transaction might not even be visible to other transactions.&lt;/p&gt;
&lt;p&gt;Durability 永久性
Durability guarantees that once a transaction has been committed, it will remain committed even in the case of a system failure (e.g., power outage or crash). This usually means that completed transactions (or their effects) are recorded in non-volatile memory.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;transactions&#34;&gt;Transactions&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;n1-problem&#34;&gt;N+1 Problem&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem-in-orm-object-relational-mapping&#34;&gt;What is the &amp;ldquo;N+1 selects problem&amp;rdquo; in ORM (Object-Relational Mapping)?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;N+1是指，在两个表关联查询中，容易出现先查询主表，然后根据主表多次查询从表的情况。数据库执行语句此时为1+N。&lt;/p&gt;
&lt;p&gt;ORM可以使用相关method实现join。比如，在EF中可以使用&lt;code&gt;Include&lt;/code&gt;方法查询related数据。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;database-normalization&#34;&gt;Database Normalization&lt;/h2&gt;
&lt;hr&gt;
&lt;h2 id=&#34;indexes-and-how-they-work&#34;&gt;Indexes and how they work&lt;/h2&gt;
&lt;p&gt;You can find relevant content in dotnet interview page.&lt;/p&gt;
- https://www.openheart.icu/cs/database/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>MongoDB </title>
        <link>https://www.openheart.icu/cs/mongodb/</link>
        <pubDate>Sun, 17 Oct 2021 11:35:34 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/mongodb/</guid>
        <description>42th openheart https://www.openheart.icu/cs/mongodb/ -- https://www.openheart.icu/cs/mongodb/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>PostgreSQL</title>
        <link>https://www.openheart.icu/cs/postgresql/</link>
        <pubDate>Sun, 17 Oct 2021 11:35:34 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/postgresql/</guid>
        <description>42th openheart https://www.openheart.icu/cs/postgresql/ -&lt;p&gt;Windows上安装其实蛮简单的，会有自带的pgAdmin工具。&lt;/p&gt;
- https://www.openheart.icu/cs/postgresql/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Redis</title>
        <link>https://www.openheart.icu/cs/redis/</link>
        <pubDate>Sun, 17 Oct 2021 11:35:34 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/redis/</guid>
        <description>42th openheart https://www.openheart.icu/cs/redis/ -&lt;p&gt;MongoDB vs Redis&lt;/p&gt;
&lt;p&gt;MongoDB is a document-oriented, disk-based database optimized for operational simplicity, schema-free design and very large data volumes. &lt;em&gt;Redis is an in-memory, persistent data structure store that enables developers to perform common operations with minimal complexity and maximum performance.&lt;/em&gt; MongoDB and Redis are both NoSQL languages, but because they’re built for different purposes, Redis’ enhanced capabilities significantly augment MongoDB’s capabilities.&lt;/p&gt;
- https://www.openheart.icu/cs/redis/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Backtracking</title>
        <link>https://www.openheart.icu/arithmetic/backtracking/</link>
        <pubDate>Sun, 19 Sep 2021 17:15:26 +0000</pubDate>
        
        <guid>https://www.openheart.icu/arithmetic/backtracking/</guid>
        <description>42th openheart https://www.openheart.icu/arithmetic/backtracking/ -&lt;h1 id=&#34;backtrackinghttpsenwikipediaorgwikibacktracking&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Backtracking&#34;&gt;Backtracking&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/&#34;&gt;17. Letter Combinations of a Phone Number&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/sudoku-solver/&#34;&gt;37. Sudoku Solver&lt;/a&gt;&lt;/p&gt;
- https://www.openheart.icu/arithmetic/backtracking/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Working Effectively with Legacy Code</title>
        <link>https://www.openheart.icu/cs/working-effectively-with-legacy-code/</link>
        <pubDate>Thu, 12 Aug 2021 15:15:57 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/working-effectively-with-legacy-code/</guid>
        <description>42th openheart https://www.openheart.icu/cs/working-effectively-with-legacy-code/ -&lt;h1 id=&#34;the-mechanics-of-change&#34;&gt;The Mechanics of Change&lt;/h1&gt;
&lt;h2 id=&#34;changing-software&#34;&gt;Changing Software&lt;/h2&gt;
&lt;h3 id=&#34;four-reasons-to-change-software&#34;&gt;Four Reasons to Change Software&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Adding a feature&lt;/li&gt;
&lt;li&gt;Fixing a bug&lt;/li&gt;
&lt;li&gt;Improving the design&lt;/li&gt;
&lt;li&gt;Optimizing resource usage&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;changing-software-1&#34;&gt;Changing Software&lt;/h1&gt;
&lt;h1 id=&#34;dependency-breaking-techniques&#34;&gt;Dependency-Breaking Techniques&lt;/h1&gt;
- https://www.openheart.icu/cs/working-effectively-with-legacy-code/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>CS Conferences</title>
        <link>https://www.openheart.icu/cs/cs-conferences/</link>
        <pubDate>Mon, 09 Aug 2021 13:43:10 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/cs-conferences/</guid>
        <description>42th openheart https://www.openheart.icu/cs/cs-conferences/ -&lt;h1 id=&#34;list-of-computer-science-conferenceshttpsenwikipediaorgwikilist_of_computer_science_conferences&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_computer_science_conferences&#34;&gt;List of computer science conferences&lt;/a&gt;&lt;/h1&gt;
- https://www.openheart.icu/cs/cs-conferences/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Design Patterns</title>
        <link>https://www.openheart.icu/cs/design-patterns/</link>
        <pubDate>Mon, 02 Aug 2021 15:57:23 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/design-patterns/</guid>
        <description>42th openheart https://www.openheart.icu/cs/design-patterns/ -&lt;h1 id=&#34;structural-design-patterns&#34;&gt;Structural Design Patterns&lt;/h1&gt;
&lt;h1 id=&#34;creational-design-patterns&#34;&gt;Creational Design Patterns&lt;/h1&gt;
&lt;h1 id=&#34;behavioral-design-patterns&#34;&gt;Behavioral Design Patterns&lt;/h1&gt;
&lt;h2 id=&#34;observer&#34;&gt;Observer&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/e/e2/Observer-pattern-class-diagram.png&#34; alt=&#34;File:Observer-pattern-class-diagram.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The observer design pattern is suitable for distributed push-based notifications, because it supports a clean separation between two different components or application layers, such as a data source (business logic) layer and a user interface (display) layer. The pattern can be implemented whenever a provider uses callbacks to supply its clients with current information.&lt;/p&gt;
&lt;p&gt;Implementing the pattern requires that you provide the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A provider or subject, which is the object that sends notifications to observers. A provider is a class or structure that implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; interface. The provider must implement a single method, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1.subscribe&#34;&gt;IObservable.Subscribe&lt;/a&gt;, which is called by observers that wish to receive notifications from the provider.&lt;/li&gt;
&lt;li&gt;An observer, which is an object that receives notifications from a provider. An observer is a class or structure that implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; interface. The observer must implement three methods, all of which are called by the provider:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.onnext&#34;&gt;IObserver.OnNext&lt;/a&gt;, which supplies the observer with new or current information.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.onerror&#34;&gt;IObserver.OnError&lt;/a&gt;, which informs the observer that an error has occurred.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.oncompleted&#34;&gt;IObserver.OnCompleted&lt;/a&gt;, which indicates that the provider has finished sending notifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A mechanism that allows the provider to keep track of observers. Typically, the provider uses a container object, such as a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1&#34;&gt;System.Collections.Generic.List&lt;/a&gt; object, to hold references to the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; implementations that have subscribed to notifications. Using a storage container for this purpose enables the provider to handle zero to an unlimited number of observers. The order in which observers receive notifications is not defined; the provider is free to use any method to determine the order.&lt;/li&gt;
&lt;li&gt;An &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable&#34;&gt;IDisposable&lt;/a&gt; implementation that enables the provider to remove observers when notification is complete. Observers receive a reference to the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable&#34;&gt;IDisposable&lt;/a&gt; implementation from the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1.subscribe&#34;&gt;Subscribe&lt;/a&gt; method, so they can also call the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable.dispose&#34;&gt;IDisposable.Dispose&lt;/a&gt; method to unsubscribe before the provider has finished sending notifications.&lt;/li&gt;
&lt;li&gt;An object that contains the data that the provider sends to its observers. The type of this object corresponds to the generic type parameter of the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; interfaces. Although this object can be the same as the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; implementation, most commonly it is a separate type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Implementing the pattern requires that you provide the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A provider or subject, which is the object that sends notifications to observers. A provider is a class or structure that implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; interface. The provider must implement a single method, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1.subscribe&#34;&gt;IObservable.Subscribe&lt;/a&gt;, which is called by observers that wish to receive notifications from the provider.&lt;/li&gt;
&lt;li&gt;An observer, which is an object that receives notifications from a provider. An observer is a class or structure that implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; interface. The observer must implement three methods, all of which are called by the provider:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.onnext&#34;&gt;IObserver.OnNext&lt;/a&gt;, which supplies the observer with new or current information.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.onerror&#34;&gt;IObserver.OnError&lt;/a&gt;, which informs the observer that an error has occurred.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.oncompleted&#34;&gt;IObserver.OnCompleted&lt;/a&gt;, which indicates that the provider has finished sending notifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A mechanism(&lt;em&gt;方法&lt;/em&gt;) that allows the provider to keep track of observers. Typically, the provider uses a container object, such as a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1&#34;&gt;System.Collections.Generic.List&lt;/a&gt; object, to hold references to the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; implementations that have subscribed to notifications. Using a storage container for this purpose enables the provider to handle zero to an unlimited number of observers. The order in which observers receive notifications is not defined; the provider is free to use any method to determine the order.&lt;/li&gt;
&lt;li&gt;An &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable&#34;&gt;IDisposable&lt;/a&gt; implementation that enables the provider to remove observers when notification is complete. Observers receive a reference to the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable&#34;&gt;IDisposable&lt;/a&gt; implementation from the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1.subscribe&#34;&gt;Subscribe&lt;/a&gt; method, so they can also call the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable.dispose&#34;&gt;IDisposable.Dispose&lt;/a&gt; method to unsubscribe before the provider has finished sending notifications.&lt;/li&gt;
&lt;li&gt;An object that contains the data that the provider sends to its observers. The type of this object corresponds to the generic type parameter of the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; interfaces. Although this object can be the same as the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; implementation, most commonly it is a separate type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.runoob.com/design-pattern/observer-pattern.html&#34;&gt;观察者模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://refactoring.guru/design-patterns/observer&#34;&gt;Observer - guru&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;Observer pattern - Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/events/observer-design-pattern&#34;&gt;Observer Design Pattern - MSDN&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
- https://www.openheart.icu/cs/design-patterns/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Economics &amp; Finance &amp; Management</title>
        <link>https://www.openheart.icu/finance/economicsfinancemanagement/</link>
        <pubDate>Tue, 25 May 2021 23:29:58 +0000</pubDate>
        
        <guid>https://www.openheart.icu/finance/economicsfinancemanagement/</guid>
        <description>42th openheart https://www.openheart.icu/finance/economicsfinancemanagement/ -&lt;h1 id=&#34;如何区分并界定经济学金融学与管理学&#34;&gt;如何区分并界定经济学、金融学与管理学？&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这24份期刊涵盖了6大领域：会计(Accounting)、金融(Finance)、IS(Information System)、营销(Marketing)、运营(Operation)和管理(Management)，除了Management Science是一份集合刊物，其他各份刊物都能对号入座&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/v2-c15b2a92974141515f1198c23e784b04_r.jpg?source=1940ef5c&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;economics&#34;&gt;Economics&lt;/h2&gt;
&lt;p&gt;经济学是针对人类经济活动、经济关系以及经济规律的社会科学，所谓经济活动，是指将有限或者稀缺资源进行合理配置的行为。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;微观经济&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;宏观经济&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;finance&#34;&gt;Finance&lt;/h2&gt;
&lt;p&gt;金融学是将“货币资金”视作这个“有限或者稀缺资源”来进行深入研究，是经济学在货币领域的深化和细化。通俗讲，是研究怎么赚钱，通过什么方式赚钱的学科，研究个人、组织和公司等在一段时间内如何有效地筹集，分配和利用资金，是研究资金融通的学科。金融的具体内容有货币、证券、银行、保险、资本市场、衍生证券、投资理财等等。&lt;/p&gt;
&lt;h2 id=&#34;management&#34;&gt;Management&lt;/h2&gt;
&lt;p&gt;财务会计属于管理学。&lt;/p&gt;
&lt;p&gt;The Logics of Management 管理逻辑学&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/26976012&#34;&gt;商学、经济学、金融学与管理学有哪些相似与不同之处，如何具体区分？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/finance/economicsfinancemanagement/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
  </channel>
</rss> 