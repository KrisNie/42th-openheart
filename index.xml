<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>42th openheart</title>
    <link>https://www.openheart.icu/</link>
    <description>Recent content on 42th openheart</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ALL RIGHTS RESERVED KRIS NIE</copyright>
    <lastBuildDate>Sat, 30 Jul 2022 17:15:26 +0000</lastBuildDate>
    
        <atom:link href="https://www.openheart.icu/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Banker&#39;s algorithm</title>
        <link>https://www.openheart.icu/arithmetic/bankers-algorithm/</link>
        <pubDate>Sat, 30 Jul 2022 17:15:26 +0000</pubDate>
        
        <guid>https://www.openheart.icu/arithmetic/bankers-algorithm/</guid>
        <description>42th openheart https://www.openheart.icu/arithmetic/bankers-algorithm/ -&lt;h1 id=&#34;data-structure&#34;&gt;Data Structure&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;可利用资源向量 Available ：含有 m 个元素的数组，其中每个元素代表一类可用的资源数目。Available[J] = K 表示系统中现有 R~j~ 类资源 K 个。&lt;/li&gt;
&lt;li&gt;最大需求矩阵 Max ： n * m 矩阵，定义系统中 n 个进程中的每个进程对 m 类资源的最大需求。一行代表一个进程，一列代表一类资源。 Max[i,j] = K 表示进程 i 需要 R~j~ 类资源的最大数目是 K 。&lt;/li&gt;
&lt;li&gt;分配矩阵 Allocation ： n * m 矩阵，定义系统中每类资源当前已分配给每个进程的资源数。 Allocation[i,j] = K 表示进程 i 当前已分得 R~j~ 类资源的数目为 K 。&lt;/li&gt;
&lt;li&gt;需求矩阵 Need ： n * m 矩阵，表示每个进程接下来最多还需要多少资源。 Need[i,j] = K 表示进程 i 还需要 R~j~ 类资源的数目为K。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述三个矩阵存在关系： Need = Max - Allocation&lt;/p&gt;
&lt;h1 id=&#34;bankers-algorithm&#34;&gt;Banker&amp;rsquo;s algorithm&lt;/h1&gt;
&lt;p&gt;设 Request~i~ 是进程 P~i~ 的请求向量， Request[j] = K 表示进程 P~i~ 需要 j 类资源 K 个。当 P~i~ 发出资源请求后，系统按下述步骤进行检查：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;若 Request~i~[j] &amp;lt;= Need[i,j]，则转向步骤2；否则认为出错，因为它所需要的资源已经超过了它所宣布的最大值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 Request~i~[j] &amp;lt;= Available[j]，则转向步骤3；否则，表示尚无足够资源，P~i~ 须等待。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若系统试探把资源分配给进程 P~i~ ，并修改下main数据结构中的数值：&lt;/p&gt;
&lt;p&gt;Available = Available - Request~i~;&lt;/p&gt;
&lt;p&gt;Allocation[i,j] = Allocation[i,j] + Request~i~[j];&lt;/p&gt;
&lt;p&gt;Need[i,j] = Need[i,j] - Request~i~[j];&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统执行安全性算法，检查此次资源分配后，系统是否出于安全状态。若安全，才正式将资源分配给进程 P~i~，以完成本次分配；否则，讲本次的试探分配作废，回复原来的资源分配状态，让 P~i~等待。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;security-algorithm&#34;&gt;Security algorithm&lt;/h1&gt;
&lt;p&gt;设置工作向量 Work，有 m 个元素，表示系统中的剩余可用资源数目。在执行安全性算法开始时， Work = Available 。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始时安全序列为空。&lt;/li&gt;
&lt;li&gt;从 Need 矩阵中找出符合下面条件的行：改行对应的进程不在安全序列中，而且该行小于等于 Work 向量，找到后，把对应的进程加入安全序列；若找不到，则执行步骤4。&lt;/li&gt;
&lt;li&gt;进程 P~i~ 进入安全序列后，可顺利执行，直到完成，并释放分配给它的资源，因此应执行 Work = Work + Allocation[i]，其中 Allocation[i] 表示进程 P~i~代表的在 Allocation 矩阵中对应的行，返回步骤2。&lt;/li&gt;
&lt;li&gt;若此时安全序列中已有所有进程， 则系统处于安全状态，否则系统处于不安全状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220730172750647.png&#34; alt=&#34;image-20220730172750647&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Banker%27s_algorithm&#34;&gt;https://en.wikipedia.org/wiki/Banker%27s_algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/arithmetic/bankers-algorithm/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Configure &amp; Price &amp; Quote</title>
        <link>https://www.openheart.icu/business/configure-price-quote/</link>
        <pubDate>Fri, 29 Jul 2022 23:29:58 +0000</pubDate>
        
        <guid>https://www.openheart.icu/business/configure-price-quote/</guid>
        <description>42th openheart https://www.openheart.icu/business/configure-price-quote/ -&lt;h1 id=&#34;configure--price--quote&#34;&gt;Configure &amp;amp; Price &amp;amp; Quote&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220729233642622.png&#34; alt=&#34;image-20220729233642622&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;visual-configuration&#34;&gt;Visual configuration&lt;/h2&gt;
&lt;p&gt;Leverage a powerful, dynamic, and visually interactive experience to bring product options and final product configurations to life.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3D interactive model creation&lt;/li&gt;
&lt;li&gt;2D parametric drawing generation&lt;/li&gt;
&lt;li&gt;3D CAD assemblies and shop drawings creation&lt;/li&gt;
&lt;li&gt;Augmented reality experience&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;innovative-quoting-and-ordering&#34;&gt;Innovative quoting and ordering&lt;/h2&gt;
&lt;p&gt;Capture interest and knowledge about your highly variable products or systems once, and then share with customers and selling channels to make the selection and purchase process intuitive and error-free. In addition, applying analytics can transform quote and configuration data into insights that help drive better business decisions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internal and external sales channels leverage the same set of capabilities&lt;/li&gt;
&lt;li&gt;Collaboration capabilities&lt;/li&gt;
&lt;li&gt;Built-in pricing and engineering approval workflows&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;enterprise-integration&#34;&gt;Enterprise integration&lt;/h2&gt;
&lt;p&gt;Out of the box integration for key requirements and processes—ranging from interest generation and capture, specing, quoting, and ordering, through dynamic BOM and routing creation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;INFOR CPQ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Infor®, Salesforce, and Microsoft Dynamics CRM support&lt;/li&gt;
&lt;li&gt;Support for Infor Rhythm® for Commerce and Infor SyteLine® portals&lt;/li&gt;
&lt;li&gt;Infor, Oracle, and Microsoft Dynamics ERP support&lt;/li&gt;
&lt;li&gt;SolidWorks, Autodesk, and Creo CAD support&lt;/li&gt;
&lt;li&gt;Service-level integrations with dozens of additional applications&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;dynamic-generation-of-manufacturing-information&#34;&gt;Dynamic generation of manufacturing information&lt;/h2&gt;
&lt;p&gt;Automatically convert complete and accurate quotes to orders and dynamically generate manufacturing information; both integrated with your host applications for accurate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bills of Material (BOMs)&lt;/li&gt;
&lt;li&gt;Routings&lt;/li&gt;
&lt;li&gt;Shop orders&lt;/li&gt;
&lt;li&gt;Change orders&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tdci&#34;&gt;TDCI&lt;/h1&gt;
&lt;h2 id=&#34;tdci-integration&#34;&gt;TDCI Integration&lt;/h2&gt;
&lt;p&gt;Easily Integrate BuyDesign Configurator with your ERP, CRM and other enterprise applications. Because of its open architecture, BuyDesign Configurator is ideal for systems integrators, software OEMs, in-house IT departments, and others who need to incorporate a powerful, flexible, easy to use product configurator into their applications.&lt;/p&gt;
&lt;h2 id=&#34;use-buydesign-as-embedded-configurator&#34;&gt;Use BuyDesign as Embedded Configurator&lt;/h2&gt;
&lt;p&gt;When linked to your ERP system’s order management function, BuyDesign Configurator provides full configuration capabilities for make-to-order (MTO), configure-to-order (CTO), or certain engineer-to-order (ETO) products. After capturing the selected product features and options and calculating the proper price, it can generate either a “smart” part number or detailed BOM, routing, and other manufacturing data to drive the production process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220729234036489.png&#34; alt=&#34;image-20220729234036489&#34;&gt;&lt;/p&gt;
&lt;p&gt;When linked to your CRM system’s opportunity and account management functions, BuyDesign acts as a configuration and pricing engine to produce quotes for MTO, CTO, or ETO products. In addition to guiding sales people through the configuration process, BuyDesign can generate configuration-specific sales documents such as quotes, proposals, drawings, 3D CAD models, contracts, spec sheets, etc.&lt;/p&gt;
&lt;p&gt;BuyDesign Configurator has been built to be “application neutral” so it can be integrated with just about any ERP, CRM or CAD system. Using our templatized adapters, we are experienced in integration with a wide range of popular software packages. See ERP/CRM Integration for specific integrations already available.&lt;/p&gt;
&lt;h2 id=&#34;add-product-configuration-to-your-custom-application&#34;&gt;Add Product Configuration to Your Custom Application&lt;/h2&gt;
&lt;p&gt;In addition to available Adapters for popular ERP and CRM systems, TDCI offers a Software Development Kit (SDK) that makes it easy for developers and integrators to seamlessly link BuyDesign Configurator with any application deployed on the web, servers, or desktops and laptops.&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tdci.com/Solutions/Integration&#34;&gt;http://www.tdci.com/Solutions/Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infor.com/news/infor-completes-acquisition-of-tdci-inc.-1&#34;&gt;Infor Completes Acquisition of TDCI, Inc.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infor.com/solutions/service-sales/configure-price-quote&#34;&gt;Infor CPQ&lt;/a&gt;: configure&amp;amp;price&amp;amp;quote&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/business/configure-price-quote/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Customer Orders</title>
        <link>https://www.openheart.icu/business/customer-orders/</link>
        <pubDate>Fri, 29 Jul 2022 23:29:58 +0000</pubDate>
        
        <guid>https://www.openheart.icu/business/customer-orders/</guid>
        <description>42th openheart https://www.openheart.icu/business/customer-orders/ -&lt;h1 id=&#34;whats-the-co&#34;&gt;What&amp;rsquo;s the CO&lt;/h1&gt;
&lt;p&gt;A customer order is a formal order from the customer which provides details of the amount and due date for a customer’s requirement of products.&lt;/p&gt;
&lt;p&gt;It is a written document specifying the orders made by the customer. It states the amount of money to be paid, the due date on which the money can be expected, and the quantity of the product delivered.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(It is mainly used in business to help customers get their products. It helps the company create a system to ensure that what they are getting from suppliers is what the customer wants and what the customer ordered. There are two types of customer orders: purchase orders and sales orders.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A purchase order is an agreement between buyer and seller for future delivery of goods or services at a predetermined price, while a sales order provides information about the current availability of certain items with no commitment on purchase.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;For both types of orders, specific details need to be included so that there’s no confusion down the line about who owes money to whom when it comes to delivery time frames or pricing adjustments.)&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;blanket-orderhttpsenwikipediaorgwikiblanket_order&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Blanket_order&#34;&gt;Blanket order&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;A blanket order, blanket purchase agreement or call-off order&lt;/em&gt; &lt;em&gt;is a purchase order which a customer places with its supplier to allow multiple delivery dates over a period of time, often negotiated to take advantage of predetermined pricing. It is normally used when there is a recurring need for expendable goods.&lt;/em&gt; &lt;strong&gt;Blanket orders are often used when a customer&lt;/strong&gt; &lt;strong&gt;buys large quantities and has obtained special discounts&lt;/strong&gt;**.** *Based on the blanket order, sales orders (&amp;lsquo;blanket releases&amp;rsquo; or &amp;lsquo;release orders&amp;rsquo;) and invoice items can be created as needed until the contract is fulfilled, the end of the order period is reached or a pre-determined maximum order value is reached.*&lt;/p&gt;
- https://www.openheart.icu/business/customer-orders/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Inventory</title>
        <link>https://www.openheart.icu/business/inventory/</link>
        <pubDate>Fri, 29 Jul 2022 23:29:58 +0000</pubDate>
        
        <guid>https://www.openheart.icu/business/inventory/</guid>
        <description>42th openheart https://www.openheart.icu/business/inventory/ -&lt;h1 id=&#34;counting&#34;&gt;Counting&lt;/h1&gt;
&lt;p&gt;Physical Inventory Counting&lt;/p&gt;
&lt;p&gt;Cycle Counting&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;container&#34;&gt;Container&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Containerization&#34;&gt;Containerization&lt;/a&gt;: &lt;a href=&#34;https://wiki.mbalib.com/wiki/%E9%9B%86%E8%A3%85%E7%AE%B1%E5%8C%96&#34;&gt;集装箱化&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;transfer-order-processing&#34;&gt;Transfer order processing&lt;/h1&gt;
&lt;p&gt;The following table displays the steps for using a transfer order.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220729235408786.png&#34; alt=&#34;image-20220729235408786&#34;&gt;&lt;/p&gt;
&lt;p&gt;The following graphic displays the transfer inventory flow.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220729235502743.png&#34; alt=&#34;image-20220729235502743&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
- https://www.openheart.icu/business/inventory/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Job Orders</title>
        <link>https://www.openheart.icu/business/job-orders/</link>
        <pubDate>Fri, 29 Jul 2022 23:29:58 +0000</pubDate>
        
        <guid>https://www.openheart.icu/business/job-orders/</guid>
        <description>42th openheart https://www.openheart.icu/business/job-orders/ -&lt;h1 id=&#34;backflushing&#34;&gt;Backflushing&lt;/h1&gt;
&lt;h2 id=&#34;automatic-deduction-of-material-or-components&#34;&gt;Automatic deduction of material or components&lt;/h2&gt;
&lt;p&gt;Backflushing is a method of updating inventory records at a defined point in the manufacturing process, called the &lt;em&gt;deduct point&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;倒冲就是为了在保证生产的效率，对于生产过程中价值较低、使用频繁、数量较大的物料（比如螺丝、螺帽各种油、漆液体类原材料）根据BOM（物料清单）中设置的标准消耗量在对生产订单报工时自动进行物料消耗的一种方法，比如生产一个产品A，需要使用2个原材料A1，在对产品A报工时产生为100，系统就自动消耗200个A1到生产订单，至于系统标准消耗的量和实际消耗量之间的差异，则通过实际盘点实现，通常需要设置车间线边库专门核算和管理倒冲的物料，也便于在月底对线边库盘点差异，差异的处理则根据实际情况分析是否需调整标准消耗量还是要加强车间材料管理降低损耗率等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To use backflushing, you must set up the backflushing location on the Inventory Parameters form.&lt;/li&gt;
&lt;li&gt;You cannot perform backflushing operations on items  from consignment warehouse locations.&lt;/li&gt;
&lt;li&gt;If you have material in a vendor consignment warehouse when you perform a backflush, the system will check that warehouse for the required     material. If found, it will transfer the necessary amount out of consignment, which will trigger a purchase order line with the vendor.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;purpose-of-backflushing&#34;&gt;Purpose of Backflushing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;minimize the number of  entries you will need to enter to record transactions for jobs&lt;/li&gt;
&lt;li&gt;production schedules&lt;/li&gt;
&lt;li&gt;JIT production&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just-in-time, continuous improvement, and lean are powerful approaches to helping companies continuously improve their operations in the face of a more demanding competitive environment. A prime target of these programs is waste; waste is defined as any activity that does not add value and can take the form of &lt;em&gt;excess inventory, setup times, inspection, material movement, transactions, or rejects&lt;/em&gt;. Implementation of lean programs can lead to dramatically lower inventories. Far from reducing concern for inventory accuracy, however, the need for accuracy actually increases with lean programs, because lower on-hand balances translate directly to a greater opportunity for stock-outs.&lt;/p&gt;
&lt;p&gt;通用的、价值不高的物料总是在相同的位置被生产订单消耗。&lt;/p&gt;
&lt;p&gt;物料项目的帐面库存量是在其父项或装配件的活动完成之后才被减去。缺点是会导致帐面记录与实际库存经常不一致。&lt;/p&gt;
&lt;h2 id=&#34;who-can-be-backflushed&#34;&gt;Who can be backflushed?&lt;/h2&gt;
&lt;p&gt;Materials, setup and run, and machine transactions can be backflushed.&lt;/p&gt;
&lt;h2 id=&#34;control-points&#34;&gt;Control points&lt;/h2&gt;
&lt;p&gt;The point in the production process up to which all the parts assumed to have use (as defined in the bill of material) are “back&lt;/p&gt;
&lt;p&gt;flushed,” (automatically deducted) from the inventory records.&lt;/p&gt;
&lt;h2 id=&#34;overposting&#34;&gt;Overposting&lt;/h2&gt;
&lt;p&gt;Backflushing saves time when there are standard items and times. the systemallows material and operation transactions to post at any operation regardless of its backflush settings.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;outside-process-management&#34;&gt;Outside Process management&lt;/h1&gt;
&lt;h2 id=&#34;co-products-and-by-products-in-process-manufacturing&#34;&gt;Co-products and by-products in Process Manufacturing&lt;/h2&gt;
&lt;p&gt;Process Manufacturing can include by-products and co-products.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By-products of the formulation process are objects that you need to inventory but that are probably assigned zero or little cost. For example, if you are processing cherries for use in a jam recipe, you must remove the stems and the seeds. If you want to keep track of the removed amount, it is considered a by-product of the formulation. You can choose not to account for this waste product as by-product; in that case, your yield value per pound of unprocessed cherries will be lower.&lt;/li&gt;
&lt;li&gt;Co-products in process manufacturing occur when you package the blended ingredients into multiple types of products that can be sold. For example, 12-oz and 20-oz jars of cherry jam are co-products.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In process manufacturing, the number of co-products is based on orders. You do not produce the same amount or percentage of each co-product each time you do a run, as you do in discrete manufacturing.&lt;/p&gt;
&lt;p&gt;When you have co-products, you also need to consider whether the co-products are produced on the same line. For example, does the same production line produce 12-oz jams and 20-oz jams, or are two different production lines used? This decision affects your setup process.&lt;/p&gt;
&lt;hr&gt;
- https://www.openheart.icu/business/job-orders/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Material Planning</title>
        <link>https://www.openheart.icu/business/material-planning/</link>
        <pubDate>Fri, 29 Jul 2022 23:29:58 +0000</pubDate>
        
        <guid>https://www.openheart.icu/business/material-planning/</guid>
        <description>42th openheart https://www.openheart.icu/business/material-planning/ -&lt;h1 id=&#34;bill-of-materialshttpsenwikipediaorgwikibill_of_materials&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Bill_of_materials&#34;&gt;Bill of Materials&lt;/a&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;low-level-code&#34;&gt;Low Level Code&lt;/h1&gt;
&lt;p&gt;The low-level code represents the lowest level of the item in any current, job, or production schedule bill of material (BOM). A low-level code of 0 indicates that the item is an end item (finished good) and is not a subcomponent of another item. A low-level code greater than zero indicates that the item is a component of another item. The system supports up to 20 levels of low-level coding.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220729232557556.png&#34; alt=&#34;image-20220729232557556&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.asprova.jp/mrp/glossary/en/cat248/&#34;&gt;https://www.asprova.jp/mrp/glossary/en/cat248/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/business/material-planning/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Material Requirements Planning</title>
        <link>https://www.openheart.icu/business/material-requirements-planning/</link>
        <pubDate>Fri, 29 Jul 2022 23:29:58 +0000</pubDate>
        
        <guid>https://www.openheart.icu/business/material-requirements-planning/</guid>
        <description>42th openheart https://www.openheart.icu/business/material-requirements-planning/ -&lt;h1 id=&#34;prior-to-mrp&#34;&gt;Prior to MRP&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Reorder point (ROP)&lt;/li&gt;
&lt;li&gt;Reorder-quantity (ROQ) type     methods like EOQ (economic order quantity)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;mrp&#34;&gt;MRP&lt;/h1&gt;
&lt;p&gt;Material Requirements Planning was computerized by the aero engine makers Rolls Royce and General Electric in the early 1950s but not commercialized by them. It was then &amp;lsquo;reinvented&amp;rsquo; to supply the &lt;a href=&#34;https://en.wikipedia.org/wiki/Polaris_(UK_nuclear_programme)&#34;&gt;Polaris program&lt;/a&gt; and then, in 1964, as a response to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Toyota_Production_System&#34;&gt;Toyota Manufacturing Program&lt;/a&gt;(TPS), Joseph Orlicky developed material requirements planning (MRP). The first company to use MRP was &lt;a href=&#34;https://en.wikipedia.org/wiki/Black%2BDecker&#34;&gt;Black &amp;amp; Decker&lt;/a&gt; in 1964, with Dick Alban as project leader. Orlicky&amp;rsquo;s 1975 book &lt;em&gt;Material Requirements Planning has the subtitle The New Way of Life in Production and Inventory Management&lt;/em&gt;. By 1975, MRP was implemented in 700 companies. This number had grown to about 8,000 by 1981.&lt;/p&gt;
&lt;h1 id=&#34;mrp-ii&#34;&gt;MRP II&lt;/h1&gt;
&lt;p&gt;In 1983, &lt;a href=&#34;https://www.oliverwight-americas.com/&#34;&gt;Oliver Wight&lt;/a&gt; developed MRP into manufacturing resource planning (MRP II). In the 1980s, Joe Orlicky&amp;rsquo;s MRP evolved into Oliver Wight&amp;rsquo;s manufacturing resource planning (MRP II) which brings master scheduling, rough-cut capacity planning, capacity requirements planning, S&amp;amp;OP in 1983 and other concepts to classical MRP. By 1989, about one third of the software industry was MRP II software sold to American industry ($1.2 billion worth of software).&lt;/p&gt;
&lt;h1 id=&#34;erp&#34;&gt;ERP&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220729232340846.png&#34; alt=&#34;image-20220729232340846&#34;&gt;&lt;/p&gt;
&lt;p&gt;ERP (Enterprise Resource Planning) is an extended version of MRP II, but a lot more comprehensive as it includes all core business functions and processes, including manufacturing operations. In addition to production and inventory, ERP systems also support financial and accounting management, sales, CRM, HR, service and support, and more.&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Material     Requirements Planning, 1975, by Joseph A. Orlicky&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Orlicky&amp;rsquo;s     Material Requirements Planning, Third Edition, 2011, by Carol Ptak, Chad     Smith&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/business/material-requirements-planning/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Purchase Orders</title>
        <link>https://www.openheart.icu/business/purchase-orders/</link>
        <pubDate>Fri, 29 Jul 2022 23:29:58 +0000</pubDate>
        
        <guid>https://www.openheart.icu/business/purchase-orders/</guid>
        <description>42th openheart https://www.openheart.icu/business/purchase-orders/ -&lt;h1 id=&#34;whats-the-po&#34;&gt;What&amp;rsquo;s the PO&lt;/h1&gt;
&lt;p&gt;While &lt;a href=&#34;https://en.wikipedia.org/wiki/Purchase_order&#34;&gt;purchase order&lt;/a&gt; refers to an outgoing order for the purchase of goods or services, the term sales order is used in the instance that the order is received on the sales side (incoming).&lt;/p&gt;
- https://www.openheart.icu/business/purchase-orders/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Schema Security</title>
        <link>https://www.openheart.icu/computing-science/schema-security/</link>
        <pubDate>Tue, 19 Jul 2022 17:28:00 +0000</pubDate>
        
        <guid>https://www.openheart.icu/computing-science/schema-security/</guid>
        <description>42th openheart https://www.openheart.icu/computing-science/schema-security/ -&lt;h1 id=&#34;authentication&#34;&gt;Authentication&lt;/h1&gt;
&lt;p&gt;系统如何正确分辨出操作用户的真实身份？&lt;/p&gt;
&lt;p&gt;认证并不是仅仅是校验一下用户名、密码是否正确这么简单。&lt;/p&gt;
&lt;p&gt;账户和权限信息作为一种必须最大限度保障安全和隐私，同时又要兼顾各个系统模块甚至系统间共享访问的基础主数据，它的存储、管理与使用都面临一系列复杂的问题。对于某些大规模的信息系统，账户和权限的管理往往要由专门的基础设施来负责，譬如微软的&lt;a href=&#34;https://en.wikipedia.org/wiki/Active_Directory&#34;&gt;活动目录&lt;/a&gt;（Active Directory，AD）或者&lt;a href=&#34;https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol&#34;&gt;轻量目录访问协议&lt;/a&gt;（Lightweight Directory Access Protocol，LDAP），跨系统的共享使用甚至会用到区块链技术。&lt;/p&gt;
&lt;h2 id=&#34;authentication-standards&#34;&gt;Authentication standards&lt;/h2&gt;
&lt;p&gt;基于 HTML 和 JavaScript 的超文本 Web 应用（B/S 系统）对最终用户认证的需求使得“安全认证”的重点逐渐从“代码级安全”转为“用户级安全”，即你是否信任正在操作的用户。&lt;/p&gt;
&lt;p&gt;认证需要覆盖通信信道、协议和内容三个层面，而这三种层面认证恰好涵盖了主流的三种认证方式，具体含义和应用场景列举如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通信信道上的认证&lt;/strong&gt;：你和我建立通信连接之前，要先证明你是谁。在网络传输（Network）场景中的典型是基于 SSL/TLS 传输安全层的认证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信协议上的认证&lt;/strong&gt;：你请求获取我的资源之前，要先证明你是谁。在互联网（Internet）场景中的典型是基于 HTTP 协议的认证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信内容上的认证&lt;/strong&gt;：你使用我提供的服务之前，要先证明你是谁。在万维网（World Wide Web）场景中的典型是基于 Web 内容的认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http-authentication&#34;&gt;HTTP Authentication&lt;/h3&gt;
&lt;p&gt;认证方案（Authentication Schemes），它是指生成用户身份凭证的某种方法，这个概念最初源于 HTTP 协议的认证框架（Authentication Framework）。&lt;/p&gt;
&lt;p&gt;IETF 在&lt;a href=&#34;https://tools.ietf.org/html/rfc7235&#34;&gt;RFC 7235&lt;/a&gt;中定义了 HTTP 协议的通用认证框架，要求所有支持 HTTP 协议的服务器，在未授权的用户意图访问服务端保护区域的资源时，应返回 401 Unauthorized 的状态码，同时应在响应报文头里附带以下两个分别代表网页认证和代理认证的 Header 之一，告知客户端应该采取何种方式产生能代表访问者身份的凭证信息：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;WWW-Authenticate: &amp;lt;认证方案&amp;gt; realm=&amp;lt;保护区域的描述信息&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;Proxy-Authenticate: &amp;lt;认证方案&amp;gt; realm=&amp;lt;保护区域的描述信息&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接收到该响应后，客户端必须遵循服务端指定的认证方案，在请求资源的报文头中加入身份凭证信息，由服务端核实通过后才会允许该请求正常返回，否则将返回 403 Forbidden 错误。请求头报文应包含以下 Header 项之一：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;Authorization: &amp;lt;认证方案&amp;gt; &amp;lt;凭证内容&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;Proxy-Authorization: &amp;lt;认证方案&amp;gt; &amp;lt;凭证内容&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;HTTP 认证框架提出认证方案是希望能把认证“要产生身份凭证”的目的与“具体如何产生凭证”的实现分离开来，无论客户端通过生物信息（指纹、人脸）、用户密码、数字证书抑或其他方式来生成凭证，都属于是如何生成凭证的具体实现，都可以包容在 HTTP 协议预设的框架之内。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220729143837907.png&#34; alt=&#34;image-20220729143837907&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;HTTP Basic 认证是一种主要以演示为目的的认证方案，也应用于一些不要求安全性的场合，譬如家里的路由器登录等，最基础的认证方案。Basic 认证产生用户身份凭证的方法是让用户输入用户名和密码，经过 Base64 编码“加密”后作为身份凭证。譬如请求资源&lt;code&gt;GET /admin&lt;/code&gt;后，浏览器会收到来自服务端的如下响应：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;HTTP&lt;/span&gt;/&lt;span style=&#34;color:#b452cd&#34;&gt;1.1&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;401&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Unauthorized&lt;/span&gt;
Date: Mon, 24 Feb 2020 16:50:53 GMT
WWW-Authenticate: Basic realm=&amp;#34;example&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，浏览器必须询问最终用户，弹出 HTTP Basic 认证对话框，要求提供用户名和密码。&lt;/p&gt;
&lt;p&gt;用户在对话框中输入密码信息，譬如输入用户名&lt;code&gt;admin&lt;/code&gt;，密码&lt;code&gt;123456&lt;/code&gt;，浏览器会将字符串&lt;code&gt;admin:123456&lt;/code&gt;编码为&lt;code&gt;YWRtaW46MTIzNDU2&lt;/code&gt;，然后发送给服务端，HTTP 请求如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#008b45&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;/admin&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;HTTP&lt;/span&gt;/&lt;span style=&#34;color:#b452cd&#34;&gt;1.1&lt;/span&gt;
Authorization: Basic YWRtaW46MTIzNDU2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务端接收到请求，解码后检查用户名和密码是否合法，如果合法就返回&lt;code&gt;/admin&lt;/code&gt;的资源，否则就返回 403 Forbidden 错误，禁止下一步操作。注意 Base64 只是一种编码方式，并非任何形式的加密，所以 Basic 认证的风险是显而易见的。除 Basic 认证外，IETF 还定义了很多种可用于实际生产环境的认证方案，列举如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Digest&lt;/strong&gt;: &lt;a href=&#34;https://tools.ietf.org/html/rfc7616&#34;&gt;RFC 7616&lt;/a&gt;，HTTP 摘要认证，可视为 Basic 认证的改良版本，针对 Base64 明文发送的风险，Digest 认证把用户名和密码加盐（一个被称为 Nonce 的变化值作为盐值）后再通过 MD5/SHA 等哈希算法取摘要发送出去。但是这种认证方式依然是不安全的，无论客户端使用何种加密算法加密，无论是否采用了 Nonce 这样的动态盐值去抵御重放和冒认，遇到中间人攻击时依然存在显著的安全风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bearer&lt;/strong&gt;: &lt;a href=&#34;https://tools.ietf.org/html/rfc6750&#34;&gt;RFC 6750&lt;/a&gt;，基于 OAuth 2 规范来完成认证，OAuth2 是一个同时涉及认证与授权的协议。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HOBA&lt;/strong&gt;: &lt;a href=&#34;https://tools.ietf.org/html/rfc7486&#34;&gt;RFC 7486&lt;/a&gt; ，HOBA（HTTP Origin-Bound Authentication）是一种基于自签名证书的认证方案。基于数字证书的信任关系主要有两类模型：一类是采用 CA（Certification Authority）层次结构的模型，由 CA 中心签发证书；另一种是以 IETF 的 Token Binding 协议为基础的 OBC（Origin Bound Certificate）自签名证书模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP 认证框架中的认证方案是允许自行扩展的，并不要求一定由 RFC 规范来定义，只要用户代理（User Agent，通常是浏览器，泛指任何使用 HTTP 协议的程序）能够识别这种私有的认证方案即可。因此，很多厂商也扩展了自己的认证方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-auth-using-authorization-header.html&#34;&gt;AWS4-HMAC-SHA256&lt;/a&gt;&lt;/strong&gt;：亚马逊 AWS 基于 HMAC-SHA256 哈希算法的认证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NTLM&lt;/strong&gt; / &lt;strong&gt;Negotiate&lt;/strong&gt;：这是微软公司 NT LAN Manager（NTLM）用到的两种认证方式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows Live ID&lt;/strong&gt;：微软开发并提供的“统一登入”认证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://developer.twitter.com/en/docs/authentication/basic-auth&#34;&gt;Twitter Basic&lt;/a&gt;&lt;/strong&gt;：一个不存在的网站所改良的 HTTP 基础认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;web-authentication&#34;&gt;Web Authentication&lt;/h3&gt;
&lt;p&gt;IETF 为 HTTP 认证框架设计了可插拔（Pluggable）的认证方案，原本是希望能涌现出各式各样的认证方案去支持不同的应用场景。尽管上节列举了一些还算常用的认证方案。但目前的信息系统，尤其是在系统对终端用户的认证场景中，直接采用 HTTP 认证框架的比例其实十分低。&lt;/p&gt;
&lt;p&gt;HTTP 是“超文本传输协议”，传输协议的根本职责是把资源从服务端传输到客户端，至于资源具体是什么内容，只能由客户端自行解析驱动。以 HTTP 协议为基础的认证框架也只能面向传输协议而不是具体传输内容来设计，如果用户想要从服务器中下载文件，弹出一个 HTTP 服务器的对话框，让用户登录是可接受的；但如果用户访问信息系统中的具体服务，身份认证肯定希望是由系统本身的功能去完成的，而不是由 HTTP 服务器来负责认证。这种依靠内容而不是传输协议来实现的认证方式，在万维网里被称为“Web 认证”，由于实现形式上登录表单占了绝对的主流，因此通常也被称为“表单认证&amp;quot;（Form Authentication）。&lt;/p&gt;
&lt;p&gt;直至 2019 年以前，表单认证都没有什么行业标准可循，表单是什么样，其中的用户字段、密码字段、验证码字段是否要在客户端加密，采用何种方式加密，接受表单的服务地址是什么等，都完全由服务端与客户端的开发者自行协商决定。“没有标准的约束”反倒成了表单认证的一大优点，表单认证允许我们做出五花八门的页面，各种程序语言、框架或开发者本身都可以自行决定认证的全套交互细节。&lt;/p&gt;
&lt;p&gt;想要支持密码或扫码等多种登录方式、想要支持图形验证码来驱逐爬虫与机器人、想要支持在登录表单提交之前进行必要的表单校验，等等，这些需求十分具体，不具备写入标准规范的通用性，却具备足够的合理性，应当在实现层面去满足。同时，如何控制权限保证不产生越权操作、如何传输信息保证内容不被窃听篡改、如何加密敏感内容保证即使泄漏也不被逆推出明文，等等，这些问题已有通行的解决方案，明确定义在规范之中，也应当在架构层面去遵循。&lt;/p&gt;
&lt;p&gt;2019 年 3 月，万维网联盟（World Wide Web Consortium，W3C）批准了由&lt;a href=&#34;https://fidoalliance.org/&#34;&gt;FIDO&lt;/a&gt;（Fast IDentity Online，一个安全、开放、防钓鱼、无密码认证标准的联盟）领导起草的世界首份 Web 内容认证的标准“&lt;a href=&#34;https://webauthn.io/&#34;&gt;WebAuthn&lt;/a&gt;”。WebAuthn 彻底抛弃了传统的密码登录方式，改为直接采用生物识别（指纹、人脸、虹膜、声纹）或者实体密钥（以 USB、蓝牙、NFC 连接的物理密钥容器）来作为身份凭证，从根本上消灭了用户输入错误产生的校验需求和防止机器人模拟产生的验证码需求等问题，甚至可以省掉表单界面，所以这个规范不关注界面该是什么样子、要不要验证码、是否要前端校验这些问题。&lt;/p&gt;
&lt;p&gt;可以在&lt;a href=&#34;https://github.blog/2019-08-21-github-supports-webauthn-for-security-keys/&#34;&gt;GitHub 网站的 2FA 认证功能&lt;/a&gt;中实际体验一下如何通过 WebAuthn 完成两段式登录.&lt;/p&gt;
&lt;p&gt;硬件方面，要求用带有 Touch ID 的 MacBook，或者其他支持指纹、FaceID 验证的手机（目前在售的移动设备基本都带有生物识别装置）。软件方面，直至 iOS 13.6，iPhone 和 iPad 仍未支持 WebAuthn，但 Android 和 Mac OS 系统中的 Chrome，以及 Windows 的 Edge 浏览器都已经可以正常使用 WebAuthn 了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220729152756012.png&#34; alt=&#34;image-20220729152756012&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;WebAuthn 规范涵盖了“注册”与“认证”两大流程，先来介绍注册流程，它大致可以分为以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户进入系统的注册页面，这个页面的格式、内容和用户注册时需要填写的信息均不包含在 WebAuthn 标准的定义范围内。&lt;/li&gt;
&lt;li&gt;当用户填写完信息，点击“提交注册信息”的按钮后，服务端先暂存用户提交的数据，生成一个随机字符串（规范中称为 Challenge）和用户的 UserID（在规范中称作凭证 ID），返回给客户端。&lt;/li&gt;
&lt;li&gt;客户端的 WebAuthn API 接收到 Challenge 和 UserID，把这些信息发送给验证器（Authenticator），验证器可理解为用户设备上 TouchID、FaceID、实体密钥等认证设备的统一接口。&lt;/li&gt;
&lt;li&gt;验证器提示用户进行验证，如果支持多种认证设备，还会提示用户选择一个想要使用的设备。验证的结果是生成一个密钥对（公钥和私钥），由验证器存储私钥、用户信息以及当前的域名。然后使用私钥对 Challenge 进行签名，并将签名结果、UserID 和公钥一起返回客户端。&lt;/li&gt;
&lt;li&gt;浏览器将验证器返回的结果转发给服务器。&lt;/li&gt;
&lt;li&gt;服务器核验信息，检查 UserID 与之前发送的是否一致，并用公钥解密后得到的结果与之前发送的 Challenge 相比较，一致即表明注册通过，由服务端存储该 UserID 对应的公钥。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220729154041416.png&#34; alt=&#34;image-20220729154041416&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;登录流程与注册流程类似，如果你理解了注册流程，就很容易理解登录流程了。登录流程大致可以分为以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户访问登录页面，填入用户名后即可点击登录按钮。&lt;/li&gt;
&lt;li&gt;服务器返回随机字符串 Challenge、用户 UserID。&lt;/li&gt;
&lt;li&gt;浏览器将 Challenge 和 UserID 转发给验证器。&lt;/li&gt;
&lt;li&gt;验证器提示用户进行认证操作。由于在注册阶段验证器已经存储了该域名的私钥和用户信息，所以如果域名和用户都相同的话，就不需要生成密钥对了，直接以存储的私钥加密 Challenge，然后返回给浏览器。&lt;/li&gt;
&lt;li&gt;服务端接收到浏览器转发来的被私钥加密的 Challenge，以此前注册时存储的公钥进行解密，如果解密成功则宣告登录成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;WebAuthn 采用非对称加密的公钥、私钥替代传统的密码，这是非常理想的认证方案，私钥是保密的，只有验证器需要知道它，连用户本人都不需要知道，也就没有人为泄漏的可能；公钥是公开的，可以被任何人看到或存储。公钥可用于验证私钥生成的签名，但不能用来签名，除了得知私钥外，没有其他途径能够生成可被公钥验证为有效的签名，这样服务器就可以通过公钥是否能够解密来判断最终用户的身份是否合法。&lt;/p&gt;
&lt;p&gt;WebAuthn 还解决了传统密码在网络传输上的风险，对防御中间人攻击来说都是没有意义的。 WebAuthn 为登录过程带来极大的便捷性，不仅注册和验证的用户体验十分优秀，而且彻底避免了用户在一个网站上泄漏密码，所有使用相同密码的网站都受到攻击的问题，这个优点使得用户无须再为每个网站想不同的密码。&lt;/p&gt;
&lt;h2 id=&#34;implementation-of-the-authentication&#34;&gt;Implementation of the Authentication&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://shiro.apache.org/&#34;&gt;Apache Shiro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/projects/spring-security&#34;&gt;Spring Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/15419147/net-security-frameworks-for-net&#34;&gt;Security Frameworks for .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t know those frameworks but from a quick glance at Apache Shiro and Spring Security I get that you are looking for something that will do &lt;em&gt;cryptography&lt;/em&gt;, &lt;em&gt;session management&lt;/em&gt;, &lt;em&gt;authentication&lt;/em&gt; and &lt;em&gt;authorization&lt;/em&gt;. Unfortunately I don&amp;rsquo;t know any frameworks that will do that for you except what&amp;rsquo;s built into .NET by default.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cryptography&lt;/strong&gt; is provided by the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.security.cryptography.aspx&#34;&gt;&lt;code&gt;System.Security.Cryptography&lt;/code&gt; namespace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt; and &lt;strong&gt;Authorization&lt;/strong&gt; are provided by default by ASP.Net, as Windows, Forms or password authentication. See for example the &lt;a href=&#34;http://www.codeproject.com/Articles/98950/ASP-NET-authentication-and-authorization&#34;&gt;ASP.NET authentication and authorization&lt;/a&gt; article on CodeProject.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Session management&lt;/strong&gt; is also built into ASP.Net. For example, see &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/75x4ha6s.aspx&#34;&gt;ASP.NET State Management Overview&lt;/a&gt; on MSDN.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安全框架提供的功能都很类似，大致包括以下四类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认证功能（Authentication）：以 HTTP 协议中定义的各种认证、表单等认证方式确认用户身份，这是本节的主要话题。&lt;/li&gt;
&lt;li&gt;安全上下文（Session management）：用户获得认证之后，要开放一些接口，让应用可以得知该用户的基本资料、用户拥有的权限、角色，等等。&lt;/li&gt;
&lt;li&gt;授权功能（Authorization）：判断并控制认证后的用户对什么资源拥有哪些操作许可。&lt;/li&gt;
&lt;li&gt;密码的存储与验证（Cryptography）：密码是烫手的山芋，存储、传输还是验证都应谨慎处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;authorization&#34;&gt;Authorization&lt;/h1&gt;
&lt;p&gt;系统如何控制一个用户该看到哪些数据、能操作哪些功能？&lt;/p&gt;
&lt;p&gt;授权这个概念通常伴随着认证、审计、账号一同出现，并称为 AAAA（Authentication、Authorization、Audit、Account，也有一些领域把 Account 解释为计费的意思）。授权行为在程序中的应用非常广泛，给某个类或某个方法设置范围控制符（public、protected、private、namespace）在本质上也是一种授权（访问控制）行为。而在安全领域中所说的授权就更具体一些，通常涉及以下两个相对独立的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;确保授权的过程可靠&lt;/strong&gt;：对于单一系统来说，授权的过程是比较容易做到可控的，以前很多语境上提到授权，实质上讲的都是访问控制，理论上两者是应该分开的。而在涉及多方的系统中，授权过程则是一个比较困难却必须严肃对待的问题：如何既让第三方系统能够访问到所需的资源，又能保证其不泄露用户的敏感数据呢？常用的多方授权协议主要有 OAuth2 和 SAML 2.0（两个协议涵盖的功能并不是直接对等的）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确保授权的结果可控&lt;/strong&gt;：授权的结果用于对程序功能或者资源的&lt;a href=&#34;https://en.wikipedia.org/wiki/Access-control_list&#34;&gt;访问控制&lt;/a&gt;（Access Control），成理论体系的权限控制模型有很多，譬如：
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Discretionary_access_control&#34;&gt;自主访问控制&lt;/a&gt;（Discretionary Access Control，DAC）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Mandatory_access_control&#34;&gt;强制访问控制&lt;/a&gt;（Mandatory Access Control，MAC）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Attribute-based_access_control&#34;&gt;基于属性的访问控制&lt;/a&gt;（Attribute-Based Access Control，ABAC）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Role-based_access_control&#34;&gt;基于角色的访问控制&lt;/a&gt;（Role-Based Access Control，RBAC）：最为常用的一种。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rbac&#34;&gt;RBAC&lt;/h2&gt;
&lt;p&gt;所有的访问控制模型，实质上都是在解决同一个问题：“&lt;strong&gt;谁&lt;/strong&gt;（User）拥有什么&lt;strong&gt;权限&lt;/strong&gt;（Authority）去&lt;strong&gt;操作&lt;/strong&gt;（Operation）哪些&lt;strong&gt;资源&lt;/strong&gt;（Resource）”。&lt;/p&gt;
&lt;p&gt;这个问题初看起来并不难，一种直观的解决方案就是在用户对象上设定一些权限，当用户使用资源时，检查是否有对应的操作权限即可。很多著名的安全框架，譬如 Spring Security 的访问控制本质上就是支持这么做的。不过，这种把权限直接关联在用户身上的简单设计，在复杂系统上确实会导致一些比较烦琐的问题。试想一下，如果某个系统涉及到成百上千的资源，又有成千上万的用户，一旦两者搅合到一起，要为每个用户访问每个资源都分配合适的权限，必定导致巨大的操作量和极高的出错概率，这也正是 RBAC 所关注的问题之一。&lt;/p&gt;
&lt;p&gt;RBAC 模型有多种定义，其中以美国 George Mason 大学信息安全技术实验室提出的 RBAC96 模型最具有系统性，得到普遍的认可。为了避免对每一个用户设定权限，RBAC（&lt;a href=&#34;https://en.wikipedia.org/wiki/Role-based_access_control&#34;&gt;Role-based access control&lt;/a&gt;） 将权限从用户身上剥离，改为绑定到“&lt;strong&gt;角色&lt;/strong&gt;”（Role）上，将权限控制变为对“&lt;strong&gt;角色&lt;/strong&gt;拥有操作哪些&lt;strong&gt;资源&lt;/strong&gt;的&lt;strong&gt;许可&lt;/strong&gt;”这个逻辑表达式的值是否为真的求解过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220729181435054.png&#34; alt=&#34;image-20220729181435054&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;“&lt;strong&gt;许可&lt;/strong&gt;”（Permission）是抽象权限的具象化体现，权限在 RBAC 系统中的含义是“允许何种&lt;strong&gt;操作&lt;/strong&gt;作用于哪些&lt;strong&gt;资源&lt;/strong&gt;之上”，这句话的具体实例即为“许可”。提出许可这个概念的目的其实与提出角色的目的是完全一致的，只是更为抽象。角色为的是解耦用户与权限之间的多对多关系，而许可为的是解耦操作与资源之间的多对多关系，譬如不同的数据都能够有增、删、改等操作，如果将数据与操作搅和在一起也会面临配置膨胀问题。这里举个更具体的例子帮助你理清众多名词之间的关系，譬如某个论文管理系统的 UserStory 中，与访问控制相关的 Backlog 可能会是这样描述的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Backlog&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;周同学&lt;/strong&gt;（User）是某 SCI 杂志的&lt;strong&gt;审稿人&lt;/strong&gt;（Role），职责之一是在系统中&lt;strong&gt;审核论文&lt;/strong&gt;（Authority）。在&lt;strong&gt;审稿过程&lt;/strong&gt;（Session）中，当他认为某篇&lt;strong&gt;论文&lt;/strong&gt;（Resource）达到了可以公开发表标准时，就会在后台&lt;strong&gt;点击通过按钮&lt;/strong&gt;（Operation）来完成审核。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上 Backlog 中“给论文点击通过按钮”就是一种许可，它是“审核论文”这项权限的具象化体现。&lt;/p&gt;
&lt;p&gt;采用 RBAC 不仅是为了简化配置操作，还天然地满足了计算机安全中的“&lt;a href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_privilege&#34;&gt;最小特权原则&lt;/a&gt;”（Least Privilege）。在 RBAC 模型中，角色拥有许可的数量是根据完成该角色工作职责所需的最小权限来赋予的，最典型例子是操作系统权限管理中的用户组，根据对不同角色的职责分工，如管理员（Administrator）、系统用户（System）、验证用户（Authenticated Users）、普通用户（Users）、来宾用户（Guests）等分配各自的权限，既保证用户能够正常工作，也避免用户出现越权操作的风险。当用户的职责发生变化时，在系统中就体现为它所隶属的角色被改变，譬如将“普通用户角色”改变“管理员角色”，就可以迅速让该用户具备管理员的多个细分权限，降低权限分配错误的风险。&lt;/p&gt;
&lt;p&gt;RBAC 还允许对不同角色之间定义关联与约束，进一步强化它的抽象描述能力。如不同的角色之间可以有继承性，典型的是 RBAC-1 模型的角色权限继承关系。譬如描述开发经理应该和开发人员一样具有代码提交的权限，描述开发人员都应该和任何公司员工一样具有食堂就餐的权限，就可以直接将食堂就餐赋予公司员工的角色上，把代码提交赋予到开发人员的角色上，再让开发人员的角色从公司员工派生，开发经理的角色从开发人员中派生即可。&lt;/p&gt;
&lt;p&gt;不同角色之间也可以具有互斥性，典型的是 RBAC-2 模型的角色职责分离关系。互斥性要求权限被赋予角色时，或角色被赋予用户时应遵循的强制性职责分离规定。举个例子，角色的互斥约束可限制同一用户只能分配到一组互斥角色集合中至多一个角色，譬如不能让同一名员工既当会计，也当出纳，否则资金安全无法保证。角色的基数约束可限制某一个用户拥有的最大角色数目，譬如不能让同一名员工从产品、设计、开发、测试全部包揽，否则产品质量无法保证。&lt;/p&gt;
&lt;p&gt;建立访问控制模型的基本目的是为了管理垂直权限和水平权限。垂直权限即功能权限，譬如前面提到的审稿编辑有通过审核的权限、开发经理有代码提交的权限、出纳有从账户提取资金的权限，这一类某个角色完成某项操作的许可，都可以直接翻译为功能权限。由于实际应用与权限模型具有高度对应关系，将权限从具体的应用中抽离出来，放到通用的模型中是相对容易的。&lt;/p&gt;
&lt;p&gt;与此相对，水平权限即数据权限管理起来则要困难许多。譬如用户 A、B 都属于同一个角色，但它们各自在系统中产生的数据完全有可能是私有的，A 访问或删除了 B 的数据也照样属于越权。一般来说，数据权限是很难抽象与通用的，仅在角色层面控制并不能满足全部业务的需要，很多时候只能具体到用户，甚至要具体管理到发生数据的某一行、某一列之上，因此数据权限基本只能由信息系统自主来来完成，并不存在能通用数据权限框架。&lt;/p&gt;
&lt;p&gt;Kubernetes 完全遵循了 RBAC 来进行服务访问控制。 Spring Security 也参考了（但并没有完全遵循）RBAC 来设计它的访问控制功能。Spring Security 的设计里，用户和角色都可以拥有权限，譬如在它的 HttpSecurity 接口就同时有着 hasRole()和 hasAuthority()方法，可能刚接触的程序员会疑惑，混淆它们之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220729181500729.png&#34; alt=&#34;image-20220729181500729&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;从实现角度来看，Role 和 Authority 的差异可以很大，用户可以自行决定系统中到底 Permission 只能对应到角色身上，还是可以让用户也拥有某些角色中没有的权限。这一点不符合 RBAC 的思想，但在 Spring Security 的文档上说的很清楚：这取决于你自己如何使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The core difference between these two（注：指 Role 和 Authority） is the semantics we attach to how we use the feature. For the framework, the difference is minimal – and it basically deals with these in exactly the same way.&lt;/p&gt;
&lt;p&gt;Role 和 Authority 的核心差异取决于用户打算如何使用这些特性，在框架层面它们的差别是极小的，基本采用了完全相同的方式来进行处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过 RBAC 很容易控制最终用户在广义和精细级别上能够做什么，可以指定用户是管理员、专家用户抑或普通用户，并使角色和访问权限与组织中员工的身份职位保持一致，仅根据需要为员工完成工作的最低限度来分配权限。这些都是大量软件系统、长时间积累下来的经验，将这些经验运用在软件产品上，绝大多数情况下要比自己发明创造一个新的轮子更加安全。&lt;/p&gt;
&lt;h2 id=&#34;oauth2&#34;&gt;OAuth2&lt;/h2&gt;
&lt;p&gt;相对更复杂烦琐的 &lt;a href=&#34;https://oauth.net/2/&#34;&gt;OAuth2&lt;/a&gt; 认证授权协议（更烦琐的 OAuth1 已经完全被废弃了）是在&lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;RFC 6749&lt;/a&gt;中定义的国际标准，在 RFC 6749 正文的第一句就阐明了 OAuth2 是&lt;strong&gt;面向于解决第三方应用&lt;/strong&gt;（Third-Party Application）的认证授权协议。如果你的系统并不涉及第三方，也不使用第三方的服务，那引入 OAuth2 其实并无必要。&lt;/p&gt;
&lt;p&gt;如果使用GitHub Pages搭建网站，它的建设和更新大致流程是：作者以 Markdown 形式写好了某篇文章，上传到由 GitHub 提供的代码仓库，接着由&lt;a href=&#34;https://travis-ci.com/&#34;&gt;Travis-CI&lt;/a&gt;提供的持续集成服务会检测到该仓库发生了变化，触发一次编译活动，生成目录和静态的 HTML 页面，然后推送回&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;，再触发国内的 CDN 缓存刷新。这个过程要能顺利进行，就存在一系列必须解决的授权问题，Travis-CI 只有得到了我的明确授权，GitHub 才能同意它读取我代码仓库中的内容，问题是它该如何获得我的授权呢？一种最简单粗暴的方案是把我的用户账号和密码都告诉 Travis-CI，但这显然导致了以下这些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;密码泄漏&lt;/strong&gt;：如果 Travis-CI 被黑客攻破，将导致我的 GitHub 的密码也同时被泄漏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;访问范围&lt;/strong&gt;：Travis-CI 将有能力读取、修改、删除、更新我放在 GitHub 上的所有代码仓库，而我并不希望它能够修改删除文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;授权回收&lt;/strong&gt;：只有修改密码才能回收我授予给 Travis-CI 的权力，可是我在 GitHub 的密码只有一个，授权的应用除了 Travis-CI 之外却还有许多，修改了意味着所有别的第三方的应用程序会全部失效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上列举的这些问题，也正是 OAuth2 所要解决的问题，尤其是要求第三方系统没有支持 HTTPS 传输安全的环境下依然能够解决这些问题，这并非易事。&lt;/p&gt;
&lt;p&gt;OAuth2 给出了多种解决办法，这些办法的共同特征是以令牌（Token）代替用户密码作为授权的凭证。有了令牌之后，哪怕令牌被泄漏，也不会导致密码的泄漏；令牌上可以设定访问资源的范围以及时效性；每个应用都持有独立的令牌，哪个失效都不会波及其他。这样上面提出的三个问题就都解决了。有了一层令牌之后，整个授权的流程如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220808161958036.png&#34; alt=&#34;image-20220808161958036&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;这个时序图里面涉及到了 OAuth2 中几个关键术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第三方应用&lt;/strong&gt;（Third-Party Application）：需要得到授权访问我资源的那个应用，即此场景中的“Travis-CI”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;授权服务器&lt;/strong&gt;（Authorization Server）：能够根据我的意愿提供授权（授权之前肯定已经进行了必要的认证过程，但它与授权可以没有直接关系）的服务器，即此场景中的“GitHub”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源服务器&lt;/strong&gt;（Resource Server）：能够提供第三方应用所需资源的服务器，它与认证服务可以是相同的服务器，也可以是不同的服务器，此场景中的“我的代码仓库”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源所有者&lt;/strong&gt;（Resource Owner）： 拥有授权权限的人，即此场景中的“我”。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;操作代理&lt;/strong&gt;（User Agent）：指用户用来访问服务器的工具，对于人类用户来说，这个通常是指浏览器，但在微服务中一个服务经常会作为另一个服务的用户，此时指的可能就是 HttpClient、RPCClient 或者其他访问途径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“用令牌代替密码”确实是解决问题的好方法，但这充其量只能算个思路，距离可实施的步骤还是不够具体的，时序图中的“要求/同意授权”、“要求/同意发放令牌”、“要求/同意开放资源”几个服务请求、响应该如何设计，这就是执行步骤的关键了。对此，OAuth2 一共提出了四种不同的授权方式（这也是 OAuth2 复杂烦琐的主要原因），分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;授权码模式（Authorization Code）&lt;/li&gt;
&lt;li&gt;隐式授权模式（Implicit）&lt;/li&gt;
&lt;li&gt;密码模式（Resource Owner Password Credentials）&lt;/li&gt;
&lt;li&gt;客户端模式（Client Credentials）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;授权码模式&#34;&gt;授权码模式&lt;/h3&gt;
&lt;p&gt;授权码模式是四种模式中最严谨繁琐的，它考虑到了几乎所有敏感信息泄漏的预防和后果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220808162226442.png&#34; alt=&#34;image-20220808162226442&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;开始进行授权过程以前，第三方应用先要到授权服务器上进行注册，所谓注册，是指向认证服务器提供一个域名地址，然后从授权服务器中获取 ClientID 和 ClientSecret，以便能够顺利完成如下授权过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第三方应用将资源所有者（用户）导向授权服务器的授权页面，并向授权服务器提供 ClientID 及用户同意授权后的回调 URI，这是一次客户端页面转向。&lt;/li&gt;
&lt;li&gt;授权服务器根据 ClientID 确认第三方应用的身份，用户在授权服务器中决定是否同意向该身份的应用进行授权，用户认证的过程未定义在此步骤中，在此之前应该已经完成。&lt;/li&gt;
&lt;li&gt;如果用户同意授权，授权服务器将转向第三方应用在第 1 步调用中提供的回调 URI，并附带上一个授权码和获取令牌的地址作为参数，这是第二次客户端页面转向。&lt;/li&gt;
&lt;li&gt;第三方应用通过回调地址收到授权码，然后将授权码与自己的 ClientSecret 一起作为参数，通过服务器向授权服务器提供的获取令牌的服务地址发起请求，换取令牌。该服务器的地址应与注册时提供的域名处于同一个域中。&lt;/li&gt;
&lt;li&gt;授权服务器核对授权码和 ClientSecret，确认无误后，向第三方应用授予令牌。令牌可以是一个或者两个，其中必定要有的是访问令牌（Access Token），可选的是刷新令牌（Refresh Token）。访问令牌用于到资源服务器获取资源，有效期较短，刷新令牌用于在访问令牌失效后重新获取，有效期较长。&lt;/li&gt;
&lt;li&gt;资源服务器根据访问令牌所允许的权限，向第三方应用提供资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个过程设计，已经考虑到了几乎所有合理的意外情况，如下几个最容易遇到的意外状况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会不会有其他应用冒充第三方应用骗取授权？
ClientID 代表一个第三方应用的“用户名”，这项信息是可以完全公开的。但 ClientSecret 应当只有应用自己才知道，这个代表了第三方应用的“密码”。在第 5 步发放令牌时，调用者必须能够提供 ClientSecret 才能成功完成。只要第三方应用妥善保管好 ClientSecret，就没有人能够冒充它。&lt;/li&gt;
&lt;li&gt;为什么要先发放授权码，再用授权码换令牌？
这是因为客户端转向（通常就是一次 HTTP 302 重定向）对于用户是可见的，换而言之，授权码可能会暴露给用户以及用户机器上的其他程序，但由于用户并没有 ClientSecret，光有授权码也是无法换取到令牌的，所以避免了令牌在传输转向过程中被泄漏的风险。&lt;/li&gt;
&lt;li&gt;为什么要设计一个时限较长的刷新令牌和时限较短的访问令牌？不能直接把访问令牌的时间调长吗？
这是为了缓解 OAuth2 在实际应用中的一个主要缺陷，通常访问令牌一旦发放，除非超过了令牌中的有效期，否则很难（需要付出较大代价）有其他方式让它失效，所以访问令牌的时效性一般设计的比较短，譬如几个小时，如果还需要继续用，那就定期用刷新令牌去更新，授权服务器就可以在更新过程中决定是否还要继续给予授权。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管授权码模式是严谨的，但是它并不够好用，这不仅仅体现在它那繁复的调用过程上，还体现在它对第三方应用提出了一个“貌似不难”的要求：第三方应用必须有应用服务器，因为第 4 步要发起服务端转向，而且要求服务端的地址必须与注册时提供的地址在同一个域内。不要觉得要求一个系统要有应用服务器是天经地义理所当然的事情，你现在阅读文章的这个网站就没有任何应用服务器的支持，里面使用到了 Gitalk 作为每篇文章的留言板，它对 GitHub 来说照样是第三方应用，需要 OAuth2 授权来解决。除基于浏览器的应用外，现在越来越普遍的是移动或桌面端的客户端 Web 应用（Client-Side Web Applications），譬如现在大量的基于 Cordova、Electron、Node-Webkit.js 的&lt;a href=&#34;https://en.wikipedia.org/wiki/Progressive_web_application&#34;&gt;PWA 应用&lt;/a&gt;，它们都没有应用服务器的支持。由于有这样的实际需求，因此引出了 OAuth2 的第二种授权模式：隐式授权。&lt;/p&gt;
&lt;h3 id=&#34;隐式授权模式&#34;&gt;隐式授权模式&lt;/h3&gt;
&lt;p&gt;隐式授权省略掉了通过授权码换取令牌的步骤，整个授权过程都不需要服务端支持，一步到位。代价是在隐式授权中，授权服务器不会再去验证第三方应用的身份，因为已经没有应用服务器了，ClientSecret 没有人保管，就没有存在的意义了。但其实还是会限制第三方应用的回调 URI 地址必须与注册时提供的域名一致，尽管有可能被 DNS 污染之类的攻击所攻破，但仍算是尽可能努力一下。同样的原因，也不能避免令牌暴露给资源所有者，不能避免用户机器上可能意图不轨的其他程序、HTTP 的中间人攻击等风险了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220808162450990.png&#34; alt=&#34;image-20220808162450990&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;在时序图所示的交互过程里，隐式模式与授权码模式的显著区别是授权服务器在得到用户授权后，直接返回了访问令牌，这显著地降低了安全性，但 OAuth2 仍然努力尽可能地做到相对安全，譬如在前面提到的隐式授权中，尽管不需要用到服务端，但仍然需要在注册时提供回调域名，此时会要求该域名与接受令牌的服务处于同一个域内。此外，同样基于安全考虑，在隐式模式中明确禁止发放刷新令牌。&lt;/p&gt;
&lt;p&gt;在 RFC 6749 对隐式授权的描述中，特别强调了令牌必须是“通过 Fragment 带回”的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/URI_fragment&#34;&gt;URI Fragment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In computer hypertext, a fragment identifier is a string of characters that refers to a resource that is subordinate to another, primary resource. The primary resource is identified by a Uniform Resource Identifier (URI), and the fragment identifier points to the subordinate resource.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fragment 就是地址中&lt;code&gt;#&lt;/code&gt;号后面的部分，譬如这个地址：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.google.com/webhp/#/detail/1&#34;&gt;https://www.google.com/webhp/#/detail/1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后面的&lt;code&gt;/detail/1&lt;/code&gt;便是 Fragment，这个语法是在&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34;&gt;RFC 3986&lt;/a&gt;中定义的，RFC 3986 中解释了 Fragment 是用于客户端定位的 URI 从属资源，譬如 HTML 中就可以使用 Fragment 来做文档内的跳转而不会发起服务端请求，你现在可以点击一下这篇文章左边菜单中的几个子标题，看看浏览器地址栏的变化。此外，RFC 3986 还规定了如果浏览器对一个带有 Fragment 的地址发出 Ajax 请求，那 Fragment 是不会跟随请求被发送到服务端的，只能在客户端通过 Script 脚本来读取。所以隐式授权巧妙地利用这个特性，尽最大努力地避免了令牌从操作代理到第三方服务之间的链路存在被攻击而泄漏出去的可能性。至于认证服务器到操作代理之间的这一段链路的安全，则只能通过 TLS（即 HTTPS）来保证中间不会受到攻击了，我们可以要求认证服务器必须都是启用 HTTPS 的，但无法要求第三方应用同样都支持 HTTPS。&lt;/p&gt;
&lt;h3 id=&#34;密码模式&#34;&gt;密码模式&lt;/h3&gt;
&lt;p&gt;前面所说的授权码模式和隐私模式属于纯粹的授权模式，它们与认证没有直接的联系，如何认证用户的真实身份是与进行授权互相独立的过程。但在密码模式里，认证和授权就被整合成了同一个过程了。&lt;/p&gt;
&lt;p&gt;密码模式原本的设计意图是仅限于用户对第三方应用是高度可信任的场景中使用，因为用户需要把密码明文提供给第三方应用，第三方以此向授权服务器获取令牌。这种高度可信的第三方是极为较罕见的，尽管介绍 OAuth2 的材料中，经常举的例子是“操作系统作为第三方应用向授权服务器申请资源”，但真实应用中极少遇到这样的情况，合理性依然十分有限。&lt;/p&gt;
&lt;p&gt;如果要采用密码模式，那“第三方”属性就必须弱化，把“第三方”视作是系统中与授权服务器相对独立的子模块，在物理上独立于授权服务器部署，但是在逻辑上与授权服务器仍同属一个系统，这样将认证和授权一并完成的密码模式才会有合理的应用场景。&lt;/p&gt;
&lt;p&gt;理解了密码模式的用途，它的调用过程就很简单了，就是第三方应用拿着用户名和密码向授权服务器换令牌而已。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220808162839418.png&#34; alt=&#34;image-20220808162839418&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;密码模式下“保障安全”的职责无法由 OAuth2 来承担，只能由用户和第三方应用来自行保障，尽管 OAuth2 在规范中强调到“此模式下，第三方应用不得保存用户的密码”，但这并没有任何技术上的约束力。&lt;/p&gt;
&lt;h3 id=&#34;客户端模式&#34;&gt;客户端模式&lt;/h3&gt;
&lt;p&gt;客户端模式是四种模式中最简单的，它只涉及到两个主体，第三方应用和授权服务器。如果严谨一点，现在称“第三方应用”其实已经不合适了，因为已经没有了“第二方”的存在，资源所有者、操作代理在客户端模式中都是不必出现的。甚至严格来说叫“授权”都已不太恰当，资源所有者都没有了，也就不会有谁授予谁权限的过程。&lt;/p&gt;
&lt;p&gt;客户端模式是指第三方应用以自己的名义，向授权服务器申请资源许可。此模式通常用于管理操作或者自动处理类型的场景中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220808163117539.png&#34; alt=&#34;image-20220808163117539&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;微服务架构并不提倡同一个系统的各服务间有默认的信任关系，所以服务之间调用也需要先进行认证授权，然后才能通信。此时，客户端模式便是一种常用的服务间认证授权的解决方案。&lt;/p&gt;
&lt;p&gt;OAuth2 中还有一种与客户端模式类似的授权模式，在&lt;a href=&#34;https://tools.ietf.org/html/rfc8628#section-3.4&#34;&gt;RFC 8628&lt;/a&gt;中定义为“设备码模式”（Device Code），这里顺带提一下。设备码模式用于在无输入的情况下区分设备是否被许可使用，典型的应用便是手机锁网解锁（锁网在国内较少，但在国外很常见）或者设备激活（譬如某游戏机注册到某个游戏平台）的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/image-20220808163344693.png&#34; alt=&#34;image-20220808163344693&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;进行验证时，设备需要从授权服务器获取一个 URI 地址和一个用户码，然后需要用户手动或设备自动地到验证 URI 中输入用户码。在这个过程中，设备会一直循环，尝试去获取令牌，直到拿到令牌或者用户码过期为止。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;credential&#34;&gt;Credential&lt;/h1&gt;
&lt;p&gt;系统如何保证它与用户之间的承诺是双方当时真实意图的体现，是准确、完整且不可抵赖的？&lt;/p&gt;
&lt;p&gt;在前面介绍 OAuth2 的内容中，每一种授权模式的最终目标都是拿到访问令牌，但从未涉及过拿回来的令牌应该长什么样子。凭证要讨论的主角就是令牌了，同时，还会讨论如果不使用 OAuth2，如何以最传统的方式完成认证、授权。&lt;/p&gt;
&lt;p&gt;以 HTTP 协议的 Cookie-Session 机制为代表的服务端状态存储在三十年来都是主流的解决方案。不过，到了最近十年，由于分布式系统中共享数据必然会受到 CAP 不兼容原理的打击限制，迫使人们重新去审视之前已基本放弃掉的客户端状态存储，这就让原本通常只在多方系统中采用的 JWT 令牌方案。&lt;/p&gt;
&lt;h2 id=&#34;cookie-session&#34;&gt;Cookie-Session&lt;/h2&gt;
&lt;h2 id=&#34;jwt&#34;&gt;JWT&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;confidentiality&#34;&gt;Confidentiality&lt;/h1&gt;
&lt;p&gt;系统如何保证敏感数据无法被包括系统管理员在内的内外部人员所窃取、滥用？&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;transport-security&#34;&gt;Transport Security&lt;/h1&gt;
&lt;p&gt;系统如何保证通过网络传输的信息无法被第三方窃听、篡改和冒充？&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;verification&#34;&gt;Verification&lt;/h1&gt;
&lt;p&gt;系统如何确保提交到每项服务中的数据是合乎规则的，不会对系统稳定性、数据一致性、正确性产生风险？&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://icyfenix.cn/architect-perspective/general-architecture/system-security/&#34;&gt;http://icyfenix.cn/architect-perspective/general-architecture/system-security/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-server/identity/identity-and-access&#34;&gt;Identity and Access documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/get-started/virtual-dc/active-directory-domain-services-overview&#34;&gt;Active Directory Domain Services Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/security/&#34;&gt;Security in .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/computing-science/schema-security/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Dot Net 6&#43;</title>
        <link>https://www.openheart.icu/microsoft-dotnet/dot-net-6&#43;/</link>
        <pubDate>Wed, 25 May 2022 00:14:11 +0000</pubDate>
        
        <guid>https://www.openheart.icu/microsoft-dotnet/dot-net-6&#43;/</guid>
        <description>42th openheart https://www.openheart.icu/microsoft-dotnet/dot-net-6&#43;/ -&lt;h1 id=&#34;net60httpsdocsmicrosoftcomen-usaspnetcorerelease-notesaspnetcore-60viewaspnetcore-60&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-6.0?view=aspnetcore-6.0&#34;&gt;.Net6.0&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&#34;minimal-apis&#34;&gt;Minimal APIs&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Minimal APIs are architected to create HTTP APIs with minimal dependencies. They are ideal for microservices and apps that want to include only the minimum files, features, and dependencies in ASP.NET Core. For more information, see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/tutorials/min-web-api?view=aspnetcore-6.0&#34;&gt;Tutorial: Create a minimal web API with ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/tutorials/min-web-api?view=aspnetcore-6.0#differences-between-minimal-apis-and-apis-with-controllers&#34;&gt;Differences between minimal APIs and APIs with controllers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0&#34;&gt;Minimal APIs overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/migration/50-to-60-samples?view=aspnetcore-6.0&#34;&gt;Code samples migrated to the new minimal hosting model in 6.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;很显然这个新的APIs对标的是之前的Controllers（Web Api），并且更适合微服务架构。&lt;/p&gt;
&lt;h3 id=&#34;issues&#34;&gt;Issues&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/70006903/minimal-api-and-xml-formatters&#34;&gt;Minimal API and XML formatters&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;kestrel&#34;&gt;Kestrel&lt;/h2&gt;
&lt;h2 id=&#34;cachinghttpsdocsmicrosoftcomen-usaspnetcoreperformancecachingoverviewviewaspnetcore-60&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/performance/caching/overview?view=aspnetcore-6.0&#34;&gt;Caching&lt;/a&gt;&lt;/h2&gt;
- https://www.openheart.icu/microsoft-dotnet/dot-net-6&#43;/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
  </channel>
</rss> 