<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>42th openheart</title>
    <link>https://www.openheart.icu/</link>
    <description>Recent content on 42th openheart</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ALL RIGHTS RESERVED KRIS NIE</copyright>
    <lastBuildDate>Thu, 12 Aug 2021 15:15:57 +0000</lastBuildDate>
    
        <atom:link href="https://www.openheart.icu/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Adaptive Code</title>
        <link>https://www.openheart.icu/cs/adaptive-code/</link>
        <pubDate>Sat, 21 Nov 2020 22:30:12 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/adaptive-code/</guid>
        <description>42th openheart https://www.openheart.icu/cs/adaptive-code/ -&lt;h1 id=&#34;adaptive-code-agile-coding-with-design-patterns-and-solid-principleshttpsgithubcomadaptivecode&#34;&gt;&lt;a href=&#34;https://github.com/AdaptiveCode&#34;&gt;Adaptive Code: Agile coding with design patterns and SOLID principles&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;从标题中就不难发现，Adaptive Code的重点有三个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;敏捷编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设计模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOLID(单一功能、开闭原则、里氏替换、接口隔离以及依赖反转)原则&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scrum&#34;&gt;Scrum&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.scrum.org/resources/what-is-scrum&#34;&gt;scrum.org&lt;/a&gt;  2020-Scrum-Guide-US&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scrum is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lightweight&lt;/li&gt;
&lt;li&gt;Simple to understand&lt;/li&gt;
&lt;li&gt;Difficult to master&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;what&#34;&gt;What&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;All work is prioritized on the product backlog and, at the start of each sprint, the development team commits to the work that they will complete during the new iteration by placing it on the sprint backlog. The unit of work within Scrum is the &lt;strong&gt;story&lt;/strong&gt;. The product backlog is a prioritized queue of pending stories, and each sprint is defined by the stories that will be developed during an iteration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前公司也是采用的这种开发框架，将一个项目分为多个迭代（sprint），但是此处引出了一个之前没听过的story。Story在后续Hierarchy of composition中也提到并详细介绍，此处的story可以就相当于是产品积压项，Story下可以有确定的Task（一个Story需要多个人完成，每个人都有自己的任务）。&lt;/p&gt;
&lt;h4 id=&#34;agile-software-development-敏捷软件开发与scrum&#34;&gt;Agile software development (敏捷软件开发)与Scrum&lt;/h4&gt;
&lt;p&gt;Scrum is one of the most common implementations of an Agile process.&lt;/p&gt;
&lt;h4 id=&#34;roles-and-responsibilities&#34;&gt;Roles and responsibilities&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Product owner&lt;/strong&gt;(PO, provides the link between the client or customer and the rest of the development team, &lt;strong&gt;what is to be done&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scrum master&lt;/strong&gt;(SM, shields the team from any external distractions during the sprint and tackles any of the impediments that the team flags during the daily Scrum meeting, &lt;strong&gt;how it is to be done&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Development team&lt;/strong&gt;(generalizing specialists)&lt;/p&gt;
&lt;h4 id=&#34;the-scrum-board&#34;&gt;The Scrum board&lt;/h4&gt;
&lt;p&gt;Physical Scrum boards/Digital Scrum boards.&lt;/p&gt;
&lt;h4 id=&#34;sprint-burndown-chart&#34;&gt;Sprint burndown chart&lt;/h4&gt;
&lt;p&gt;closely to the path of perfection.&lt;/p&gt;
&lt;h4 id=&#34;product-backlog&#34;&gt;Product backlog&lt;/h4&gt;
&lt;p&gt;产品积压项，对应产品的新feature。&lt;/p&gt;
&lt;h4 id=&#34;sprint-planning&#34;&gt;Sprint planning&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Avoiding Parkinson’s Law&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Parkinson’s Law states: “Work expands so as to fill the time available for its completion.” —Cyril Northcote Parkinson&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.mbalib.com/wiki/%E5%B8%95%E9%87%91%E6%A3%AE%E5%AE%9A%E5%BE%8B&#34;&gt;帕金森定律&lt;/a&gt;是指企业在发展过程中往往会因业务的扩展或其他原因而出现的一种现象，这一效应使得企业的机构迅速膨胀资源浪费员工积极性下降。&lt;/p&gt;
&lt;p&gt;The focus should remain on completing the story—that is, on meeting the definition of done—as quickly as possible.&lt;/p&gt;
&lt;p&gt;Affinity estimation &lt;strong&gt;合理&lt;/strong&gt;的工时分配（取决于对项目业务、研发人员的能力的了解程度，以及对其他突发情况的风险应对计划）&lt;/p&gt;
&lt;p&gt;从大到小排序所有的stories，然后从小到大开始。&lt;/p&gt;
&lt;h4 id=&#34;stand-up-meeting&#34;&gt;Stand-up meeting&lt;/h4&gt;
&lt;p&gt;死亡询问What did you do yesterday? What will you do today? What impediments do you face?&lt;/p&gt;
&lt;h3 id=&#34;why&#34;&gt;Why&lt;/h3&gt;
&lt;h4 id=&#34;cynefin-framework&#34;&gt;Cynefin framework&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Lean, or Agile, approaches to software acknowledge that the problem of software delivery is at least complicated and can even be complex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;敏捷开发或精益求精的软件，才能保证在Cynefin的第一或第二象限，避免进入Chaos或者all is not quite as it seems(一切都不尽如人意)的Obvious。我的理解是，Chaos就是毫无头绪；而Obvious就是传统的瀑布式开发，难以&lt;strong&gt;适应复杂的需求或者频繁的需求变更&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;scrum-versus-waterfall&#34;&gt;Scrum versus waterfall&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;waterfall&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the output from one stage becomes the input to the next&lt;/li&gt;
&lt;li&gt;each phase is completed before moving to the next phase&lt;/li&gt;
&lt;li&gt;no errors, issues, problems, or m standings are discovered after a phase has completed&lt;/li&gt;
&lt;li&gt;document-centric, generating a lot of documentation that does not directly improve the software product&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Agile processes：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;welcomes change and allows everyone to adapt to the changes that will occur&lt;/li&gt;
&lt;li&gt;This is not to say that documentation is unimportant or that Agile processes never produce documentation(living documents, such as wikis)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;shortcoming&#34;&gt;Shortcoming&lt;/h4&gt;
&lt;h3 id=&#34;how&#34;&gt;How&lt;/h3&gt;
&lt;p&gt;本章开始就提出如下问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Given that Agile frameworks are now prevalent, how can you ensure that the code you write enables and complements your development framework?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这肯定也是我们所关注的重中之重。&lt;/p&gt;
&lt;p&gt;敏捷开发流程之外还需要注意的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rigidity&lt;/li&gt;
&lt;li&gt;Lack of abstractions&lt;/li&gt;
&lt;li&gt;Too many abstractions&lt;/li&gt;
&lt;li&gt;Mixed responsibilities&lt;/li&gt;
&lt;li&gt;Untestability&lt;/li&gt;
&lt;li&gt;Skyhooks vs. cranes(All skyhooks should be replaced with appropriate cranes.)
&lt;ul&gt;
&lt;li&gt;Skyhooks:
&lt;ul&gt;
&lt;li&gt;Static methods&lt;/li&gt;
&lt;li&gt;Static classes (including singletons)&lt;/li&gt;
&lt;li&gt;Object construction that uses new&lt;/li&gt;
&lt;li&gt;Extension methods&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cranes:
&lt;ul&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;li&gt;Dependency injection&lt;/li&gt;
&lt;li&gt;Inversion of control&lt;/li&gt;
&lt;li&gt;Factories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metrics&lt;/li&gt;
&lt;li&gt;Unit test coverage&lt;/li&gt;
&lt;li&gt;Cyclomatic complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kanban&#34;&gt;Kanban&lt;/h2&gt;
&lt;p&gt;Kanban is a very &lt;strong&gt;simple&lt;/strong&gt; process &lt;strong&gt;with minimal rules&lt;/strong&gt; and a &lt;strong&gt;handful&lt;/strong&gt; of general guidelines.&lt;/p&gt;
&lt;p&gt;看板是一个非常简单的过程，具有最少的规则和一些通用准则。&lt;/p&gt;
&lt;p&gt;看板常被用来指代流程本身。简单的看板可以包含only a high-level process(SIPOC模型？，Supplier Input Process Output Customer)：To Do, Doing, and Done(the states map, 类似个人的timesheet，正因为看板的简单通用小到个人大到集体都可以使用)。当然也可以定义许多的规则严格把控整个软件的流程（Analyze/Implement/Verify/Deliver）&lt;/p&gt;
&lt;p&gt;The popular online work-tracking software : &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;limiting-work-in-progress&#34;&gt;Limiting work in progress&lt;/h3&gt;
&lt;p&gt;用来避免流程中受到需求变更的影响  right-sizing work(Imaportant)&lt;/p&gt;
&lt;h3 id=&#34;event-driven-ceremoniesmeeting&#34;&gt;Event-driven ceremonies(meeting)&lt;/h3&gt;
&lt;p&gt;避免频繁甚至意义不大的会议打断研发的思路&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You would never have been precisely accurate.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;classes-of-servicepriority&#34;&gt;Classes of service(priority)&lt;/h3&gt;
&lt;p&gt;当工作具有不同的风险特征时，使用Classes of service使团队能够确定紧急性或重要性很高的工作，并在必要时将精力集中在那里。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;service level agreements (SLAs) 服务级别协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第95个百分位(95th percentile) 指的是所给数集中超过其95%的数，95th百分点是统计时所采用的最高值，超过的5%的数据将被舍弃。百分位数的意义就在于，我们可以了解到某一个样本在整个样本集合中所处的位置或者某一个样本组的值大概是怎么样分布的。计算百分位数的方法：
&lt;ul&gt;
&lt;li&gt;最近序数方法（The Nearest Rank method）n = ((p / 100) * N) eg.p=95 N=20 n=19 则20个序列中第19个为95th percentile&lt;/li&gt;
&lt;li&gt;在最近序数间线性插值的方法（The Linear Interpolation Between Closest Ranks method）&lt;/li&gt;
&lt;li&gt;权重百分位数方法（The Weighted Percentile method）&lt;/li&gt;
&lt;li&gt;微软excel表格算法（Microsoft Excel method）&lt;/li&gt;
&lt;li&gt;NIST方法（NIST method）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;class WIP limits. 限制使用的典型例子就是重构，并根据工作量大小调整。如果重构的工作量大，则设定高限制（宽松eg.整个限制的75%）；相反则低限制（紧张eg.整个限制的25%）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;People as a class of service 开发人员也可以进行灵活的分配，比如通过看板的SLA和95th percentile得知项目中的前端工作确实很高时，可以重新分配足够的前端研发到项目中加速任务的完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;
&lt;h4 id=&#34;lead-time--cycle-time&#34;&gt;Lead time &amp;amp; Cycle time&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cycle time = Time spent in progress&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lead time = Time spent waiting in backlog + cycle time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lead time measures the time elapsed between order and delivery, thus it measures your production process from your customer’s perspective. Cycle time starts when the actual work begins on the unit and ends when it is ready for delivery.&lt;/p&gt;
&lt;p&gt;In other words, cycle time measures the completion rate and lead time measures the arrival rate.&lt;/p&gt;
&lt;h4 id=&#34;cumulative-flow-diagrams&#34;&gt;Cumulative flow diagrams&lt;/h4&gt;
&lt;p&gt;By graphing the data as a stacked area chart with the number of &lt;strong&gt;work items on the y-axis&lt;/strong&gt; and the &lt;strong&gt;day number on the x-axis&lt;/strong&gt;……&lt;/p&gt;
&lt;p&gt;如何从累积流程图中获取测量整个流程的数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lead time Measuring the x-axis distance between the To Do and Done areas gives the lead time of work items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cycle time Measuring the x-axis distance between the Doing and Done areas gives the cycle time of work items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work in progress Measuring the y-axis distance between the Doing and Done areas gives &lt;strong&gt;the total number of work items that are currently in progress&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unhealthy flows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Too much work in progress: a lack of WIP limits&lt;/li&gt;
&lt;li&gt;Scope creep: 将过量的任务放到TODO，没有考虑是否具有完成这些任务的能力，从而导致lead times(生产周期)变长&lt;/li&gt;
&lt;li&gt;Long phase of delivery: most commonly the Implement phase, when coding occurs. Apply smaller WIP limits to the bottleneck&lt;/li&gt;
&lt;li&gt;Delivery plateau: 交付平稳期&lt;/li&gt;
&lt;li&gt;Regulated deployment phase: 团队限制，比如只有周五才可以发布……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scrum管理变更的方法是对Sprint设置时间并锁定输入，以便在Sprint开始后到达的新工作必须等到下一次迭代后才能确定优先级和计划时间。看板允许随时添加新工作，但仅提供有关完成新工作可能需要多长时间的服务级别协议（SLA）。WIP Limts看板限制进行中的工作，以确保优先于完成工作而不是开始新的工作。&lt;/p&gt;
&lt;p&gt;Scrum is Agile for new teams, while Kanban is Agile for mature teams. 如果工作只是项目的一部分，并且时间和金钱资源有限，那么Scrum是最好的选择，因为每个冲刺都可以单独进行成本估算。如果工作是连续的，没有确定的结束日期，则看板更适合。&lt;/p&gt;
&lt;h2 id=&#34;dependencies-and-layering&#34;&gt;Dependencies and layering&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Framework dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Third-party dependencies&lt;/p&gt;
&lt;p&gt;The main reason to use a third-party dependency is to exchange the effort required for implementing some features or infrastructure for the effort of integrating something that is already written and suitable for the job.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;.net core 可以使用NuGet依赖管理工具&lt;/p&gt;
&lt;p&gt;directed graph(acyclic digraphs/cyclic digraph) 用有向图对依赖结构建模 A-&amp;gt;B 为A依赖B；此方式只能展示出依赖关系，并不能展示出依赖关系的具体分类（集成、聚合、复合、关联）。&lt;/p&gt;
&lt;h3 id=&#34;managing-dependencies&#34;&gt;Managing dependencies&lt;/h3&gt;
&lt;p&gt;patterns: 经验总结后可以重用的模式&lt;/p&gt;
&lt;p&gt;anti-patterns: 实际开发中发先存在许多不仅没多少优点，甚至会引入很多问题的模式&lt;/p&gt;
&lt;p&gt;Code smells: 如果某段代码可能存在问题(some code is potentially problematic)，就可以说有代码味道&lt;/p&gt;
&lt;h4 id=&#34;resolving-dependencies建议朗读并背诵&#34;&gt;Resolving dependencies(建议朗读并背诵)&lt;/h4&gt;
&lt;h5 id=&#34;assemblies&#34;&gt;Assemblies&lt;/h5&gt;
&lt;p&gt;The Common Language Runtime (CLR), which is the virtual machine that the .NET Framework uses to execute code instructions, is a software product like any other and has been programmed to behave in a predictable and logical way when hosting applications.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resolution process&lt;/strong&gt; The assembly resolution process is an important facet of the CLR. This covers the gap between adding a reference to an assembly or project and having the application running with this assembly loaded. The process is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/AssemblyResolutionProcess-20201226102807.jpg&#34; alt=&#34;Assembly resolution process&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The CLR uses a just-in-time (JIT) model to resolve assemblies. As was already proven earlier in the chapter, the references contained in an application are not resolved as you start up the application, but rather when you first make use of a feature of that assembly—literally just in time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each assembly has an identity that is a composite of its name, version, culture, and public key token. Features such as binding redirects can change this identity, so determining it is not quite as simple as it might seem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the assembly’s identity has been established, the CLR is able to determine whether it has already attempted to resolve this dependency previously during the current execution of the application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asking this question causes the CLR to branch depending on the answer. If you have attempted to resolve this assembly, that process has either already succeeded or failed. If it succeeded, the CLR can use the assembly that has already been loaded, and it exits early. If not, the CLR knows that it need not continue attempting to resolve this assembly because it will fail.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alternatively, if this is the first attempt to resolve the assembly, the CLR first checks the global assembly cache (GAC). The GAC is a machine-wide assembly repository that allows multiple versions of the same assembly to be executed in the same application. If the assembly is found in the GAC, the resolution process is successful and the discovered assembly is loaded. So you now know that, because the GAC is searched first, the presence of an applicable assembly in the GAC will take precedence over an assembly on the file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the assembly could not be found in the GAC, the CLR starts probing a variety of directories in search of it. The directories searched depend on the app.config settings. If there is a codeBase element in the app.config, that location is checked and—if the assembly is not foundno other locations are subsequently checked. However, the default is for the application’s root directory to be searched, which is typically the /bin folder that relates to the entry point or web application. If the assembly cannot be found there, the resolution process fails and an exception is thrown by the CLR. Typically, this results in the termination of the application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/tools/fuslogvw-exe-assembly-binding-log-viewer&#34;&gt;The Fusion log(程序集绑定日志)&lt;/a&gt;&lt;/strong&gt;  用来打印CLR加载程序集失败的问题，开启以后，任何托管应用程序的所有尝试（无论成功与否）都会被记录到日志中。&lt;/p&gt;
&lt;p&gt;Not all dependencies require assembly references. One alternative is to deploy the service code as a hosted service. This requires inter-process or inter-network communication, but it minimizes the assembly references required between client and server.&lt;/p&gt;
&lt;h4 id=&#34;services待深入了解&#34;&gt;Services(待深入了解)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;已知端点(编译时就知道服务的位置，直接为客户端创建一个服务代理)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建Proxy的两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Visual Studio为项目添加一个服务引用&lt;/li&gt;
&lt;li&gt;使用.NET Framework的&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.servicemodel.channelfactory-1?view=dotnet-plat-ext-5.0&#34;&gt;Channel Factory&lt;/a&gt;类编码创建服务代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;服务发现(只知道服务的绑定类型或协定，但并不清楚服务的宿主地址)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Managed mode 托管模式
&lt;ul&gt;
&lt;li&gt;客户端请求中心服务&lt;/li&gt;
&lt;li&gt;single point of failure (SPOF)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ad-Hoc mode 临时模式
&lt;ul&gt;
&lt;li&gt;采用组播网路消息(multicast network messages)&lt;/li&gt;
&lt;li&gt;使用UDP协议，每个可发现的服务都会在一个特定的IP地址和端口上等待查询请求(The default implementation of this uses the User Datagram Protocol (UDP), with each discoverable service listening on a specified IP address 1 for queries)， 不可用的服务是不会被发现的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/wcf-discovery&#34;&gt;WCF(Windows Communication Foundation) Discovery&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For an alternative to &lt;em&gt;WCF&lt;/em&gt;, consider gRPC. - - DOTNET 5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;REST(REpresentational State Transfer))ful services&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/january/service-station-an-introduction-to-restful-services-with-wcf&#34;&gt;An Introduction To RESTful Services With WCF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.net core web api 和 grpc 都属于RESTful的服务，更适合跨平台&lt;/p&gt;
&lt;h3 id=&#34;layering&#34;&gt;Layering&lt;/h3&gt;
&lt;p&gt;逻辑层与物理层(Layers vs. tiers)&lt;/p&gt;
&lt;p&gt;两层：用户界面-访问数据&lt;/p&gt;
&lt;p&gt;三层：用户界面-业务逻辑-数据访问(MVC属于用户界面层)&lt;/p&gt;
&lt;h4 id=&#34;cross-cutting-concerns切面&#34;&gt;Cross-cutting concerns(切面)&lt;/h4&gt;
&lt;p&gt;Sometimes a component’s responsibilities are not easily limited to a single layer. Functions such as auditing, security, and caching can permeate through the entire application, because they are applicable at every layer.&lt;/p&gt;
&lt;p&gt;Aspect-oriented programming (AOP)&lt;/p&gt;
&lt;p&gt;比如使用扩展属性更加明显优雅简介的完成可以大量重用操作。&lt;/p&gt;
&lt;h4 id=&#34;asymmetric-layering非对称分层&#34;&gt;Asymmetric layering(非对称分层)&lt;/h4&gt;
&lt;p&gt;Command/Query Separation(CQS): Bertrand Meyer, in his book Object-Oriented Software Construction (Prentice Hall, 1997), used the phrase command/query separation (CQS) to explain that all object methods should be one of only two things: a command or a query.&lt;/p&gt;
&lt;p&gt;Command/Query Responsibility Segregation(CQRS): Commands and queries follow much the same rules as with CQS, but CQRS goes one step further: it acknowledges that commands and queries might need to follow different paths through the layering in order to be best handled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/CQRS-20201227140634.jpg&#34; alt=&#34;Domain models should only be used for handling commands.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Sound management of dependencies很重要&lt;/p&gt;
&lt;h2 id=&#34;interfaces-and-design-patterns&#34;&gt;Interfaces and design patterns&lt;/h2&gt;
&lt;h3 id=&#34;diamond-inheritance-problem&#34;&gt;Diamond inheritance problem&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/Diamond-20201227143025.png&#34; alt=&#34;Diamond inheritance&#34;&gt;&lt;/p&gt;
&lt;p&gt;Because of this ambiguity, the .NET Framework does not allow multiple inheritance of classes.&lt;/p&gt;
&lt;h3 id=&#34;explicit-implementation&#34;&gt;Explicit implementation&lt;/h3&gt;
&lt;h3 id=&#34;polymorphism多态&#34;&gt;Polymorphism(多态)&lt;/h3&gt;
&lt;p&gt;The ability to use an object of one type and have it implicitly act as if it were of a different type is called polymorphism.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/Polymorphism-20201227144730.png&#34; alt=&#34;ploymorphism&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;adaptive-design-patterns&#34;&gt;Adaptive design patterns&lt;/h3&gt;
&lt;h4 id=&#34;the-null-object-pattern&#34;&gt;The Null Object pattern&lt;/h4&gt;
&lt;h4 id=&#34;the-isnull-property-anti-pattern&#34;&gt;The IsNull property anti-pattern&lt;/h4&gt;
&lt;h4 id=&#34;the-adapter-pattern&#34;&gt;The Adapter pattern&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Class Adapter pattern&lt;/li&gt;
&lt;li&gt;The Object Adapter pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-strategy-pattern&#34;&gt;The Strategy pattern&lt;/h4&gt;
&lt;h4 id=&#34;further-versatility&#34;&gt;Further versatility&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Duck-typing&lt;/li&gt;
&lt;li&gt;Mixins&lt;/li&gt;
&lt;li&gt;Fluent interfaces&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;testinghttpsdocsmicrosoftcomen-usvisualstudiotestviewvs-2019&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/test/?view=vs-2019&#34;&gt;Testing&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;unit-testing&#34;&gt;Unit Testing&lt;/h3&gt;
&lt;p&gt;Unit test: Testing a single unit of code, very small atomic test.&lt;/p&gt;
&lt;p&gt;Integration test: Testing multiple units of code integrated together, to go through the different layers and ensure they are using eachother correctly. These should be done after unit tests have verified the individual units work independently. Many people mistakenly refer to these as unit tests.&lt;/p&gt;
&lt;p&gt;Built Verification Test: Testing the built product by deploying it and running tests that will interact with it in the manner a user would. Also mistakenly referred to as unit tests frequently. These are the largest most full featured tests and often just done manually by testing teams rather than being automated.&lt;/p&gt;
&lt;p&gt;Unit testing is the discipline of writing code that tests other code. Every unit test is composed of three distinct parts(AAA):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;arrange&lt;/strong&gt;ment of the preconditions of the test 准备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The performance of the &lt;strong&gt;act&lt;/strong&gt; that is being tested 操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;assert&lt;/strong&gt;ion that the expected behavior occurred 断言&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[TestClass]&lt;/span&gt; 
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;AccountTest&lt;/span&gt; 
{
&lt;span style=&#34;color:#658b00&#34;&gt;    [TestMethod]&lt;/span&gt; 
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; AddingTransactionChangesBalance() {
        &lt;span style=&#34;color:#228b22&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; account = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Account();
        &lt;span style=&#34;color:#228b22&#34;&gt;// Act 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      	account.AddTransaction(&lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;m);
        &lt;span style=&#34;color:#228b22&#34;&gt;// Assert 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      	Assert.AreEqual(&lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;m, account.Balance);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer?view=vs-2019&#34;&gt;Running the tests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSTest is a convenient choice for unit tests—hence its use for the examples in this chapter—but it is not a great choice. NUnit and XUnit are better alternative testing frameworks that rely on external dependencies.&lt;/p&gt;
&lt;h4 id=&#34;test-driven-development&#34;&gt;Test-driven development&lt;/h4&gt;
&lt;p&gt;When you use a TDD approach to writing software, you write the unit tests and the production code in tandem, with a failing test written for every expected behavior exhibited by every method of every class in the production code. The failing test fails only because the production code does not exist yet. The test states—via assertions—that the production code should act in some way, but because it does not yet, the test fails. After the production code is implemented in the simplest way possible to satisfy the test’s requirements, the test will succeed.&lt;/p&gt;
&lt;p&gt;Red, green, refactor:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write a failing test that targets the expected behavior of the SUT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement just enough of the SUT so that the new test passes without breaking existing successful tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If any refactoring can be done on the SUT to improve its design or overall quality, now is the time to do so.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After the transition from red to green for each unit test, you had the opportunity to refactor the implementation of the SUT.&lt;/p&gt;
&lt;p&gt;Addition: &lt;a href=&#34;https://martinfowler.com/articles/is-tdd-dead/&#34;&gt;Is TDD Dead?&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;test-double&#34;&gt;Test double&lt;/h4&gt;
&lt;p&gt;测试替身&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dummies&lt;/strong&gt; This is the simplest of all test doubles. Dummies are intended to fulfil parameter lists and have no special behavior. Often, real implementations are used as dummies and might be primitive types, which are nevertheless required to turn a unit test green.&lt;/p&gt;
&lt;p&gt;被测试方法需要一些参数，但是这些参数实际上并没有用到，它们的存在只是为了满足调用方法的参数要求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spies&lt;/strong&gt; A spy records the calls that have been made to its methods, along with the parameters that were supplied to each call. The record of these calls can then be used in assertions to ensure that certain calls were made.&lt;/p&gt;
&lt;p&gt;确认方法调用记录如何调用，并在断言中可以使用调用结果，断言程序运行的正确性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stubs&lt;/strong&gt; A stub is a dependency that is required by the system under test and that will return a pre-supplied answer whenever queried. Stubs are most useful at the seams of an application, where external dependencies are required. Instead of depending on a database, you can depend on a stub that can return dummy data.&lt;/p&gt;
&lt;p&gt;在测试中为每个调用提供一个封装好的响应，它可以使用很直接的方式模拟依赖项的行为。例如我们可以使用Stub把相关数据放到内存里查询而不是查询真实的数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fakes&lt;/strong&gt; A fake is very similar to a stub, but the intent is subtly different. Fakes are not supplied with any preconceived responses to queries, but are instead closer to real implementations with some necessary concession to avoid an external dependency. Personally, I make a distinction between a manually implemented mock and a mock that is supplied by a mocking framework: manual mocks are called fakes.&lt;/p&gt;
&lt;p&gt;Fake 可以是某个 Data Access Object 或者 Repository 的基于内存的实现；该实现并不会真的去进行数据库操作。这就允许了我们能够在并没有真的启动数据库或者执行耗时的外部请求的情况下进行服务的测试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mocks&lt;/strong&gt; Whereas stubs and fakes provide test doubles for dependencies that are indirect queries, mocks are test doubles for dependencies that have indirect commands. Mocks are useful to determine whether a command was executed on a dependency of the system under test.&lt;/p&gt;
&lt;p&gt;模拟一个具有特性行为的对象，在测试开始前根据期望提供需要的结果。被测试对象往往调用这个对象的方法时，根据条件得到不同的输入，从而满足测试对象的不同场景。例如，mock 数据库的存储层，返回正常数据、空或者丢出异常等情况。当我们并不希望真的调用生产环境下的代码或者在测试中难于验证真实代码执行效果的时候，我们会用 Mock 来替代那些真实的对象。典型的例子即是对邮件发送服务的测试，我们并不希望每次进行测试的时候都发送一封邮件，毕竟我们很难去验证邮件是否真的被发出了或者被接收了。我们更多地关注于邮件服务是否按照我们的预期在合适的业务流中被调用。&lt;/p&gt;
&lt;h4 id=&#34;manual-test-fakery&#34;&gt;Manual test fakery&lt;/h4&gt;
&lt;h4 id=&#34;mocking-frameworks&#34;&gt;Mocking frameworks&lt;/h4&gt;
&lt;p&gt;The most popular: &lt;a href=&#34;https://github.com/Moq/moq4/wiki/Quickstart&#34;&gt;MOQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在一个项目里, 我们经常需要把某一部分程序独立出来以便我们可以对这部分进行测试. 这就要求我们不要考虑项目其余部分的复杂性, 我们只想关注需要被测试的那部分. 这里就需要用到模拟(Mock)技术.&lt;/p&gt;
&lt;p&gt;Mocking is the act of taking a small piece of code that may depend on other things, mocking those other things up so that you can control the circumstances surrounding the piece of code you want to test.&lt;/p&gt;
&lt;p&gt;The purpose of mocking is atomicity in tests. It allows you to test just the individual piece of code you want, without having it&amp;rsquo;s tests affected due to bugs in dependent code pieces. Also mocking gives you the ability to fabricate a variety of scenarios to test the edge cases of each piece of code.&lt;/p&gt;
&lt;p&gt;Mocking is generally purposed for creating boundaries around the target code in unit tests, though it&amp;rsquo;s not uncommon to use it in integration tests too for fabricating a resource that acts as the seed to the integrated code chain you&amp;rsquo;re targeting.&lt;/p&gt;
&lt;p&gt;Moq lets you set the following expectations on a method call:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Call some other lambda expression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return a specific value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Throw a specified type of exception.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that this method was called.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mocks and test over-specification: An over-specified test is fragile, but you can avoid this fragility by changing what you assert. In other words, a test is over-specified when it has knowledge of the SUT’s &lt;em&gt;implementation&lt;/em&gt; rather than its &lt;em&gt;expected behavior&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&#34;testing-all-control-flows&#34;&gt;Testing all control flows&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Happy Path&lt;/em&gt;: the execution path through the code that yields no errors and causes no problems.&lt;/p&gt;
&lt;p&gt;There are a few gaps that need to be addressed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if the account repository is a null reference?&lt;/li&gt;
&lt;li&gt;What if the repository cannot find the account?&lt;/li&gt;
&lt;li&gt;What if the account method throws an exception?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To avoid leaking dependencies between layers, it is good practice to wrap an exception thrown at a lower layer in a new exception for this layer. The exceptions that the domain model throws will be specific to that layer. If the service layer allows this to propagate up to the controller, the controller will need knowledge of the DomainException type to catch and handle these exceptions. This introduces a dependency between the controller and the domain model layer, which should be avoided. Instead, the service will catch the domain model exceptions and wrap them in ServiceException instances before throwing them up to the controller. Due to the controller’s dependency on the service layer, it is able to catch the exceptions that it defines. It is important to acknowledge that the ServiceException contains the DomainException as an inner exception—without this, valuable context about the original exception is lost: the entry point of the application might be able to unwrap this exception in a global exception handler, for example.&lt;/p&gt;
&lt;h4 id=&#34;test-setup&#34;&gt;Test setup&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[TestInitialize]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;writing-tests-first&#34;&gt;Writing tests first&lt;/h3&gt;
&lt;h4 id=&#34;what-is-tdd&#34;&gt;What is TDD?&lt;/h4&gt;
&lt;p&gt;The “&lt;strong&gt;purist&lt;/strong&gt;” idea of TDD is that it is a design tool—that developers should approach the keyboard without forethought of the production code they might implement.&lt;/p&gt;
&lt;p&gt;The “&lt;strong&gt;pragmatic&lt;/strong&gt;” idea of TDD is that developers write the unit tests first.&lt;/p&gt;
&lt;h4 id=&#34;test-driven-design&#34;&gt;Test-driven design&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Write exactly one new test. It should be the smallest test which seems to point in the direction of a solution.&lt;/li&gt;
&lt;li&gt;Run the test to make sure it fails.&lt;/li&gt;
&lt;li&gt;Make the test from (1) pass by writing the least amount of implementation code you can IN THE TEST METHOD.&lt;/li&gt;
&lt;li&gt;Refactor to remove duplication or otherwise as required to improve the design. Be strict about the refactorings. Only introduce new abstractions (methods, classes, etc) when they will help to improve the design of the code. Specifically:
&lt;ol&gt;
&lt;li&gt;ONLY Extract a new method if there is sufficient code duplication in the test methods.&lt;/li&gt;
&lt;li&gt;When extracting a method, initially extract it to the test class (don’t create a new class yet). ONLY create a new class when a clear grouping of methods emerges and when the test class starts to feel crowded or too large.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Repeat the process by writing another test (go back to step 1).&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;test-first-development&#34;&gt;Test-first development&lt;/h4&gt;
&lt;p&gt;TDD = TFD + Refactoring&lt;/p&gt;
&lt;p&gt;TDD是测试驱动，TFD是测试优先，测试优先出现红色就需要重构，这样就靠向了TDD。&lt;/p&gt;
&lt;h3 id=&#34;further-testing&#34;&gt;Further testing&lt;/h3&gt;
&lt;h4 id=&#34;the-testing-pyramid&#34;&gt;The testing pyramid&lt;/h4&gt;
&lt;p&gt;The testing pyramid reminds you of the relative number of tests that you should aim to maintain.&lt;/p&gt;
&lt;h4 id=&#34;the-testing-quadrant&#34;&gt;The testing quadrant&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://lisacrispin.com/wp-content/uploads/2011/11/Agile-Testing-Quadrants.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;The testing quadrant diagram explains that tests can be useful to different stakeholders and for different reasons.&lt;/p&gt;
&lt;h3 id=&#34;testing-for-prevention-and-cure&#34;&gt;Testing for prevention and cure&lt;/h3&gt;
&lt;h4 id=&#34;how-do-you-decrease-mttr&#34;&gt;How do you decrease MTTR?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;li&gt;alerting&lt;/li&gt;
&lt;li&gt;monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://lisacrispin.com/2011/11/08/using-the-agile-testing-quadrants/&#34;&gt;Using the Agile Testing Quadrants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/what-is/elk-stack&#34;&gt;ELK Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;refactoring&#34;&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;Refactoring is the process of incrementally improving the design of existing code.&lt;/p&gt;
&lt;p&gt;This is an important point—refactoring changes the &lt;em&gt;arrangement&lt;/em&gt; of the code, not the &lt;em&gt;outcome&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;changing-existing-code&#34;&gt;Changing existing code&lt;/h3&gt;
&lt;h4 id=&#34;replacing-magic-numbers-with-constants&#34;&gt;Replacing “magic numbers” with constants&lt;/h4&gt;
&lt;p&gt;To the person who wrote the code, their significance might be obvious because that person has prior knowledge of what it all means. In reality, that will probably only be true for a week, perhaps two, before the person’s memory starts to fade and they lose track of what that 5, or that 2, means.&lt;/p&gt;
&lt;h4 id=&#34;replacing-a-conditional-expression-with-polymorphism&#34;&gt;Replacing a conditional expression with polymorphism&lt;/h4&gt;
&lt;p&gt;子类继承父类以替换Switch&lt;/p&gt;
&lt;h4 id=&#34;replacing-a-constructor-with-a-factory-method&#34;&gt;Replacing a constructor with a factory method&lt;/h4&gt;
&lt;h4 id=&#34;replacing-inheritance-with-delegation&#34;&gt;Replacing inheritance with delegation&lt;/h4&gt;
&lt;h4 id=&#34;code-smell-refused-bequest&#34;&gt;Code smell: Refused bequest&lt;/h4&gt;
&lt;p&gt;如果存在一个子类与其他子类不一致，比如不需要实现一个基类中的方法，此时可以有两种方法&lt;/p&gt;
&lt;h3 id=&#34;aggressive-refactoring&#34;&gt;Aggressive refactoring&lt;/h3&gt;
&lt;p&gt;Code is never done. Code can be working, good enough, sufficient, valuable, and producing revenue. But it is rarely, if ever, complete.&lt;/p&gt;
&lt;h4 id=&#34;red-green-refactorredesign&#34;&gt;Red, green, refactor…redesign&lt;/h4&gt;
&lt;h2 id=&#34;dependency-inversionhttpswwwopenhearticucsdependency-injection&#34;&gt;&lt;a href=&#34;https://www.openheart.icu/cs/dependency-injection/&#34;&gt;Dependency inversion&lt;/a&gt;&lt;/h2&gt;
- https://www.openheart.icu/cs/adaptive-code/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Unit Test Practice</title>
        <link>https://www.openheart.icu/cs/unit-test-practice/</link>
        <pubDate>Sat, 21 Nov 2020 22:30:12 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/unit-test-practice/</guid>
        <description>42th openheart https://www.openheart.icu/cs/unit-test-practice/ -&lt;h1 id=&#34;unit-test-practice&#34;&gt;Unit Test Practice&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;纸上得来终觉浅&lt;/strong&gt;，绝知此事要躬行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;shifting-left&#34;&gt;Shifting Left&lt;/h2&gt;
&lt;p&gt;所谓左移，左倾，不是指冒险主义。是将整个流程中右边部分向左边移动，比如测试。 : )&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shift Left is a practice intended to find and prevent defects early in the software delivery process. The idea is to improve quality by moving tasks to the left as early in the lifecycle as possible.&lt;/p&gt;
&lt;p&gt;In the traditional software development model, requirements are kept on the left side of the plan, and the delivery and testing requirements on the right. The problem is that these practices can’t handle changing expectations and requirements, resulting in negative outcomes for the business such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increased costs&lt;/li&gt;
&lt;li&gt;Increased time to market&lt;/li&gt;
&lt;li&gt;Unexpected errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Shift left approach emphasizes the need for developers to concentrate on quality from their earliest stage of a software build, rather than waiting for errors and bugs to be found late in the SDLC(&lt;a href=&#34;https://en.wikipedia.org/wiki/Systems_development_life_cycle&#34;&gt;Systems development life cycle&lt;/a&gt;, &lt;a href=&#34;https://www.tutorialspoint.com/sdlc/sdlc_pdf_version.htm&#34;&gt;SDLC Tutorial&lt;/a&gt;). Shifting left enables product teams perform daily tasks like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Providing feedback&lt;/li&gt;
&lt;li&gt;Reviewing changes and progress&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;人工的过程大都是倒置的，比如制作一个杯子，我们得想象杯子的样子，然后按设计高温烧制，最终的杯子才会在我的右手旁，盛着热美式。这本来就与自然相背而行，类人猿进化到人类，人类继续进化，他们（我们）都不晓得要进化成什么样子的生物，一切未知，但前进却永不止步。软件肯定不是自然产物，所以不能放纵各种“变异”和“遗传”，要把控过程，走的每一步、每一个动作都要向最终产物在靠拢。&lt;/p&gt;
&lt;p&gt;其实所谓左移，将流程后半部前移，真正移动的是什么？还是需求。一切是做出更完善的Demand planning，以减少缺陷，提前规避风险。&lt;/p&gt;
&lt;p&gt;软件的需求并不像生活里比比皆是的目标那么简单。明确今天自己要写几行代码，给哪一个心爱的女孩买个GUCCI……这类目标的确立犹如是探囊取物。而一个明确的软件需求，不止要从客户要求里抽象，还要包括对具体实现的思考与设计，保持一切都符合主流规范并贴合市场发展，这难于上青天。（这也可能是IT相关都需要团队工作的原因）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Scrum we refer to the step’s output as the Definition of Done, the DoD, of a user story or an epic. Writing good DoDs is not trivial and many books and articles are written to cover the topic. A user story (and epic for that matter as well) can also have a Definition of Ready, the DoR, meaning that the story is groomed to the point that it makes sense, and everything is clear enough so the story can be planned. Where the DoD defines the quality requirements of the outcome user story or epic, it is the DoR that defines the user story or epic’s input.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;明确的目标（力所能及），就是对过程最好的掌控。A clear goal (Able To Do) is the best control of the process.&lt;/p&gt;
&lt;h3 id=&#34;shift-left-testinghttpsenwikipediaorgwikishift-left_testing&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Shift-left_testing&#34;&gt;Shift Left Testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;字面意思。 Literally interpretation&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Shift Left testing&lt;/strong&gt; means testing earlier in the software development process.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;iso&#34;&gt;ISO&lt;/h3&gt;
&lt;p&gt;Im my opinion, ISO means a standard, criterion, norm, touchstone&amp;hellip; what we must follow. Like: Veracode will help do a check of our codes, Source Code Scanning with SonarQube.&lt;/p&gt;
&lt;p&gt;BCI should be mentioned here, non-governmental organization may be a joke to me now.&lt;/p&gt;
&lt;h2 id=&#34;bdd&#34;&gt;BDD&lt;/h2&gt;
&lt;p&gt;Behavior Driven Development.&lt;/p&gt;
&lt;p&gt;BDD的过程就是在完善“左移”，将需求（架构）描述的更加清晰。&lt;/p&gt;
&lt;h3 id=&#34;specflowhttpsspecfloworg&#34;&gt;&lt;a href=&#34;https://specflow.org/&#34;&gt;SpecFlow&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Building up the logic to test that a particular behavior is being satisfied can be tedious. One of the tools Doire demonstrated in his presentation was SpecFlow (&lt;a href=&#34;http://specflow.org/&#34;&gt;specflow.org&lt;/a&gt;). &lt;strong&gt;This tool integrates with Visual Studio and enables you to define user stories—called scenarios—using its simple rules.&lt;/strong&gt; It then automates some of the creation and execution of the methods (some with tests and some without). The goal is to validate that the rules of the story are being satisfied.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/38145106/what-is-major-difference-between-integration-testing-and-behavioral-testing-bdd&#34;&gt;What is Major Difference between Integration Testing and Behavioral Testing BDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/july/data-points-behavior-driven-design-with-specflow&#34;&gt;Data Points - Behavior-Driven Design with SpecFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/archive/msdn-magazine/2010/december/msdn-magazine-bdd-primer-behavior-driven-development-with-specflow-and-watin&#34;&gt;BDD Primer - Behavior-Driven Development with SpecFlow and WatiN&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tfd&#34;&gt;TFD&lt;/h2&gt;
&lt;h2 id=&#34;tdd&#34;&gt;TDD&lt;/h2&gt;
&lt;h2 id=&#34;questions&#34;&gt;Questions&lt;/h2&gt;
&lt;h3 id=&#34;unit-test-api&#34;&gt;Unit Test API&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;You should either create Mocks or use Isolation Framework in order to simulate API environment. Unit tests should not depend on resources like internet connections, network, endpoints etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The job of a remote API client is to issue certain calls - no more, no less. Therefore, its test should verify that it issues those calls - no more, no less.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说我们在对各种与API相关的Code做Unit Test时，不需要去测试我们的请求是否能获取正确的结果。非要测试，也只是去测试我们的请求有没有真正的去发送。这也意味着，API相关的Unit Test需要对Code进行做出更准确的分割，保证Coverage然后对分割后与请求无关的Code 进行Unit Test。&lt;/p&gt;
&lt;h3 id=&#34;non-mockable&#34;&gt;Non-Mockable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Internal/Protected/Private 对于此类Classes/Methods，首先肯定要避免在UT会直接需要mock。期次可以考虑Use Fake Method in Unit Test to implement the non-mockable Object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can&amp;rsquo;t Be Mock Type, Like cant be overrided, not interface, not virtual type. 遇到此类可以考虑将此类进行封装，这种情况往往是第三方或者.NET本身限制，存在共性，可以把这些不能mock的Classes/Methods封装成新的Interface保证可以被mock。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reference-1&#34;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3129821/how-to-unit-test-your-api&#34;&gt;How to unit test your API?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/252748/is-it-actually-worth-unit-testing-an-api-client&#34;&gt;Is it actually worth unit-testing an API client?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;refactor&#34;&gt;Refactor&lt;/h2&gt;
&lt;p&gt;如何有效地refactor？&lt;/p&gt;
- https://www.openheart.icu/cs/unit-test-practice/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>处理器中的流水线技术</title>
        <link>https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/</link>
        <pubDate>Sat, 14 Nov 2020 16:55:11 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/</guid>
        <description>42th openheart https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/ -&lt;h1 id=&#34;处理器中的流水线&#34;&gt;处理器中的流水线&lt;/h1&gt;
&lt;p&gt;在现代处理器中，流水线是一个最基本的概念。在了解cpu的时候，很多时候会提及拥有多少级流水线。虽然这个概念并不是在计算机技术中诞生的，但是这个技术却在处理器世界中大放异彩。&lt;/p&gt;
&lt;p&gt;流水线(Pipeline)技术是指程序在执行时候多条指令重叠进行操作的一种准并行处理实现技术。通俗的讲将一个时序过程，分解成若干个子过程，每个过程都能有效的与其他子过程同时执行。这种思想最初是在RISC的架构中出现的，旨在提高处理器处理效率，争取在一个时钟周期中完成一条指令。&lt;/p&gt;
&lt;p&gt;最经典的当属MIPS(无内部互锁的流水线处理器)的五级流水线技术。MIPS体系结构本身就是为了流水线而设计的，cpu在高速缓存中运行，每条指令的执行过程都分成五级。每一级成为一个流水线阶段，每个阶段占用固定的时间，通常是一个时钟周期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BF1365345053_3598.jpg&#34; alt=&#34;五级流水线&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图是MIPS的五级流水线&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IF(instruction fetch)&lt;/code&gt;：从指令高速缓存中获取下一条指令。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RD(Read register)&lt;/code&gt;：从指定的源寄存器域中指定的cpu寄存器中读取数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ALU(arithmetic/logic  unit)&lt;/code&gt;：算术和逻辑运算操作。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MEM(memory R/W)&lt;/code&gt;：读写数据高速缓存中的内存变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WB(Write back)&lt;/code&gt;：将结果写入寄存器堆中。&lt;/p&gt;
&lt;p&gt;很明显，如果只执行一条指令的话，流水线是不会提高效率的。但是如果要完成多条指令，利用流水线的并行原理，其实是可以提高几倍的处理速度。&lt;/p&gt;
&lt;p&gt;由于流水线技术的高效性，后来所有的处理器都引进了该实现，当然包括x86的处理器，当年奔四号称20级的流水线结构。但是，是不是流水线级数越多越好呢？流水线级数越多，在处理多指令的时候确实也会越高效，但必然以高成本为代价，同时也会出现很多相关的一些副作用。&lt;/p&gt;
&lt;p&gt;流水线的更多详细说明可以参阅更多书籍或者wiki。对于基础书籍推荐一下《&lt;em&gt;大话处理器&lt;/em&gt;》的部分章节。&lt;/p&gt;
&lt;h1 id=&#34;处理器中的冒险&#34;&gt;处理器中的冒险&lt;/h1&gt;
&lt;p&gt;流水线给处理器带来了效率，当然也有问题。称之为流水线冒险(HaZard)。&lt;/p&gt;
&lt;h2 id=&#34;结构冒险&#34;&gt;结构冒险&lt;/h2&gt;
&lt;p&gt;由于处理器资源冲突，而无法实现某些指令或者阶段的组合实现，就称之为处理器有结构冒险。&lt;/p&gt;
&lt;p&gt;比如，早期的处理器中，程序和数据是存储在一起的，那么容易出现下图的情况：在第四个cycle中，IF和MEM同时访问存储器导致有一个操作要等待，此时hazard就出现了。现在的处理器已经解决了该问题：指令存储在L1P cache中，数据存储L1D cache中，单独访问，不会影响相互操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/%E7%BB%93%E6%9E%84%E5%86%92%E9%99%A91365345110_7686.jpg&#34; alt=&#34;结构冒险&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据冒险&#34;&gt;数据冒险&lt;/h2&gt;
&lt;p&gt;如果流水线中原来有先后顺序的指令同一时刻处理时，可能会导致出现访问了错误的数据的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/%E6%95%B0%E6%8D%AE%E5%86%92%E9%99%A91365345212_2478.jpg&#34; alt=&#34;数据冒险&#34;&gt;&lt;/p&gt;
&lt;p&gt;在汇编语句中，add R1,R2,R3 将寄存器R2和R3的和赋予R1，改变R1的值；而紧接着下面的语句：add R4,R1,R5则会使用R1的值，可是R1必须在第一条语句中的第5个cycle才能更新到寄存器中，语句二是在第4个cycle就要访问R1，也就是说第二,条指令此时在使用错误的R1的值。这是数据hazard出现了。&lt;/p&gt;
&lt;p&gt;很容易就能想到一种方式解决：在两条指令中添加一条空指令：nop。但是会影响处理器的指令的执行效率。在现代处理器技术中，已经用forwarding的方式解决了。如下图，如果处理器在检测到当前指令的源操作数正好在流水线的EX或者MEM阶段，接直接将ex和mem寄存器的值传递给ALU的输入，而不是再从寄存器堆中获取数据了。因为此时寄存器堆中的数据可能是没有被及时更新的。&lt;/p&gt;
&lt;p&gt;当然不仅在EX阶段有这种问题出现，在mem阶段也容易出现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E5%86%92%E9%99%A91365345292_2683.jpg&#34; alt=&#34;解决数据冒险&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;控制冒险&#34;&gt;控制冒险&lt;/h2&gt;
&lt;p&gt;在流水线中的的执行指令时，由于并行处理的关系，后面很多指令其实都在流水线中开始处理了，包括预取值和译码。那么，如果此时程序中出现一条跳转语句怎么办呢？因为程序已经跑到其他地址处执行，流水线中之前已经做好的预取值和译码动作都不能使用了。这些会被处理器的专有部件flush掉，重新开始新的流水线。此时我们可以称之为出现了控制hazard。这种情况对于程序和效率来说是存在很大损失的。&lt;/p&gt;
&lt;p&gt;当然，我们也有解决方案，也就是在jump指令后面(不会被真正使用，但是会进入流水线)添加nop。在MIPS程序中，经常在jump指令后面添加nop语句。&lt;/p&gt;
&lt;p&gt;在X86架构中，是通过硬件来实现flush，将无效的流水线排空，以保证正确运行流水线。这里会涉及到分支预测技术的使用。&lt;/p&gt;
&lt;p&gt;在其他一些处理器中，用软件的方式来处理，添加nop。同时在编译器中通过乱序的思想用有效指令代替nop。这样也可以避免转跳带来的性能损失。&lt;/p&gt;
- https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Idempotent</title>
        <link>https://www.openheart.icu/cs/idempotent/</link>
        <pubDate>Thu, 12 Nov 2020 15:58:21 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/idempotent/</guid>
        <description>42th openheart https://www.openheart.icu/cs/idempotent/ -&lt;h2 id=&#34;什么是幂等&#34;&gt;什么是幂等？&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%B8%E5%AD%B8&#34;&gt;数学&lt;/a&gt;里，&lt;strong&gt;幂等&lt;/strong&gt;有两种主要的定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在某&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E9%81%8B%E7%AE%97&#34;&gt;二元运算&lt;/a&gt;下，&lt;strong&gt;幂等元素&lt;/strong&gt;是指被自己重复运算（或对于&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8&#34;&gt;函数&lt;/a&gt;是为&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0&#34;&gt;复合&lt;/a&gt;）的结果等于它自己的元素。例如，乘法下唯一两个幂等&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%A6%E6%95%B8&#34;&gt;实数&lt;/a&gt;为0和1。&lt;/li&gt;
&lt;li&gt;某&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%80%E5%85%83%E9%81%8B%E7%AE%97&#34;&gt;一元运算&lt;/a&gt;为&lt;strong&gt;幂等&lt;/strong&gt;的时，其作用在任一元素两次后会和其作用一次的结果相同。例如，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%AB%98%E6%96%AF%E7%AC%A6%E8%99%9F&#34;&gt;高斯符号&lt;/a&gt;便是幂等的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%80%E5%85%83%E9%81%8B%E7%AE%97&#34;&gt;一元运算&lt;/a&gt;的定义是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E9%81%8B%E7%AE%97&#34;&gt;二元运算&lt;/a&gt;定义的特例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In &lt;a href=&#34;https://en.wikipedia.org/wiki/Computer_science&#34;&gt;computer science&lt;/a&gt;, the term &lt;em&gt;idempotence&lt;/em&gt; may have a different meaning depending on the context in which it is applied:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in &lt;a href=&#34;https://en.wikipedia.org/wiki/Imperative_programming&#34;&gt;imperative programming&lt;/a&gt;(命令编程), a &lt;a href=&#34;https://en.wikipedia.org/wiki/Subroutine&#34;&gt;subroutine&lt;/a&gt;(子程序) with &lt;a href=&#34;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&#34;&gt;side effects&lt;/a&gt; is idempotent if the system state remains the same after one or several calls, in other words if the function from the system state space to itself associated to the subroutine is idempotent in the mathematical sense given in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Idempotence#Definition&#34;&gt;definition&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;in &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_programming&#34;&gt;functional programming&lt;/a&gt;, a &lt;a href=&#34;https://en.wikipedia.org/wiki/Pure_function&#34;&gt;pure function&lt;/a&gt; is idempotent if it is idempotent in the mathematical sense given in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Idempotence#Definition&#34;&gt;definition&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a very useful property in many situations, as it means that an operation can be repeated or retried as often as necessary without causing unintended effects. With non-idempotent operations, the algorithm may have to keep track of whether the operation was already performed or not.&lt;/p&gt;
&lt;p&gt;一个HTTP方法是&lt;strong&gt;幂等&lt;/strong&gt;的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。在正确实现的条件下，&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET&#34;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/a&gt;，&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD&#34;&gt;&lt;code&gt;HEAD&lt;/code&gt;&lt;/a&gt;，&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT&#34;&gt;&lt;code&gt;PUT&lt;/code&gt;&lt;/a&gt;和&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/DELETE&#34;&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/a&gt; 等方法都是&lt;strong&gt;幂等&lt;/strong&gt;的，而 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST&#34;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/a&gt; 方法不是。所有的 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/safe&#34;&gt;safe&lt;/a&gt; 方法也都是幂等的。&lt;/p&gt;
&lt;p&gt;幂等性只与后端服务器的实际状态有关，而每一次请求接收到的状态码不一定相同。例如，第一次调用&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/DELETE&#34;&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/a&gt; 方法有可能返回 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200&#34;&gt;&lt;code&gt;200&lt;/code&gt;&lt;/a&gt;，但是后续的请求可能会返回&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404&#34;&gt;&lt;code&gt;404&lt;/code&gt;&lt;/a&gt;。&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/DELETE&#34;&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/a&gt; 的言外之意是，开发者不应该使用&lt;code&gt;DELETE&lt;/code&gt;方法实现具有删除最后条目功能的 RESTful API。&lt;/p&gt;
&lt;p&gt;需要注意的是，服务器不一定会确保请求方法的幂等性，有些应用可能会错误地打破幂等性约束。&lt;/p&gt;
&lt;h2 id=&#34;接口幂等性&#34;&gt;接口幂等性&lt;/h2&gt;
&lt;p&gt;在分布式系统中，一般都会有重试机制。但重复机制又有一定几率出现重复的数据。例如订单系统消费了消息，但是由于网络等问题消息系统未收到反馈是否已成功处理，此时消息系统会根据配置的规则隔断时间就retry一次。但如果此时网络恢复正常，我第一次收到的消息成功处理了，这是又收到一条消息，如果没有防护措施，就有可能出现重复数据。&lt;/p&gt;
&lt;p&gt;幂等性指&lt;strong&gt;任意多次执行所产生的影响均与一次执行的影响相同。多次调用对系统的产生的影响是一样的，即对资源的作用是一样的，但是返回值允许不同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于业务中需要考虑幂等性的地方一般都是接口的重复请求，重复请求是指同一个请求因为某些原因被多次提交。导致这个情况会有几种场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前端重复提交&lt;/strong&gt;：提交订单，用户快速重复点击多次，造成后端生成多个内容重复的订单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口超时重试&lt;/strong&gt;：对于给第三方调用的接口，为了防止网络抖动或其他原因造成请求丢失，这样的接口一般都会设计成超时重试多次。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息重复消费&lt;/strong&gt;：MQ消息中间件，消息重复消费。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;幂等性实现方式&#34;&gt;幂等性实现方式&lt;/h2&gt;
&lt;h4 id=&#34;查询操作&#34;&gt;查询操作&lt;/h4&gt;
&lt;p&gt;查询一次和查询多次，在数据不变的情况下，查询结果是一样的。select是天然的幂等操作；&lt;/p&gt;
&lt;h4 id=&#34;删除操作&#34;&gt;删除操作&lt;/h4&gt;
&lt;p&gt;删除操作也是幂等的，删除一次和多次删除都是把数据删除。(注意可能返回结果不一样，删除的数据不存在，返回0，删除的数据多条，返回结果多个)&lt;/p&gt;
&lt;h4 id=&#34;唯一索引&#34;&gt;唯一索引&lt;/h4&gt;
&lt;p&gt;这个机制是&lt;strong&gt;利用了数据库的主键唯一约束的特性&lt;/strong&gt;，解决了在&lt;strong&gt;insert场景&lt;/strong&gt;时幂等问题。但主键的要求不是自增的主键，这样就需要业务&lt;strong&gt;生成全局唯一&lt;/strong&gt;的主键，之前老顾的文章也介绍过&lt;strong&gt;分布式唯一主键ID&lt;/strong&gt;的生成，可自行查阅。如果是&lt;strong&gt;分库分表场景下&lt;/strong&gt;，&lt;strong&gt;路由规则要保证相同请求下&lt;/strong&gt;，&lt;strong&gt;落地在同一个数据库和同一表中&lt;/strong&gt;，要不然&lt;strong&gt;数据库主键约束就不起效果&lt;/strong&gt;了，因为是不同的数据库和表主键不相关。因为对主键有一定的要求，这个方案就跟业务有点耦合了，&lt;strong&gt;无法用自增主键了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;防止新增脏数据。比如：支付宝的资金账户，支付宝也有用户账户，每个用户只能有一个资金账户，怎么防止给用户创建资金账户多个，那么给资金账户表中的用户ID加唯一索引，所以一个用户新增成功一个资金账户记录。要点：唯一索引或唯一组合索引来防止新增数据存在脏数据。&lt;/p&gt;
&lt;h4 id=&#34;去重表机制&#34;&gt;去重表机制&lt;/h4&gt;
&lt;p&gt;往去重表里插入数据的时候，利用数据库的唯一索引特性，保证唯一的逻辑。唯一序列号可以是一个字段，也可以是多字段的唯一性组合。&lt;/p&gt;
&lt;p&gt;这里要注意的是，&lt;strong&gt;去重表和业务表应该在同一库中&lt;/strong&gt;，这样就保证了在同一个事务，即使业务操作失败了，也会把去重表的数据回滚。&lt;strong&gt;这个很好的保证了数据一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外，使用数据库防重表的方式它有个严重的缺点，那就是系统容错性不高，如果幂等表所在的数据库连接异常或所在的服务器异常，则会导致整个系统幂等性校验出问题。&lt;/p&gt;
&lt;h4 id=&#34;token机制&#34;&gt;Token机制&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/Token-20201112171801.jpeg&#34; alt=&#34;Token&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务端提供了发送token的接口，我们在分析业务的时候，哪些是存在幂等问题的，就必须在执行业务前，前去获取token，服务器会把token保存到redis中；&lt;/li&gt;
&lt;li&gt;然后调用业务接口请求时，把token携带过去，一般反正请求头部；&lt;/li&gt;
&lt;li&gt;服务器判断token是否存在redis中，存在表示第一次请求，可以继续执行业务，业务完成后，&lt;strong&gt;需要把redis中的token删掉&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;如果判断token不存在redis中，就表示是重复操作，直接返回重复标记给client，这样就保证了业务代码，不被重复执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务器端第一次验证相同过后，会将session中的Token值更新下，若用户重复提交，第二次的验证判断将失败，因为用户提交的表单中的Token没变，但服务器端session中Token已经改变了。&lt;/p&gt;
&lt;p&gt;这就是token+redis的幂等方案。适用于绝大部分场景。主要针对前端重复连续多次点击的情况，网上也有另一个版本的Token方案，不同的地方是：&lt;strong&gt;网上方案检验token存在后，就立刻删除token，再进行业务处理&lt;/strong&gt;。而上面的方式是检验token存在后，先进行业务处理，再删除token。&lt;/p&gt;
&lt;p&gt;网上方案的缺点是&lt;strong&gt;先删除token&lt;/strong&gt;，这是出现系统问题导致&lt;strong&gt;业务处理出现异常&lt;/strong&gt;，业务处理没有成功，接口调用方也没有获取到明确的结果，然后&lt;strong&gt;进行重试，但token已经删除掉了&lt;/strong&gt;，服务端判断token不存在，&lt;strong&gt;认为是重复请求，就直接返回了&lt;/strong&gt;，无法进行业务处理了。&lt;/p&gt;
&lt;p&gt;而上面的方案&lt;strong&gt;后删除token&lt;/strong&gt;也是会存在问题的，如果进行业务处理成功后，删除redis中的token失败了，这样就导致了有可能会发生重复请求，因为token没有被删除。&lt;/p&gt;
&lt;h4 id=&#34;乐观锁机制&#34;&gt;乐观锁机制&lt;/h4&gt;
&lt;p&gt;乐观锁只是在更新数据那一刻锁表，其他时间不锁表，所以相对于悲观锁，效率更高。乐观锁的实现方式多种多样可以通过version或者其他状态条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过版本号实现update table_xxx set name=#name#,version=version+1 where version=#version#；&lt;/li&gt;
&lt;li&gt;通过条件限制 update table_xxx set avai_amount=avai_amount-#subAmount# where avai_amount-#subAmount# &amp;gt;= 0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;加上了版本号后，就让此计算赋值型业务，具备了幂等性。&lt;/p&gt;
&lt;p&gt;要求：quality-#subQuality# &amp;gt;= ，这个情景适合不用版本号，只更新是做数据安全校验，适合库存模型，扣份额和回滚份额，性能更高。&lt;/p&gt;
&lt;p&gt;乐观锁缺点：在操作业务前，需要先查询出当前的version版本。&lt;/p&gt;
&lt;h4 id=&#34;分布式锁&#34;&gt;分布式锁&lt;/h4&gt;
&lt;p&gt;如果是分布是系统，构建全局唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统(redis或zookeeper)，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。要点：某个长流程处理过程要求不能并发执行，可以在流程执行之前根据某个标志(用户ID+后缀等)获取分布式锁，其他流程执行时获取锁就会失败，也就是同一时间该流程只能有一个能执行成功，执行完成后，释放分布式锁(分布式锁要第三方系统提供)。&lt;/p&gt;
&lt;h4 id=&#34;状态机&#34;&gt;状态机&lt;/h4&gt;
&lt;p&gt;对于很多业务有一个业务流转状态的，每个状态都有前置状态和后置状态，以及最后的结束状态。例如流程的待审批，审批中，驳回，重新发起，审批通过，审批拒绝。订单的待提交，待支付，已支付，取消。&lt;/p&gt;
&lt;p&gt;在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。注意：订单等单据类业务，存在很长的状态流转，一定要深刻理解状态机，对业务系统设计能力提高有很大帮助。&lt;/p&gt;
&lt;h4 id=&#34;select--insert&#34;&gt;select + insert&lt;/h4&gt;
&lt;p&gt;并发不高的后台系统，或者一些任务JOB，为了支持幂等，支持重复执行，简单的处理方法是，先查询下一些关键数据，判断是否已经执行过，再进行业务处理，就可以了。注意：核心高并发流程不要用这种方法。&lt;/p&gt;
&lt;h4 id=&#34;对外提供接口的api如何保证幂等&#34;&gt;对外提供接口的api如何保证幂等&lt;/h4&gt;
&lt;p&gt;如银联提供的付款接口：需要接入商户提交付款请求时附带：source来源，seq序列号；source+seq在数据库里面做唯一索引，防止多次付款(并发时，只能处理一个请求) 。
重点：对外提供接口为了支持幂等调用，接口有两个字段必须传，一个是来源source，一个是来源方序列号seq，这个两个字段在提供方系统里面做联合唯一索引，这样当第三方调用时，先在本方系统里面查询一下，是否已经处理过，返回相应处理结果；没有处理过，进行相应处理，返回结果。注意，为了幂等友好，一定要先查询一下，是否处理过该笔业务，不查询直接插入业务系统，会报错，但实际已经处理了。&lt;/p&gt;
- https://www.openheart.icu/cs/idempotent/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Dependency Injection</title>
        <link>https://www.openheart.icu/cs/dependency-injection/</link>
        <pubDate>Thu, 15 Oct 2020 23:28:00 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/dependency-injection/</guid>
        <description>42th openheart https://www.openheart.icu/cs/dependency-injection/ -&lt;h1 id=&#34;dependency-injection&#34;&gt;Dependency Injection&lt;/h1&gt;
&lt;h2 id=&#34;ioc&#34;&gt;IOC&lt;/h2&gt;
&lt;p&gt;Spring 框架为Java提供了IOC（Inversion of Control），只是提供了一个服务容器，程序控制我们需要的对象，而不是在使用对象时我们亲自直接控制。既然提到了IOC就详细了解一下这种设计思想：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/Coupling-20200808133032885.png&#34; alt=&#34;Coupling-20200808133032885.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;为了解决对象间耦合度过高的问题，软件专家Michael Mattson提出了IOC理论，用来实现对象之间的“解耦”。&lt;/p&gt;
&lt;p&gt;控制反转是一种是面向对象编程中的一种设计原则，用来减低计算机代码之间的耦合度。其基本思想是：借助于“第三方”实现具有依赖关系的对象之间的解耦。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/IOC-20200808134840983.png&#34; alt=&#34;IOC-20200808134840983&#34;&gt;&lt;/p&gt;
&lt;p&gt;软件系统在没有引入IOC容器之前，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。&lt;/p&gt;
&lt;p&gt;软件系统在引入IOC容器之后，这种情形就完全改变了，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。&lt;/p&gt;
&lt;p&gt;通过前后的对比，我们不难看出来：对象A获得依赖对象B的过程，由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。&lt;/p&gt;
&lt;p&gt;控制反转可以用来减低计算机代码之间的耦合度。 其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。&lt;/p&gt;
&lt;h2 id=&#34;dip&#34;&gt;DIP&lt;/h2&gt;
&lt;p&gt;要了解控制反转( Inversion of Control ), 我觉得有必要先了解软件设计的一个重要思想：依赖倒置原则（Dependency Inversion Principle ）。&lt;/p&gt;
&lt;p&gt;依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。 简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B&#34;&gt;面向对象编程&lt;/a&gt;领域中，&lt;strong&gt;依赖反转原则&lt;/strong&gt;（Dependency inversion principle，DIP）是指一种特定的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%80%A6%E5%90%88%E6%80%A7_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)&#34;&gt;解耦&lt;/a&gt;（传统的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%80%A6%E5%90%88%E6%80%A7_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)&#34;&gt;依赖&lt;/a&gt;关系创建在高层次上，而具体的策略设置则应用在低层次的模块上）形式，使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象。&lt;/p&gt;
&lt;p&gt;该原则规定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;高层次的模块不应该依赖于低层次的模块，两者都应该依赖于&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%8C%96_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)&#34;&gt;抽象接口&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该原则颠倒了一部分人对于面向对象设计的认识方式。如高层次和低层次对象都应该依赖于相同的抽象接口。控制反转就是依赖倒置原则的一种代码设计的思路。具体采用的方法就是所谓的依赖注入（Dependency Injection）。&lt;/p&gt;
&lt;p&gt;设计模式中的五大原则 &lt;a href=&#34;https://zh.wikipedia.org/wiki/SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)&#34;&gt;SOLID&lt;/a&gt; 中的 D 指代的就是依赖反转原则。&lt;/p&gt;
&lt;p&gt;eg: &lt;a href=&#34;https://flylib.com/books/en/4.444.1.71/1/&#34;&gt;Lamp and Button：A Simple DIP Example&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;di&#34;&gt;DI&lt;/h2&gt;
&lt;h3 id=&#34;ioc与di的区别&#34;&gt;IOC与DI的区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;控制反转是一种在软件工程中解耦合的思想，调用类只依赖接口，而不依赖具体的实现类，减少了耦合。控制权交给了容器，在运行的时候才由容器决定将具体的实现动态的“注入”到调用类的对象中。&lt;/li&gt;
&lt;li&gt;依赖注入是一种设计模式，可以作为控制反转的一种实现方式。依赖注入就是将实例变量传入到一个对象中去(Dependency injection means giving an object its instance variables)。&lt;/li&gt;
&lt;li&gt;通过IOC框架，类A依赖类B的强耦合关系可以在运行时通过容器建立，也就是说把创建B实例的工作移交给容器，类A只管使用就可以。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.net core 框架自带&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iserviceprovider&#34;&gt;IServiceProvider&lt;/a&gt;以实现依赖注入&lt;/p&gt;
&lt;h3 id=&#34;lifetime&#34;&gt;LifeTime&lt;/h3&gt;
&lt;p&gt;MSDN指出了有关&lt;code&gt;AddTransient&lt;/code&gt;/&lt;code&gt;AddScoped&lt;/code&gt;/&lt;code&gt;AddSingleton&lt;/code&gt;的区别，并带有一个小示例：&lt;/p&gt;
&lt;p&gt;创建一个Operation接口然后分别对应实现上述三种依赖注入，为Operation添加属性&lt;code&gt;Guid OperationId&lt;/code&gt;，凭借此属性值，我们可以在逻辑层与controller控制器中分别implement，对比两处implement的OperationId可以发现这三种模式的lifetime。（&lt;em&gt;The &lt;code&gt;IOperationSingletonInstance&lt;/code&gt; service is using a specific instance with a known ID of &lt;code&gt;Guid.Empty&lt;/code&gt;. It&amp;rsquo;s clear when this type is in use (its GUID is all zeroes).&lt;/em&gt;）&lt;/p&gt;
&lt;p&gt;IOperation：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; IOperation
{
  Guid OperationId { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; IOperationTransient : IOperation
{
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; IOperationScoped : IOperation
{
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; IOperationSingleton : IOperation
{
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; IOperationSingletonInstance : IOperation
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Operation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Operation&lt;/span&gt; : IOperation, IOperationTransient, IOperationScoped, IOperationSingleton, IOperationSingletonInstance
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Guid OperationId { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Operation(Guid operationId)
  {
    OperationId = operationId;
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Operation() : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;(Guid.NewGuid())
  {
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OperationSercice:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;OperationService&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; IOperationTransient TransientOperation { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; IOperationScoped ScopedOperation { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; IOperationSingleton SingletonOperation { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; IOperationSingletonInstance SingletonInstanceOperation { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; OperationService(IOperationTransient transientOperation,
                          IOperationScoped scopedOperation,
                          IOperationSingleton singletonOperation,
                          IOperationSingletonInstance instanceOperation)
  {
    TransientOperation = transientOperation;
    ScopedOperation = scopedOperation;
    SingletonOperation = singletonOperation;
    SingletonInstanceOperation = instanceOperation;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OperationController:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;OperationsController&lt;/span&gt; : Controller
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; OperationService _operationService;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; IOperationTransient _transientOperation;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; IOperationScoped _scopedOperation;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; IOperationSingleton _singletonOperation;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; IOperationSingletonInstance _singletonInstanceOperation;

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; OperationsController(OperationService operationService,
                              IOperationTransient transientOperation,
                              IOperationScoped scopedOperation,
                              IOperationSingleton singletonOperation,
                              IOperationSingletonInstance singletonInstanceOperation)
  {
    _operationService = operationService;
    _transientOperation = transientOperation;
    _scopedOperation = scopedOperation;
    _singletonOperation = singletonOperation;
    _singletonInstanceOperation = singletonInstanceOperation;
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; IActionResult Index()
  {
    &lt;span style=&#34;color:#228b22&#34;&gt;// viewbag contains controller-requested services
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    ViewBag.Transient = _transientOperation;
    ViewBag.Scoped = _scopedOperation;
    ViewBag.Singleton = _singletonOperation;
    ViewBag.SingletonInstance = _singletonInstanceOperation;

    &lt;span style=&#34;color:#228b22&#34;&gt;// operation service has its own requested services
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    ViewBag.Service = _operationService;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; View();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两次请求对比如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/DI-20200809140803.png&#34; alt=&#34;DI-20200809140803&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/DI-20200809140837.png&#34; alt=&#34;DI-20200809140837&#34;&gt;&lt;/p&gt;
&lt;p&gt;观察在请求中以及请求之间的哪个&lt;code&gt;OperationId&lt;/code&gt;值有所不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transient 对象总是不同的; 每个控制器和每个服务都提供了一个新的实例。&lt;/li&gt;
&lt;li&gt;Scoped 对象在请求中是相同的，但在不同的请求中是不同的。&lt;/li&gt;
&lt;li&gt;Singleton 对象对于每个对象和每个请求都是一样的（不管&lt;code&gt;ConfigureServices&lt;/code&gt;中是否提供一个实例）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BE%9D%E8%B5%96%E5%8F%8D%E8%BD%AC%E5%8E%9F%E5%88%99&#34;&gt;依赖反转原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/07af9dbbbc4b&#34;&gt;控制反转（IOC）与依赖注入（DI）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/91218464&#34;&gt;.NET Core中的IoC和DI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.martinfowler.com/articles/injection.html&#34;&gt;Inversion of Control Containers and the Dependency Injection pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flylib.com/books/en/4.444.1.71/1/&#34;&gt;A Simple DIP Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-3.1&#34;&gt;Dependency injection in ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/cs/dependency-injection/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Dot Net Issue</title>
        <link>https://www.openheart.icu/cs/dot-net-issue/</link>
        <pubDate>Thu, 10 Sep 2020 11:00:35 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/dot-net-issue/</guid>
        <description>42th openheart https://www.openheart.icu/cs/dot-net-issue/ -&lt;h1 id=&#34;hot-reload-razor-views&#34;&gt;Hot-Reload Razor Views&lt;/h1&gt;
&lt;p&gt;在mac上使用Rider创建 .net core mvc项目后发现run和debug，都无法热加载razor页面。经过Google后发现，这并不是Rider的bug，这得需要知道mvc到底是如何运行的（&lt;em&gt;it&amp;rsquo;s fundamentally how ASP.NET MVC Core works&lt;/em&gt;）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Razor files are compiled at both &lt;strong&gt;build&lt;/strong&gt; and &lt;strong&gt;publish&lt;/strong&gt; time using the Razor SDK. Runtime compilation may be optionally enabled by configuring your application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用Razor SDK在构建和发布时都会编译Razor文件。通过配置您的应用程序，可以选择启用&lt;strong&gt;运行时编译&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note that run time is not included in this list by default.&lt;/strong&gt; To change this behaviour:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the Nuget package &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation/&#34;&gt;&lt;code&gt;Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Change your &lt;code&gt;Startup.ConfigureServices&lt;/code&gt; code to include runtime compilation:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ConfigureServices(IServiceCollection services)
{
  services
    .AddControllersWithViews()
    .AddRazorRuntimeCompilation();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/58300922/how-to-enable-the-view-hot-reloading-in-rider&#34;&gt;How to enable the view hot-reloading in Rider? &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/zh-cn/aspnet/core/mvc/views/view-compilation?view=aspnetcore-3.0&amp;amp;tabs=visual-studio#runtime-compilation&#34;&gt;Razor file compilation in ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;watch-out-project-on-rider&#34;&gt;Watch out Project On Rider&lt;/h1&gt;
&lt;p&gt;To let Project hot-reload, we can use the &amp;ldquo;Before launch&amp;rdquo; option as a run configuration to make this happen. To do so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select Run -&amp;gt; Edit Configuration from the menu options&lt;/li&gt;
&lt;li&gt;Add a new &lt;code&gt;Before launch&lt;/code&gt;Click the + icon and select the &amp;ldquo;Run Executnal Tool &amp;quot; option from the list&lt;/li&gt;
&lt;li&gt;In the options that are displayed, provide the following&amp;hellip;
&lt;ul&gt;
&lt;li&gt;Name: Watch (or whatever you prefer)&lt;/li&gt;
&lt;li&gt;Exe path: /usr/local/share/dotnet/dotnet&lt;/li&gt;
&lt;li&gt;Program Arguments: watch run&lt;/li&gt;
&lt;li&gt;Working directory: [path to your project where .csproj file resides]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;OK&amp;rdquo; to apply/save the changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;reference-1&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/46349038/jetbrains-rider-run-with-watch&#34;&gt;JetBrains Rider run with watch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;newguid&#34;&gt;NewGuid()&lt;/h1&gt;
&lt;h2 id=&#34;guid&#34;&gt;GUID&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;全局唯一标识符&lt;/strong&gt;（Globally Unique &lt;strong&gt;Id&lt;/strong&gt;entifier，缩写：&lt;strong&gt;GUID&lt;/strong&gt;；发音为/ˈɡuːɪd/或/ˈɡwɪd/）是一种由&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95&#34;&gt;算法&lt;/a&gt;生成的唯一标识，通常表示成32个16进制数字（0－9，A－F）组成的字符串，如：&lt;code&gt;{21EC2020-3AEA-1069-A2DD-08002B30309D}&lt;/code&gt;，它实质上是一个128位长的二进制整数。GUID一词有时也专指微软对UUID标准的实现。&lt;/p&gt;
&lt;p&gt;GUID的主要目的是产生完全唯一的数字。在理想情况下，任何计算机和计算机集群都不会生成两个相同的GUID。GUID的总数也足够大，达到了2128（3.4×1038）个，所以随机生成两个相同GUID的可能性是非常小的，但并不为0。所以，用于生成GUID的算法通常都加入了非随机的参数（时间），以保证这种重复的情况不会发生。&lt;/p&gt;
&lt;p&gt;GUID 主要用于在拥有多个节点、多台计算机的网络或系统中，分配必须具有唯一性的标识符。在 Windows 平台上，GUID 应用非常广泛：注册表、类及接口标识、数据库、甚至自动生成的机器名、目录名等。&lt;/p&gt;
&lt;p&gt;与自增长id相比较：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;GUID&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1. GUID过长，看表现形式，至少都有32位，长的38位，浪费存储空间 2. GUID是根据硬件设备相关ID以及时间戳生成的 3. GUID不利于检索、外键关联&lt;/td&gt;
&lt;td&gt;1. 一般来说不担心有冲突的影响，而且，根据GUID的生成规则，还能大致知道生成的计算机硬件设备、时间等信息（但这个有多少意义呢）2. 能在业务层就知道目标ID，而不是数据提交给数据库系统后才确定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;自增长&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1. 多数据库同步、读写分离十分不方便。&lt;/td&gt;
&lt;td&gt;1. 使用简单&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;systemguidnewguidtostring&#34;&gt;System.Guid.NewGuid().ToString()&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Guid.NewGuid()是指生成唯一码的规则&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;systemguidnewguidtostringformat&#34;&gt;System.Guid.NewGuid().ToString(format)&lt;/h3&gt;
&lt;p&gt;说明符 返回值的格式&lt;/p&gt;
&lt;p&gt;N 32 位字符：xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/p&gt;
&lt;p&gt;D 由连字符分隔的 32 位数字：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&lt;/p&gt;
&lt;p&gt;B 括在大括号中、由连字符分隔的 32 位数字：{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&lt;/p&gt;
&lt;p&gt;P 括在圆括号中、由连字符分隔的 32 位数字：(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)&lt;/p&gt;
&lt;p&gt;Guid.NewGuid().ToString()		  : 1f13a943-4c7e-4bfc-aac5-935886591424&lt;/p&gt;
&lt;p&gt;Guid.NewGuid().ToString(&amp;ldquo;N&amp;rdquo;)	: 3a81013f9ee549b38f11ee3d50f5bd78&lt;/p&gt;
&lt;p&gt;Guid.NewGuid().ToString(&amp;ldquo;D&amp;rdquo;)	: c4219375-c2c8-4639-86e8-8d910ed12186 &amp;ndash; 默认为：D&lt;/p&gt;
&lt;p&gt;Guid.NewGuid().ToString(&amp;ldquo;B&amp;rdquo;)	: {a793927d-9a1b-4d25-9562-0a59522db9c0}&lt;/p&gt;
&lt;p&gt;Guid.NewGuid().ToString(&amp;ldquo;P&amp;rdquo;)	: (a99839b9-da94-40fd-87a5-4a5e73677b1f)&lt;/p&gt;
&lt;p&gt;Guid.NewGuid().ToString(&amp;ldquo;X&amp;rdquo;)	: {0xb294a44e,0x43d9,0x4b60,{0xb5,0xb9,0x32,0x29,0xae,0x46,0x45,0x17}}&lt;/p&gt;
&lt;p&gt;&lt;em&gt;如果在程序中使用&lt;strong&gt;D&lt;/strong&gt;，则需要注意数据库字段长应为&lt;code&gt;36&lt;/code&gt;而不是32&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;model--entity--dto--viewmodel&#34;&gt;model &amp;amp; entity &amp;amp; dto &amp;amp; viewmodel&lt;/h1&gt;
&lt;h2 id=&#34;model&#34;&gt;model&lt;/h2&gt;
&lt;p&gt;model是一个模型，里面装了各种数据，将一个model传递给view，在试图页面就可以使用model里面的数据来呈现到页面上。&lt;/p&gt;
&lt;h2 id=&#34;entity&#34;&gt;entity&lt;/h2&gt;
&lt;p&gt;entity是实体，就是和数据表一一对应的，一个实体一张表&lt;/p&gt;
&lt;p&gt;官方的demo没有entity这个说法，他只有model，model就是表，也是传递给view的model，就是说他的model即是model又是entity。而我们实际运用需要将model分成ViewModel和Entity，甚至还要加入Dto。&lt;/p&gt;
&lt;h2 id=&#34;viewmodel&#34;&gt;viewmodel&lt;/h2&gt;
&lt;p&gt;MSDOC详细介绍页面直接返回一个model，这个model就是表中的一条数据。但是在我们实际建站需求中页面上怎么可能只需要一条数据就完了，很多时候还需要其他的数据。比如一个&lt;code&gt;List&amp;lt;entity&amp;gt;&lt;/code&gt;，此时就需要使用ViewModel。&lt;/p&gt;
&lt;h2 id=&#34;dtodata-transfer-object&#34;&gt;dto(Data transfer object)&lt;/h2&gt;
&lt;p&gt;entity里包含的是表所有的字段，但在实际应用的时候我们可能不会使用到所有的字段，可能只需要一个名称和编号即可，所以就需要使用dto（数据传输对象）。此时ViewModel就可以使用&lt;code&gt;List&amp;lt;dto&amp;gt;&lt;/code&gt;返回我们部分数据而不是整个表数据。&lt;/p&gt;
&lt;h2 id=&#34;final&#34;&gt;Final&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;我们可以花一部分精力去考虑这方面问题，但也不用纠结太多，头大且对项目也没太大帮助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-2&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/25256772/answer/194493331&#34;&gt;什么时候用Model，什么时候用Entity？ - 虚若影的回答 - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/25256772/answer/30290376&#34;&gt;什么时候用Model，什么时候用Entity？ - 赵劼的回答 - 知乎&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;iviewlocationexpander&#34;&gt;IViewLocationExpander&lt;/h1&gt;
&lt;p&gt;实现&lt;code&gt;IViewLocationExpander&lt;/code&gt;接口，&lt;code&gt;location&lt;/code&gt;为build时程序检查的views层路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ViewLocationExpander&lt;/span&gt;: IViewLocationExpander
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; IEnumerable&amp;lt;String&amp;gt; ExpandViewLocations(ViewLocationExpanderContext context, IEnumerable&amp;lt;String&amp;gt; locations)
  {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (RazorViewEngine.GetNormalizedRouteValue(context.ActionContext, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;area&amp;#34;&lt;/span&gt;) != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
    {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;[]
      {
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/Views/{2}/Shared/{0}.cshtml&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/Views/{2}/{1}/{0}.cshtml&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/Views/Shared/{0}.cshtml&amp;#34;&lt;/span&gt;
      };
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;[]
    {
      &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/Views/{1}/{0}.cshtml&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/Views/Shared/{0}.cshtml&amp;#34;&lt;/span&gt;
    };
  }
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; PopulateValues(ViewLocationExpanderContext context)
  {
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在Startup注册我们的implement&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;services.AddMvc()
  .AddRazorOptions(options =&amp;gt; options.ViewLocationExpanders.Add(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ViewLocationExpander()));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference-3&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.c-sharpcorner.com/article/expanding-razor-view-location-and-sub-areas-in-asp-net-core/&#34;&gt;Expanding Razor View Location And Sub Areas In ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NonFactors/AspNetCore.Template/blob/378d64f6900f0cc95eee921b5caf81d2bc9efc11/src/MvcTemplate.Components/Mvc/Razor/ViewLocationExpander.cs&#34;&gt;AspNetCore.Template/src/MvcTemplate.Components/Mvc/Razor/ViewLocationExpander.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;error-the-database-provider-attempted-to-register-an-implementation&#34;&gt;Error: The database provider attempted to register an implementation&amp;hellip;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;The database provider attempted to register an implementation of the &amp;lsquo;IRelationalTypeMappingSource&amp;rsquo; service. This is not a service defined by EF and as such must be registered as a provider-specific service using the &amp;lsquo;TryAddProviderSpecificServices&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;检查一下EF版本！！！&lt;/p&gt;
&lt;p&gt;You are mixing different versions of EF Core!!!&lt;/p&gt;
&lt;h2 id=&#34;reference-4&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/npgsql/efcore.pg/issues/1441&#34;&gt;Cannot register IRelationalTypeMappingSource #1441&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;framework-design-guidelines&#34;&gt;Framework Design Guidelines&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines&#34;&gt;Naming Guidelines&lt;/a&gt;
Provides guidelines for naming assemblies, namespaces, types, and members in class libraries.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/type&#34;&gt;Type Design Guidelines&lt;/a&gt;
Provides guidelines for using static and abstract classes, interfaces, enumerations, structures, and other types.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/member&#34;&gt;Member Design Guidelines&lt;/a&gt;
Provides guidelines for designing and using properties, methods, constructors, fields, events, operators, and parameters.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/designing-for-extensibility&#34;&gt;Designing for Extensibility&lt;/a&gt;
Discusses extensibility mechanisms such as subclassing, using events, virtual members, and callbacks, and explains how to choose the mechanisms that best meet your framework&amp;rsquo;s requirements.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/exceptions&#34;&gt;Design Guidelines for Exceptions&lt;/a&gt;
Describes design guidelines for designing, throwing, and catching exceptions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/usage-guidelines&#34;&gt;Usage Guidelines&lt;/a&gt;
Describes guidelines for using common types such as arrays, attributes, and collections, supporting serialization, and overloading equality operators.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/common-design-patterns&#34;&gt;Common Design Patterns&lt;/a&gt;
Provides guidelines for choosing and implementing dependency properties.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-5&#34;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/&#34;&gt;Framework Design Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;analyze-code-in-visual-studio&#34;&gt;Analyze code in Visual Studio&lt;/h1&gt;
&lt;h2 id=&#34;source-code-analysis&#34;&gt;Source code analysis&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;.NET Compiler Platform (Roslyn) Analyzers inspect your C# or Visual Basic code for style, quality, maintainability, design, and other issues. This inspection or analysis is done during design time in all open files.&lt;/p&gt;
&lt;p&gt;Analyzers can be divided into the following groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options?preserve-view=true&amp;amp;view=vs-2019#convention-categories&#34;&gt;Code style&lt;/a&gt; analyzers are built in to Visual Studio.&lt;/strong&gt; The diagnostic ID, or code, for these analyzers is of the format IDExxxx, for example, IDE0067. You can configure preferences in the &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup?view=vs-2019&#34;&gt;text editor options page&lt;/a&gt; or in an &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options&#34;&gt;EditorConfig file&lt;/a&gt;. Starting in .NET 5.0, code style analyzers are included with the .NET SDK and can be strictly enforced as build warnings or errors. For more information, see &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fundamentals/productivity/code-analysis#code-style-analysis&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/index&#34;&gt;Code quality&lt;/a&gt; analyzers are now included with the .NET 5 SDK and enabled by default. The diagnostic ID, or code, for these analyzers is of the format CAxxxx, for example, CA1822. For more information, see &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fundamentals/productivity/code-analysis#code-quality-analysis&#34;&gt;Overview of .NET code quality analysis&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Third party analyzers can be installed as a NuGet package or a Visual Studio extension. Third party analyzers, such as &lt;a href=&#34;https://www.nuget.org/packages/StyleCop.Analyzers/&#34;&gt;StyleCop&lt;/a&gt;, &lt;a href=&#34;https://www.nuget.org/packages/Roslynator.Analyzers/&#34;&gt;Roslynator&lt;/a&gt;, &lt;a href=&#34;https://www.nuget.org/packages/xunit.analyzers/&#34;&gt;XUnit Analyzers&lt;/a&gt;, and &lt;a href=&#34;https://www.nuget.org/packages/SonarAnalyzer.CSharp/&#34;&gt;Sonar Analyzer&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;legacy-analysis-for-managed-code&#34;&gt;Legacy analysis for managed code&lt;/h2&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;controversy&#34;&gt;Controversy&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fields Naming between &lt;em&gt;_lowerCamelCase&lt;/em&gt; and &lt;em&gt;PascalCasing&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;_camelCase&lt;/code&gt; for fields is common from what I&amp;rsquo;ve seen (it&amp;rsquo;s what we use at our place and Microsoft &lt;a href=&#34;https://github.com/dotnet/runtime/blob/main/.editorconfig&#34;&gt;prefer for the .NET Runtime&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My personal justification for using this standard is that is is easier to type &lt;code&gt;_&lt;/code&gt; to identify a private field than &lt;code&gt;this.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Foo(String a, String b)
{
    _a = a;
    _b = b;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Versus&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Foo(String a, String b)
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.a = a;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.b = b;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I find the first much easier to type and it prevents me from ever accidentally assigning to the parameter called &lt;code&gt;a&lt;/code&gt; instead of &lt;code&gt;this.a&lt;/code&gt;. This is reinforced by a &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd264939.aspx&#34;&gt;Code Analysis&lt;/a&gt; Maintainability Rule that states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms182216.aspx&#34;&gt;CA1500&lt;/a&gt; Variable names should not match field names.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My other reason, is that &lt;code&gt;this.&lt;/code&gt; is optional (Visual Studio / Code prompts you to remove them) if it doesn&amp;rsquo;t collide with a local variable or parameter name, making knowing which variable you are using harder. If you have an &lt;code&gt;_&lt;/code&gt; at the start of all private fields, then you always know which is a field and which is has local scope.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Tabs or Spaces&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4 spaces or tabs, it&amp;rsquo;s a question.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abbreviation&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a convention, and it specifies initial uppercase, the rest lowercase, for all acronyms that are more than 2 characters long. Hence &lt;code&gt;HttpContext&lt;/code&gt; and &lt;code&gt;ClientID&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;a href=&#34;https://rads.stackoverflow.com/amzn/click/com/0321545613&#34;&gt;Framework Design Guidelines&lt;/a&gt;&amp;rdquo; 2nd edition by Krzysztof Cwalina and Brad Abrams pp.40-42&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1.2 Capitalizing Acronyms&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt; capitalize both characters on two-character acronyms, except the first word of a camel-cased identifier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;System.IO
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; StartIO(Stream ioStream)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;DO&lt;/strong&gt; capitalize only the first character of acronyms with three or more characters, except the first word of a camel-cased identifier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;System.Xml
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; ProcessHtmlTag(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; htmlTag)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; capitalize any of the characters of any acronyms, whatever their length, at the beginning of a camel-cased identifier.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;using-abbreviations-and-acronyms&#34;&gt;Using Abbreviations and Acronyms&lt;/h2&gt;
&lt;p&gt;❌ DO NOT use abbreviations or contractions as part of identifier names.&lt;/p&gt;
&lt;p&gt;For example, use &lt;code&gt;GetWindow&lt;/code&gt; rather than &lt;code&gt;GetWin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;❌ DO NOT use any acronyms that are not widely accepted, and even if they are, only when necessary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Guideline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;80 characters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NameSpace&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Should the folders in a solution match the namespace?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CRUD Method Naming
&lt;ul&gt;
&lt;li&gt;CreateXXXX or InsertXXXX&lt;/li&gt;
&lt;li&gt;ReadXXXX or GetXXXXX&lt;/li&gt;
&lt;li&gt;UpdateXXXX&lt;/li&gt;
&lt;li&gt;DeleteXXXX&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference-6&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/code-quality&#34;&gt;Analyze code in Visual Studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview&#34;&gt;.NET source code analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3186853/c-sharp-field-naming-guidelines&#34;&gt;C# Field Naming Guidelines?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/StyleCop/StyleCop&#34;&gt;StyleCop/StyleCop: Analyzes C# source code to enforce a set of style and consistency rules. &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions&#34;&gt;C# Coding Conventions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions#capitalizing-compound-words-and-common-terms&#34;&gt;Capitalizing Compound Words and Common Terms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/479596/what-makes-code-legacy&#34;&gt;What makes code legacy?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/148677/why-is-80-characters-the-standard-limit-for-code-width&#34;&gt;Why is 80 characters the &amp;lsquo;standard&amp;rsquo; limit for code width?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/4664/should-the-folders-in-a-solution-match-the-namespace&#34;&gt;Should the folders in a solution match the namespace?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/360321/crud-vs-agud-vs-afud-whats-your-naming-convention-of-preference&#34;&gt;what&amp;rsquo;s your naming convention of preference&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;http-error-50019---internal-server-error&#34;&gt;HTTP Error 500.19 - Internal Server Error&lt;/h1&gt;
&lt;p&gt;The requested page cannot be accessed because the related configuration data for the page is invalid.&lt;/p&gt;
&lt;h2 id=&#34;detailed-error-information&#34;&gt;Detailed Error Information:&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Module&lt;/th&gt;
&lt;th&gt;IIS Web Core&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Notification&lt;/td&gt;
&lt;td&gt;BeginRequest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Handler&lt;/td&gt;
&lt;td&gt;Not yet determined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Error Code&lt;/td&gt;
&lt;td&gt;0x80070021&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Config Error&lt;/td&gt;
&lt;td&gt;This configuration section cannot be used at this path. This happens when the section is locked at a parent level. Locking is either by default (overrideModeDefault=&amp;ldquo;Deny&amp;rdquo;), or set explicitly by a location tag with overrideMode=&amp;ldquo;Deny&amp;rdquo; or the legacy allowOverride=&amp;ldquo;false&amp;rdquo;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Heres what worked for me, had a similar problem on my new laptop which had windows 10.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search for &amp;ldquo;Turn windows features on or off&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Internet Information Services&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;World Wide Web Services&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Check &amp;ldquo;Application Development Features&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enable all items under this&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;try again, now it should work.&lt;/p&gt;
&lt;h2 id=&#34;reference-7&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/34199976/iis-config-error-this-configuration-section-cannot-be-used-at-this-path&#34;&gt;IIS Config Error - This configuration section cannot be used at this path&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;excel-break-long-lines-when-importing-csv-filehttpsstackoverflowcomquestions43976092excel-break-long-lines-when-importing-csv-file&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/43976092/excel-break-long-lines-when-importing-csv-file&#34;&gt;Excel break long lines when importing csv file&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Each instance of Microsoft Excel 2007, Excel 2010, and Excel 2013 32-bit is limited to 2 gigabyte (GB) of memory (internal heap space). &lt;strong&gt;Each instance is also limited to 32,760 source cells&lt;/strong&gt; when you perform a smart fill operation. When you copy or fill large sections of a worksheet, one or both of these limitations may affect the result.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-8&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/office/troubleshoot/excel/copy-formulas-over-large-area&#34;&gt;&amp;ldquo;Not enough memory&amp;rdquo; when you copy formulas over large area in Excel&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;httplistener-access-deniedhttpsstackoverflowcomquestions4019466httplistener-access-denied&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/4019466/httplistener-access-denied&#34;&gt;HttpListener Access Denied&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;netsh http add urlacl &lt;span style=&#34;color:#00688b&#34;&gt;url&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://+:3032/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#00688b&#34;&gt;user&lt;/span&gt;=everyone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Documentation is &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms733768.aspx&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;internalsvisibleto&#34;&gt;internalsvisibleto&lt;/h1&gt;
&lt;p&gt;To make interal type class/method or other object be visible in Tests project. In this way, we can use those object in our Unit Test.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[assembly: InternalsVisibleTo(&amp;#34;UnitTests&amp;#34;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;.csproj:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-XML&#34; data-lang=&#34;XML&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;InternalsVisibleToSuffix&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.Tests&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt; 
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference-9&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.internalsvisibletoattribute?view=net-5.0&#34;&gt;InternalsVisibleToAttribute Class&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1211707/how-to-access-classes-in-another-assembly-for-unit-testing-purposes&#34;&gt;How to access classes in another assembly for unit-testing purposes?&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;use-fake-method-in-unit-test-to-implement-the-non-mockable-object&#34;&gt;Use Fake Method in Unit Test to implement the non-mockable Object.&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Microsoft Fakes helps you isolate the code you are testing by replacing other parts of the application with &lt;em&gt;stubs&lt;/em&gt; or &lt;em&gt;shims&lt;/em&gt;. These are small pieces of code that are under the control of your tests. By isolating your code for testing, you know that if the test fails, the cause is there and not somewhere else. Stubs and shims also let you test your code even if other parts of your application are not working yet.&lt;/p&gt;
&lt;p&gt;Fakes come in two flavors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/test/isolating-code-under-test-with-microsoft-fakes?view=vs-2019#get-started-with-stubs&#34;&gt;stub&lt;/a&gt; replaces a class with a small substitute that implements the same interface. To use stubs, you have to design your application so that each component depends only on interfaces, and not on other components. (By &amp;ldquo;component&amp;rdquo; we mean a class or group of classes that are designed and updated together and typically contained in an assembly.)&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/test/isolating-code-under-test-with-microsoft-fakes?view=vs-2019#get-started-with-shims&#34;&gt;shim&lt;/a&gt; modifies the compiled code of your application at run time so that instead of making a specified method call, it runs the shim code that your test provides. Shims can be used to replace calls to assemblies that you cannot modify, such as .NET assemblies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://docs.microsoft.com/en-us/visualstudio/test/media/fakes-2.png?view=vs-2019&#34; alt=&#34;Fakes replace other components&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-10&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/test/isolating-code-under-test-with-microsoft-fakes?view=vs-2019&#34;&gt;Isolate code under test with Microsoft Fakes&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;what-difference-is-there-between-webclient-and-httpwebrequest-classes-in-nethttpsstackoverflowcomquestions4988286what-difference-is-there-between-webclient-and-httpwebrequest-classes-in-net&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/4988286/what-difference-is-there-between-webclient-and-httpwebrequest-classes-in-net&#34;&gt;What difference is there between WebClient and HTTPWebRequest classes in .NET?&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;WebClient is a higher-level abstraction built on top of HttpWebRequest to simplify the most common tasks. For instance, if you want to get the content out of an HttpWebResponse, you have to read from the response stream:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; http = (HttpWebRequest)WebRequest.Create(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://example.com&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; response = http.GetResponse();

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; stream = response.GetResponseStream();
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; sr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StreamReader(stream);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; content = sr.ReadToEnd();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With WebClient, you just do &lt;code&gt;DownloadString&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; client = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; WebClient();
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; content = client.DownloadString(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://example.com&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Note: I left out the &lt;code&gt;using&lt;/code&gt; statements from both examples for brevity. You should definitely take care to dispose your web request objects properly.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In general, WebClient is good for quick and dirty simple requests and HttpWebRequest is good for when you need more control over the entire request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;consolewriteline-cannot--write-unicode-characters-to-the-console&#34;&gt;Console.WriteLine() cannot  write Unicode characters to the console&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;However there&amp;rsquo;s a &lt;em&gt;&amp;ldquo;Beta: Use Unicode UTF-8 for worldwide language support&amp;rdquo;&lt;/em&gt; checkbox since Windows 10 insider build 17035 for setting the locale code page to UTF-8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i.stack.imgur.com/heCud.png&#34; alt=&#34;Beta: Use Unicode UTF-8 for worldwide language support&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference-11&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/5750203/how-to-write-unicode-characters-to-the-console&#34;&gt;How to write Unicode characters to the console?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://superuser.com/questions/1033088/is-it-possible-to-set-locale-of-a-windows-application-to-utf-8&#34;&gt;Is it possible to set “locale” of a Windows application to UTF-8?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;how-to-use-await-in-a-loophttpsstackoverflowcomquestions19431494how-to-use-await-in-a-loop&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/19431494/how-to-use-await-in-a-loop&#34;&gt;How to use await in a loop&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The way you&amp;rsquo;re using the &lt;code&gt;await&lt;/code&gt; keyword tells C# that you want to wait each time you pass through the loop, which isn&amp;rsquo;t parallel. You can rewrite your method like this to do what you want, by storing a list of &lt;code&gt;Task&lt;/code&gt;s and then &lt;code&gt;await&lt;/code&gt;ing them all with &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/hh194766.aspx&#34;&gt;&lt;code&gt;Task.WhenAll&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;async&lt;/span&gt; Task&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;&amp;gt; Init()
{
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; series = Enumerable.Range(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;).ToList();
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; tasks = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; List&amp;lt;Task&amp;lt;Tuple&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; series)
    {
        Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Starting Process {0}&amp;#34;&lt;/span&gt;, i);
        tasks.Add(DoWorkAsync(i));
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; task &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;await&lt;/span&gt; Task.WhenAll(tasks))
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (task.Item2)
        {
            Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Ending Process {0}&amp;#34;&lt;/span&gt;, task.Item1);
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;async&lt;/span&gt; Task&amp;lt;Tuple&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt;&amp;gt;&amp;gt; DoWorkAsync(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i)
{
    Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;working..{0}&amp;#34;&lt;/span&gt;, i);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;await&lt;/span&gt; Task.Delay(&lt;span style=&#34;color:#b452cd&#34;&gt;1000&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; Tuple.Create(i, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;what-is-the-difference-between-asynchronous-programming-and-multithreadinghttpsstackoverflowcomquestions34680985what-is-the-difference-between-asynchronous-programming-and-multithreading&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/34680985/what-is-the-difference-between-asynchronous-programming-and-multithreading&#34;&gt;What is the difference between asynchronous programming and multithreading?&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Your misunderstanding is extremely common. Many people are taught that multithreading and asynchrony are the same thing, but they are not.&lt;/p&gt;
&lt;p&gt;An analogy usually helps. You are cooking in a restaurant. An order comes in for eggs and toast.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous: you cook the eggs, then you cook the toast.&lt;/li&gt;
&lt;li&gt;Asynchronous, single threaded: you start the eggs cooking and set a timer. You start the toast cooking, and set a timer. While they are both cooking, you clean the kitchen. When the timers go off you take the eggs off the heat and the toast out of the toaster and serve them.&lt;/li&gt;
&lt;li&gt;Asynchronous, multithreaded: you hire two more cooks, one to cook eggs and one to cook toast. Now you have the problem of coordinating the cooks so that they do not conflict with each other in the kitchen when sharing resources. And you have to pay them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now does it make sense that multithreading is only one kind of asynchrony? &lt;strong&gt;Threading is about workers; asynchrony is about tasks&lt;/strong&gt;. In multithreaded workflows you assign tasks to workers. In asynchronous single-threaded workflows you have a graph of tasks where some tasks depend on the results of others; as each task completes it invokes the code that schedules the next task that can run, given the results of the just-completed task. But you (hopefully) only need one worker to perform all the tasks, not one worker per task.&lt;/p&gt;
&lt;p&gt;It will help to realize that many tasks are not processor-bound. For processor-bound tasks it makes sense to hire as many workers (threads) as there are processors, assign one task to each worker, assign one processor to each worker, and have each processor do the job of nothing else but computing the result as quickly as possible. But for tasks that are not waiting on a processor, you don&amp;rsquo;t need to assign a worker at all. You just wait for the message to arrive that the result is available and &lt;em&gt;do something else while you&amp;rsquo;re waiting&lt;/em&gt;. When that message arrives then you can schedule the continuation of the completed task as the next thing on your to-do list to check off.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s look at Jon&amp;rsquo;s example in more detail. What happens?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Someone invokes DisplayWebSiteLength. Who? We don&amp;rsquo;t care.&lt;/li&gt;
&lt;li&gt;It sets a label, creates a client, and asks the client to fetch something. The client returns an object representing the task of fetching something. That task is in progress.&lt;/li&gt;
&lt;li&gt;Is it in progress on another thread? Probably not. Read &lt;a href=&#34;http://blog.stephencleary.com/2013/11/there-is-no-thread.html&#34;&gt;Stephen&amp;rsquo;s article&lt;/a&gt; on why there is no thread.&lt;/li&gt;
&lt;li&gt;Now we await the task. What happens? We check to see if the task has completed between the time we created it and we awaited it. If yes, then we fetch the result and keep running. Let&amp;rsquo;s suppose it has not completed. &lt;strong&gt;We sign up the remainder of this method as the continuation of that task and return&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Now control has returned to the caller. What does it do? Whatever it wants.&lt;/li&gt;
&lt;li&gt;Now suppose the task completes. How did it do that? Maybe it was running on another thread, or maybe the caller that we just returned to allowed it to run to completion on the current thread. Regardless, we now have a completed task.&lt;/li&gt;
&lt;li&gt;The completed task asks the correct thread &amp;ndash; again, likely the &lt;em&gt;only&lt;/em&gt; thread &amp;ndash; to run the continuation of the task.&lt;/li&gt;
&lt;li&gt;Control passes immediately back into the method we just left at the point of the await. Now there &lt;em&gt;is&lt;/em&gt; a result available so we can assign &lt;code&gt;text&lt;/code&gt; and run the rest of the method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s just like in my analogy. Someone asks you for a document. You send away in the mail for the document, and keep on doing other work. When it arrives in the mail you are signalled, and when you feel like it, you do the rest of the workflow &amp;ndash; open the envelope, pay the delivery fees, whatever. You don&amp;rsquo;t need to hire another worker to do all that for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;tuple-vs-class&#34;&gt;Tuple VS Class&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h2 id=&#34;tuples-are-values-so-are-copied-by-value-rather-than-by-reference&#34;&gt;Tuples are values, so are copied by value, rather than by reference.&lt;/h2&gt;
&lt;p&gt;Most of the time, this should not be an issue. However, if you are passing around tuples of large structs, this might have an impact on performance. Ref locals/returns can be used to work around these performance issues, though.&lt;/p&gt;
&lt;p&gt;Additionally, because they are values, modifying a copy remotely will not change the original copy. This is a good thing, but could catch some folk out.&lt;/p&gt;
&lt;h2 id=&#34;tuple-element-names-are-not-persisted&#34;&gt;Tuple element names are not persisted&lt;/h2&gt;
&lt;p&gt;The names given to elements are used by the compiler and (in most cases) are not available at run-time. This means that reflection cannot be used to discover their names; they cannot be accessed dynamically and they cannot be used in razor views.&lt;/p&gt;
&lt;p&gt;Also this is an important consideration with APIs. A tuple returned from a method is the exception to the rule regarding after-compilation name discoverability. The compiler adds attributes to the method that hold information on the tuple names. This means you can safely return a tuple from a public method in one assembly and access its names in another.&lt;/p&gt;
&lt;h2 id=&#34;tuples-are-lightweight&#34;&gt;Tuples are lightweight&lt;/h2&gt;
&lt;p&gt;Tuples are much simpler to write than types as they are less verbose and the declaration can be &amp;ldquo;inlined&amp;rdquo; (ie declared at the point of use). This works well when declaring a method that returns multiple values, for example.&lt;/p&gt;
&lt;p&gt;However, because they are declared at the point of use, if you have &lt;code&gt;MethodA&lt;/code&gt; that calls &lt;code&gt;MethodB&lt;/code&gt; that calls &lt;code&gt;MethodC&lt;/code&gt; and each returns a tuple, you&amp;rsquo;ll need to redefine the tuple at every stage. There isn&amp;rsquo;t (&lt;a href=&#34;https://github.com/dotnet/csharplang/issues/423&#34;&gt;yet&lt;/a&gt;) a way of creating an alias of a tuple and re-using it across multiple methods.&lt;/p&gt;
&lt;h2 id=&#34;just-use-common-sense&#34;&gt;Just use common sense&lt;/h2&gt;
&lt;p&gt;For any situation where you might consider using a tuple: simply ask yourself the question: &amp;ldquo;will a tuple simplify the code here&amp;rdquo;. If the answer is &amp;ldquo;yes&amp;rdquo;, then use one. And that ultimately is the primary consideration over whether to use a tuple or a custom class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-12&#34;&gt;Reference:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/44650636/when-to-use-tuple-vs-class-in-c-sharp-7-0&#34;&gt;When to use: Tuple vs Class in C# 7.0&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;in-net-which-loop-runs-faster-for-or-foreachhttpsstackoverflowcomquestions365615in-net-which-loop-runs-faster-for-or-foreach&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/365615/in-net-which-loop-runs-faster-for-or-foreach&#34;&gt;In .NET, which loop runs faster, &amp;lsquo;for&amp;rsquo; or &amp;lsquo;foreach&amp;rsquo;?&lt;/a&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;h1 id=&#34;c-enumhttpsdocsmicrosoftcomen-usdotnetapisystemenumviewnet-50&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.enum?view=net-5.0&#34;&gt;C# Enum&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&#34;get-value-of-enum-member-by-its-name&#34;&gt;Get value of enum member by its name&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;Console.WriteLine((&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)Enum.Parse(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(ConsoleColor), &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;)); &lt;span style=&#34;color:#228b22&#34;&gt;// 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;c---returning-an-enum-from-a-static-extension-methodhttpsstackoverflowcomquestions1556952c-sharp-returning-an-enum-from-a-static-extension-method&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1556952/c-sharp-returning-an-enum-from-a-static-extension-method&#34;&gt;C# - Returning an Enum? from a static extension method&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; T? ToEnumSafe&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; s) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; T : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (IsEnum&amp;lt;T&amp;gt;(s) ? (T?)Enum.Parse(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(T), s) : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);
}

Console.WriteLine((ConsoleColor) Enum.Parse(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(ConsoleColor), &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;) == ConsoleColor.Blue); &lt;span style=&#34;color:#228b22&#34;&gt;// True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;enumeration-format-stringshttpsdocsmicrosoftcomen-usdotnetstandardbase-typesenumeration-format-strings&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/base-types/enumeration-format-strings&#34;&gt;Enumeration format strings&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;Console.WriteLine(ConsoleColor.Red.ToString(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;G&amp;#34;&lt;/span&gt;));         &lt;span style=&#34;color:#228b22&#34;&gt;// Displays Red
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Console.WriteLine(ConsoleColor.Blue.ToString(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;));       &lt;span style=&#34;color:#228b22&#34;&gt;// Displays Blue
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Console.WriteLine(ConsoleColor.Cyan.ToString(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;D&amp;#34;&lt;/span&gt;));         &lt;span style=&#34;color:#228b22&#34;&gt;// Displays 11
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Console.WriteLine(ConsoleColor.Cyan.ToString(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;));   &lt;span style=&#34;color:#228b22&#34;&gt;// Displays 0000000B
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
nameof(RelevantTableName.DocumentObjectReference);  &lt;span style=&#34;color:#228b22&#34;&gt;// suggest*
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;how-can-i-cast-int-to-enumhttpsstackoverflowcomquestions29482how-can-i-cast-int-to-enum&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/29482/how-can-i-cast-int-to-enum&#34;&gt;How can I cast int to enum?&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;From an int:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;YourEnum foo = (YourEnum)yourInt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From a string:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;YourEnum foo = (YourEnum) Enum.Parse(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(YourEnum), yourString);

&lt;span style=&#34;color:#228b22&#34;&gt;// The foo.ToString().Contains(&amp;#34;,&amp;#34;) check is necessary for enumerations marked with an [Flags] attribute
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!Enum.IsDefined(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(YourEnum), foo) &amp;amp;&amp;amp; !foo.ToString().Contains(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;))
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;{yourString} is not an underlying value of the YourEnum enumeration.&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From number you can also&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;YourEnum foo = (YourEnum)Enum.ToObject(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(YourEnum) , yourInt);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;naming-enumerations&#34;&gt;Naming Enumerations&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Names of enumeration types (also called enums) in general should follow the standard type-naming rules (PascalCasing, etc.). However, there are additional guidelines that apply specifically to enums.&lt;/p&gt;
&lt;p&gt;✔️ DO use a singular type name for an enumeration unless its values are bit fields.&lt;/p&gt;
&lt;p&gt;✔️ DO use a plural type name for an enumeration with bit fields as values, also called flags enum.&lt;/p&gt;
&lt;p&gt;❌ DO NOT use an &amp;ldquo;Enum&amp;rdquo; suffix in enum type names.&lt;/p&gt;
&lt;p&gt;❌ DO NOT use &amp;ldquo;Flag&amp;rdquo; or &amp;ldquo;Flags&amp;rdquo; suffixes in enum type names.&lt;/p&gt;
&lt;p&gt;❌ DO NOT use a prefix on enumeration value names (e.g., &amp;ldquo;ad&amp;rdquo; for ADO enums, &amp;ldquo;rtf&amp;rdquo; for rich text enums, etc.).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Portions © 2005, 2009 Microsoft Corporation. All rights reserved.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Reprinted by permission of Pearson Education, Inc. from &lt;a href=&#34;https://www.informit.com/store/framework-design-guidelines-conventions-idioms-and-9780321545619&#34;&gt;Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries, 2nd Edition&lt;/a&gt; by Krzysztof Cwalina and Brad Abrams, published Oct 22, 2008 by Addison-Wesley Professional as part of the Microsoft Windows Development Series.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-13&#34;&gt;Reference:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/enum&#34;&gt;Enum Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/21561684/get-value-of-enum-member-by-its-name&#34;&gt;Get value of enum member by its name?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;moq-a-function-with-5-parameters-and-access-invocation-argumentshttpsstackoverflowcomquestions2540931moq-a-function-with-5-parameters-and-access-invocation-arguments&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/2540931/moq-a-function-with-5-parameters-and-access-invocation-arguments&#34;&gt;Moq a function with 5+ parameters and access invocation arguments&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This is supported in the final release of Moq 4.0 (4.0.10827), which was released on April 12, 2011. If you&amp;rsquo;re using .NET 4, you&amp;rsquo;ll be able to mock up to 16 parameters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;むだ！むだ！むだ！むだ！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; SubmitCallback(Bar bar1,Bar bar2,Bar bar3,Bar bar4,Bar bar5);

mock.Setup(foo =&amp;gt; foo.Submit(It.IsAny&amp;lt;Bar&amp;gt;(),It.IsAny&amp;lt;Bar&amp;gt;(),It.IsAny&amp;lt;Bar&amp;gt;(),It.IsAny&amp;lt;Bar&amp;gt;(),It.IsAny&amp;lt;Bar&amp;gt;()))
    .Callback(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SubmitCallback((Bar bar1,Bar bar2,Bar bar3,Bar bar4,Bar bar5) =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Submitting a Bar!&amp;#34;&lt;/span&gt;)));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;net-testing-naming-conventionshttpsstackoverflowcomquestions84717net-testing-naming-conventions&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/84717/net-testing-naming-conventions&#34;&gt;.NET Testing Naming Conventions&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;-Code Folder&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;Company.Website&lt;/span&gt;{}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;-Tests Folder&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;Company.Website.Tests&lt;/span&gt;{}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;just-in-time-compilation&#34;&gt;Just-in-time compilation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.codedomprovider?view=net-5.0&#34;&gt;CodeDomProvider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Just-in-time_compilation&#34;&gt;Just-in-time compilation Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;regex-for-ip-addresshttpsstackoverflowcomquestions9165922regex-for-ip-address&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/9165922/regex-for-ip-address&#34;&gt;Regex for IP address&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;IPv4 &amp;amp; IPv6 both are okay!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.net.ipaddress.tryparse.aspx&#34;&gt;&lt;code&gt;IPAddress.TryParse&lt;/code&gt;&lt;/a&gt; static method instead.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;IPAddress ip;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; b = IPAddress.TryParse(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1234.12.12.12&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;out&lt;/span&gt; ip);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-14&#34;&gt;Reference:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex?view=net-5.0&#34;&gt;Regex Class&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;encode--decode&#34;&gt;Encode &amp;amp; Decode&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WebUtility&lt;/li&gt;
&lt;li&gt;Server.UrlEncode&lt;/li&gt;
&lt;li&gt;Uri.EscapeDataString&lt;/li&gt;
&lt;li&gt;Uri.EscapeUriString&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;To encode or decode values outside of a web application, use the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.net.webutility?view=net-5.0&#34;&gt;WebUtility&lt;/a&gt; class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We found that in some cases you need to consider using Uri.EscapeDataString. In our case we are encrypting the querystring and found that UrlDecode is converting a plus (+) to space. This was causing us errors during decryption. Using Uri’s Escape and UnescapeDataString makes sense for us when constructing a custom querystring in the URL.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I had significant headaches with these methods before, &lt;strong&gt;I recommend you *avoid* any variant of &lt;code&gt;UrlEncode&lt;/code&gt;, and instead use &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.uri.escapedatastring.aspx&#34;&gt;&lt;code&gt;Uri.EscapeDataString&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; - at least that one has a comprehensible behavior.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;HttpUtility.UrlEncode(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;) == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;//breaks ASP.NET when used in paths, non-
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                                  &lt;span style=&#34;color:#228b22&#34;&gt;//standard, undocumented.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Uri.EscapeUriString(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a?b=e&amp;#34;&lt;/span&gt;) == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a?b=e&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// makes sense, but rarely what you
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                                        &lt;span style=&#34;color:#228b22&#34;&gt;// want, since you still need to
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                                        &lt;span style=&#34;color:#228b22&#34;&gt;// escape special characters yourself
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But my personal favorite has got to be &lt;strong&gt;HttpUtility.UrlPathEncode&lt;/strong&gt; - this thing is really incomprehensible. It encodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot; &amp;quot; ==&amp;gt; &amp;ldquo;%20&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;100% true&amp;rdquo; ==&amp;gt; &amp;ldquo;100%%20true&amp;rdquo; (ok, your url is broken now)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;test A.aspx#anchor B&amp;rdquo; ==&amp;gt; &amp;ldquo;test%20A.aspx**#anchor%20B**&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;test A.aspx?hmm#anchor B&amp;rdquo; ==&amp;gt; &amp;ldquo;test%20A.aspx?hmm**#anchor B**&amp;rdquo; (*note the difference with the previous escape sequence!*)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It also has the lovelily specific MSDN documentation &amp;ldquo;Encodes the path portion of a URL string for reliable HTTP transmission from the Web server to a client.&amp;rdquo; - without actually explaining what it does. You are less likely to shoot yourself in the foot with an Uzi&amp;hellip;&lt;/p&gt;
&lt;p&gt;In short, stick to &lt;strong&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.uri.escapedatastring.aspx&#34;&gt;Uri.EscapeDataString&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-15&#34;&gt;Reference:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.web.httputility.urldecode?view=net-5.0&#34;&gt;HttpUtility.UrlDecode Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.net.webutility?view=net-5.0&#34;&gt;WebUtility Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/4396598/whats-the-difference-between-escapeuristring-and-escapedatastring&#34;&gt;What&amp;rsquo;s the difference between EscapeUriString and EscapeDataString?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/602642/server-urlencode-vs-httputility-urlencode&#34;&gt;Server.UrlEncode vs. HttpUtility.UrlEncode&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;side-effect&#34;&gt;Side effect&lt;/h1&gt;
&lt;h2 id=&#34;reference-16&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&#34;&gt;Side effect&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;how-do-you-unit-test-regular-expressionshttpsstackoverflowcomquestions488601how-do-you-unit-test-regular-expressions&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/488601/how-do-you-unit-test-regular-expressions&#34;&gt;How do you unit test regular expressions?&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;You should always test your regexen, much like any other chunk of code. They&amp;rsquo;re at the most simple a function that takes a string and returns a bool, or returns an array of values.&lt;/p&gt;
&lt;p&gt;Here are some suggestions on what to think about when it comes to designing unit tests for regexen. These are not not hard and fast prescriptions for unit test design, but some guidelines to shape your thinking. As always, weigh the needs of your testing versus cost of failure balanced with the time required to implement them all. (I find that &amp;lsquo;implementing&amp;rsquo; the test is the easy part! :-] )&lt;/p&gt;
&lt;p&gt;Points to consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Think of every group (the parentheses) as a curly brace.&lt;/li&gt;
&lt;li&gt;Think of every | as a condition. Make sure to test for each branch.&lt;/li&gt;
&lt;li&gt;Think of every modifier (*, +, ? ) as a different path.&lt;/li&gt;
&lt;li&gt;(side note to the above: remember the difference between *, +, ? and *?, +?, and ??.)&lt;/li&gt;
&lt;li&gt;for \d, \s, \w, and their negations, give several in each range a try.&lt;/li&gt;
&lt;li&gt;For * and +, you need to test for the &amp;lsquo;no value&amp;rsquo;, &amp;lsquo;one of&amp;rsquo;, and &amp;lsquo;one or more&amp;rsquo; for each.&lt;/li&gt;
&lt;li&gt;For important &amp;lsquo;control&amp;rsquo; characters (eg, strings in the regex you look for) test to see what happens if they show up in the wrong places. This may surprise you.&lt;/li&gt;
&lt;li&gt;If you have real world data, use as much of it as you can.&lt;/li&gt;
&lt;li&gt;If you don&amp;rsquo;t, make sure to test both the simple and complex forms that should be valid.&lt;/li&gt;
&lt;li&gt;Make sure to test what regex control characters do when inserted.&lt;/li&gt;
&lt;li&gt;Make sure to verify that the empty string is properly accepted/rejected.&lt;/li&gt;
&lt;li&gt;Make sure to verify that a string of each of the different kind of space characters are properly accepted or rejected.&lt;/li&gt;
&lt;li&gt;Make sure that proper handling of case insensitivity is done (the i flag). This has bit me more times than almost anything else in text parsing (other than spaces).&lt;/li&gt;
&lt;li&gt;If you have the x, m or s options, make sure you understand what they do and test for it (the behavior here can be different)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a regex that returns lists, also remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verify that the data you expect is returned, in the right order, in the right fields.&lt;/li&gt;
&lt;li&gt;Verify that slight modifications do not return good data.&lt;/li&gt;
&lt;li&gt;Verify that mixed anonymous groups and named groups parse correctly (eg, &lt;code&gt;(?&amp;lt;name&amp;gt; thing1 ( thing2) )&lt;/code&gt;) - this behavior can be different based on the regex engine you&amp;rsquo;re using.&lt;/li&gt;
&lt;li&gt;Once again, give lots of real world trials.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you use any advanced features, such as non-backtracking groups, make sure you understand completely how the feature works, and using the guidelines above, build example strings that should work for and against each of them.&lt;/p&gt;
&lt;p&gt;Depending on your regex library implementation, the way groups are captured may be different as well. Perl 5 has a &amp;lsquo;open paren order&amp;rsquo; ordering, C# has that partially except for named groups and so on. Make sure to experiment with your flavor to know exactly what it does.&lt;/p&gt;
&lt;p&gt;Then, integrate them right in with your other unit tests, either in their own module or alongside the module that contains the regex. For particularly nasty regexen, you may find you need lots and lots of tests to verify that the pattern and all the features you use are correct. If the regex makes up a large (or nearly all) of the work that the method is doing, I will use the advice above to fashion inputs to test that function and not the regex directly. That way, if later you decide that the regex is not the way to go, or you want to break it up, you can capture the behavior the regex provided without changing the interface - ie, the method that invokes the regex.&lt;/p&gt;
&lt;p&gt;As long as you really know how a regex feature is supposed to work in your flavor of regex, you should be able to develop decent test cases for it. Just make sure you really, really, really do understand how the feature works!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;In terms of ascii code, it&amp;rsquo;s 3 &amp;ndash; since they&amp;rsquo;re 10 and 13 respectively;-).&lt;/p&gt;
&lt;p&gt;But seriously, there are many:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in Unix and all Unix-like systems, &lt;code&gt;\n&lt;/code&gt; is the code for end-of-line, &lt;code&gt;\r&lt;/code&gt; means nothing special&lt;/li&gt;
&lt;li&gt;as a consequence, in C and most languages that somehow copy it (even remotely), &lt;code&gt;\n&lt;/code&gt; is the standard escape sequence for end of line (translated to/from OS-specific sequences as needed)&lt;/li&gt;
&lt;li&gt;in old Mac systems (pre-OS X), &lt;code&gt;\r&lt;/code&gt; was the code for end-of-line instead&lt;/li&gt;
&lt;li&gt;in Windows (and many old OSs), the code for end of line is 2 characters, &lt;code&gt;\r\n&lt;/code&gt;, in this order&lt;/li&gt;
&lt;li&gt;as a (surprising;-) consequence (harking back to OSs much older than Windows), &lt;code&gt;\r\n&lt;/code&gt; is the standard line-termination for text formats on the Internet&lt;/li&gt;
&lt;li&gt;for electromechanical teletype-like &amp;ldquo;terminals&amp;rdquo;, &lt;code&gt;\r&lt;/code&gt; commands the carriage to go back leftwards until it hits the leftmost stop (a slow operation), &lt;code&gt;\n&lt;/code&gt; commands the roller to roll up one line (a much faster operation) &amp;ndash; that&amp;rsquo;s the reason you always have &lt;code&gt;\r&lt;/code&gt; &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;\n&lt;/code&gt;, so that the roller can move while the carriage is still going leftwards!-) Wikipedia has a &lt;a href=&#34;https://en.wikipedia.org/wiki/Newline#History&#34;&gt;more detailed explanation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;for character-mode terminals (typically emulating even-older printing ones as above), in raw mode, &lt;code&gt;\r&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt; act similarly (except both in terms of the cursor, as there &lt;strong&gt;is&lt;/strong&gt; no carriage or roller;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In practice, in the modern context of writing to a text file, you should always use &lt;code&gt;\n&lt;/code&gt; (the underlying runtime will translate that if you&amp;rsquo;re on a weird OS, e.g., Windows;-). The only reason to use &lt;code&gt;\r&lt;/code&gt; is if you&amp;rsquo;re writing to a character terminal (or more likely a &amp;ldquo;console window&amp;rdquo; emulating it) and want the next line you write to overwrite the last one you just wrote (sometimes used for goofy &amp;ldquo;ascii animation&amp;rdquo; effects of e.g. progress bars) &amp;ndash; this is getting pretty obsolete in a world of GUIs, though;-).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\r&lt;/code&gt;&lt;/strong&gt; = CR (Carriage Return) → Used as a new line character in Mac OS before X&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\n&lt;/code&gt;&lt;/strong&gt; = LF (Line Feed) → Used as a new line character in Unix/Mac OS X&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;\r\n&lt;/code&gt;&lt;/strong&gt; = CR + LF → Used as a new line character in Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The problem is not with the splitting but rather with the &lt;code&gt;WriteLine&lt;/code&gt;. A &lt;code&gt;\n&lt;/code&gt; in a string printed with &lt;code&gt;WriteLine&lt;/code&gt; will produce an &amp;ldquo;extra&amp;rdquo; line.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; text = 
  &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;somet interesting text\n&amp;#34;&lt;/span&gt; +
  &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;some text that should be in the same line\r\n&amp;#34;&lt;/span&gt; +
  &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;some text should be in another line&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] stringSeparators = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] { &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\r\n&amp;#34;&lt;/span&gt; };
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] lines = text.Split(stringSeparators, StringSplitOptions.None);
Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Nr. Of items in list: &amp;#34;&lt;/span&gt; + lines.Length); &lt;span style=&#34;color:#228b22&#34;&gt;// 2 lines
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; s &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; lines)
{
   Console.WriteLine(s); &lt;span style=&#34;color:#228b22&#34;&gt;//But will print 3 lines in total.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To fix the problem remove &lt;code&gt;\n&lt;/code&gt; before you print the string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;Console.WriteLine(s.Replace(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-17&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1761051/difference-between-n-and-r&#34;&gt;Difference between \n and \r?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/15433188/what-is-the-difference-between-r-n-r-and-n&#34;&gt;What is the difference between \r\n, \r, and \n?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/22185009/split-text-with-r-n&#34;&gt;Split text with &amp;lsquo;\r\n&amp;rsquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/cs/dot-net-issue/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>SQLserver</title>
        <link>https://www.openheart.icu/cs/sqlserver/</link>
        <pubDate>Sat, 15 Aug 2020 16:27:30 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/sqlserver/</guid>
        <description>42th openheart https://www.openheart.icu/cs/sqlserver/ -&lt;h1 id=&#34;common-operation&#34;&gt;Common Operation&lt;/h1&gt;
&lt;h2 id=&#34;sqlcmd&#34;&gt;SQLCMD&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sqlcmd -S localhost -d CSI10 -q &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;SELECT * FROM SITE&amp;#34;&lt;/span&gt;
sqlcmd -S localhost -d CSI10 -Q &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;SELECT * FROM SITE&amp;#34;&lt;/span&gt;
sqlcmd -S localhost -U SA -Q &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;select @@VERSION&amp;#39;&lt;/span&gt;
sqlcmd -S localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;issues&#34;&gt;Issues&lt;/h1&gt;
&lt;h2 id=&#34;cannot-insert-explicit-value-for-identity-column-in-table-table-when-identity_insert-is-set-to-offhttpsstackoverflowcomquestions1334012cannot-insert-explicit-value-for-identity-column-in-table-table-when-identity&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1334012/cannot-insert-explicit-value-for-identity-column-in-table-table-when-identity&#34;&gt;Cannot insert explicit value for identity column in table &amp;lsquo;table&amp;rsquo; when IDENTITY_INSERT is set to OFF&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt; IDENTITY_INSERT Table1 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ON&lt;/span&gt;

&lt;span style=&#34;color:#228b22&#34;&gt;--Do INSERT
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt; IDENTITY_INSERT Table1 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;OFF&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sql-server-the-backup-set-holds-a-backup-of-a-database-other-than-the-existinghttpsstackoverflowcomquestions10204480sql-server-the-backup-set-holds-a-backup-of-a-database-other-than-the-existing&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/10204480/sql-server-the-backup-set-holds-a-backup-of-a-database-other-than-the-existing&#34;&gt;SQL-Server: The backup set holds a backup of a database other than the existing&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t create an empty database and restore the &lt;code&gt;.bak&lt;/code&gt; file on to it.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;&amp;lsquo;Restore Database&amp;rsquo;&lt;/strong&gt; option accessible by right clicking the &amp;ldquo;Databases&amp;rdquo; branch of the SQL Server Management Studio and provide the database name while providing the source to restore.&lt;/li&gt;
&lt;li&gt;Also change the file names at &amp;ldquo;Files&amp;rdquo; if the other database still exists. Otherwise you get &amp;ldquo;The file &amp;lsquo;&amp;hellip;&amp;rsquo; cannot be overwritten. It is being used by database &amp;lsquo;yourFirstDb&amp;rsquo;&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;what-is-the-t-sql-syntax-to-connect-to-another-sql-serverhttpsstackoverflowcomquestions125457what-is-the-t-sql-syntax-to-connect-to-another-sql-server&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/125457/what-is-the-t-sql-syntax-to-connect-to-another-sql-server&#34;&gt;What is the T-SQL syntax to connect to another SQL Server?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/ssms/scripting/edit-sqlcmd-scripts-with-query-editor?view=sql-server-ver15&#34;&gt;Edit SQLCMD Scripts with Query Editor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In SQL Server Management Studio, turn on SQLCMD mode from the Query menu. Then at the top of your script, type in the command below&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;:&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;connect&lt;/span&gt; USDB -U sa -P mypassword
USE [&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;database&lt;/span&gt;]
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;GO&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; site;

:&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CONNECT&lt;/span&gt; CNDB
USE [&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;database&lt;/span&gt;]
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;GO&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; site;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: IntelliSense is turned off in the Database Engine Query Editor when the SQLCMD mode is set on.&lt;/p&gt;
&lt;h2 id=&#34;enable-xp_cmdshell-sql-serverhttpsstackoverflowcomquestions5131491enable-xp-cmdshell-sql-server&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/5131491/enable-xp-cmdshell-sql-server&#34;&gt;Enable &amp;lsquo;xp_cmdshell&amp;rsquo; SQL Server&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/xp-cmdshell-server-configuration-option?redirectedfrom=MSDN&amp;amp;view=sql-server-ver15&#34;&gt;If you need to enable &lt;strong&gt;xp_cmdshell&lt;/strong&gt;, you can use Policy-Based Managementhttps://docs.microsoft.com/en-us/sql/relational-databases/policy-based-management/administer-servers-by-using-policy-based-management?view=sql-server-ver15 or run the &lt;strong&gt;sp_configure&lt;/strong&gt; system stored procedure as shown in the following code example:&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- To allow advanced options to be changed.  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;EXECUTE&lt;/span&gt; sp_configure &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;show advanced options&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;GO&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;-- To update the currently configured value for advanced options.  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;RECONFIGURE;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;GO&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;-- To enable the feature.  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;EXECUTE&lt;/span&gt; sp_configure &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;xp_cmdshell&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;GO&lt;/span&gt;  
&lt;span style=&#34;color:#228b22&#34;&gt;-- To update the currently configured value for this feature.  
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;RECONFIGURE;  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;GO&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;use-xp_cmdshell-to-print-variables-into-a-file&#34;&gt;Use &amp;lsquo;xp_cmdshell&amp;rsquo; to print variables into a file&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- print variables 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DECLARE&lt;/span&gt; @cmdtxt &lt;span style=&#34;color:#658b00&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;4000&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; @cmdtxt = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;echo &amp;#39;&lt;/span&gt; +&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;@TtPmtpckCurrCode&amp;#39;&lt;/span&gt;+ &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(@TtPmtpckCurrCode &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;))  + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;@CurrparmsCurrCode&amp;#39;&lt;/span&gt;+&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CAST&lt;/span&gt;(@CurrparmsCurrCode &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)) +&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;gt;&amp;gt; C:\Development\SubFolder\outPut.txt&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;exec&lt;/span&gt; master..xp_cmdshell @cmdtxt

&lt;span style=&#34;color:#228b22&#34;&gt;-- use FOR XML to print table-valued variable
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;declare&lt;/span&gt; @rates &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;table&lt;/span&gt; (
  curr_code CurrCodeType
, site_ref SiteType
, exch_rate ExchRateType
, rate_is_divisor ListYesNoType
, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;primary&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;key&lt;/span&gt; (curr_code, site_ref)
)

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;into&lt;/span&gt; @rates (curr_code, site_ref)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;distinct&lt;/span&gt; curr_code, site
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; tt_pmtpck
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; tt_pmtpck.ProcessId = @PProcessId
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;and&lt;/span&gt; (tt_pmtpck.exch_rate &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;or&lt;/span&gt; tt_pmtpck.dom_amt_applied &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;or&lt;/span&gt; tt_pmtpck.dom_disc_amt &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
  
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DECLARE&lt;/span&gt; @xmltmp xml = (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; rat.curr_code,rat.site_ref,rat.exch_rate,rat.rate_is_divisor &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FROM&lt;/span&gt; @rates &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AS&lt;/span&gt; rat &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FOR&lt;/span&gt; XML AUTO,ELEMENTS XSINIL);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; @cmdtxt = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;echo &amp;#39;&lt;/span&gt; +&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;@rates &amp;#34;&amp;#39;&lt;/span&gt;+ &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CONVERT&lt;/span&gt;(&lt;span style=&#34;color:#658b00&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;max&lt;/span&gt;),@xmltmp) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#34; &amp;gt;&amp;gt; C:\Development\SubFolder\outPut.txt&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;exec&lt;/span&gt; master..xp_cmdshell @cmdtxt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;offset-fetch--top&#34;&gt;Offset-Fetch &amp;amp; TOP&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;offset&lt;/code&gt;并不是万能的，在偏移量越来越大的情况性能表现会越来越差。解决方案为固定偏移量，分页之后用上次标签的行当做起点，使用类似&lt;code&gt;TOP&lt;/code&gt;方式再进行查询。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; * &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FROM&lt;/span&gt; demo_table &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; demo_column1=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AND&lt;/span&gt; ((&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ISNULL&lt;/span&gt;(demo_column2, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;OR&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ISNULL&lt;/span&gt;(demo_column2, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ISNULL&lt;/span&gt;(demo_column3, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;75&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;BY&lt;/span&gt; demo_column1,demo_column2 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;OFFSET&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;49999&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ROWS&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FETCH&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NEXT&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ROWS&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ONLY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reference&#34;&gt;Reference:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoftpressstore.com/articles/article.aspx?p=2314819&#34;&gt;T-SQL Querying: TOP and OFFSET-FETCH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dba.stackexchange.com/questions/220326/reduce-query-time-for-higher-offset-in-sql-server&#34;&gt;Reduce query time for higher offset in sql server&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;logical-operators&#34;&gt;logical operators&lt;/h2&gt;
- https://www.openheart.icu/cs/sqlserver/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Static Search Table &amp; Dynamic Search Table</title>
        <link>https://www.openheart.icu/cs/%E5%8A%A8%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8%E4%B8%8E%E9%9D%99%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8/</link>
        <pubDate>Sat, 25 Jul 2020 18:32:23 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/%E5%8A%A8%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8%E4%B8%8E%E9%9D%99%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8/</guid>
        <description>42th openheart https://www.openheart.icu/cs/%E5%8A%A8%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8%E4%B8%8E%E9%9D%99%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8/ -&lt;p&gt;&lt;em&gt;今天在看&lt;code&gt;BST&lt;/code&gt;时，指导书上讲二叉排序树时与二分查找进行对比，引出几个模棱两可的概念（静态查找表、动态查找表），经查找后整理得本文&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;
&lt;p&gt;首先要了解几个基础概念&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查找(Searching)&lt;/strong&gt; 是根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查找表(Search Table)&lt;/strong&gt; 是由同⼀类型的数据元素(记录)构成的集合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键字(Key)&lt;/strong&gt; 是数据元素中某个数据项的值，又称为键值，用它可以表示⼀个数据元素，也可以标识一个记录的某个数据项(字段)，我们称为关键码。
若关键字可以唯⼀地标识一个记录, 则称此关键字为&lt;strong&gt;主关键字 (Primary Key)&lt;/strong&gt;。
对于那些可以识别多个属于元素(记录)的关键字，我们称为&lt;strong&gt;次关键字(Secondary Key)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;查找表操作可分为&lt;strong&gt;静态查找&lt;/strong&gt;和&lt;strong&gt;动态查找&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;静态查找表static-search-table&#34;&gt;静态查找表(Static Search Table)&lt;/h1&gt;
&lt;p&gt;只作查找操作的查找表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询某个”特定的”数据元素是否在查找表中;&lt;/li&gt;
&lt;li&gt;检索某个&amp;quot;特定的&amp;quot;数据元素和各种属性;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态查找只是仅查找，并不会去改变集合内的数据元素。常用的查找有。&lt;/p&gt;
&lt;h2 id=&#34;顺序查找-linear-search又称线性查找&#34;&gt;顺序查找（ Linear search，又称线性查找）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt; ：顺序查找就是按顺序从头到尾依次往下查找，从表中的第一个(或最后一个)记录开始，逐个进行记录关键字和给定值比较，找到数据，则提前结束查找，找不到便一直查找下去，直到数据最后一位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;linearSearch&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] a, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num) {        
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; a.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(a[i] == num){
          	&lt;span style=&#34;color:#228b22&#34;&gt;// 返回数据所在的下标，也就是位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i;
        }
    }
  	&lt;span style=&#34;color:#228b22&#34;&gt;// 不存在的话返回-1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;索引顺序表查找分块查找&#34;&gt;索引顺序表查找（分块查找）&lt;/h2&gt;
&lt;p&gt;整个表中的元素未必有序，但若划分为若干块后，每一块中的所有元素均小于（或大于）其后面块中的所有元素。我们称这种为&lt;strong&gt;分块有序&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;分块查找要求把一个数据分为若干块，每一块里面的元素可以是无序的，但是块与块之间的元素需要是有序的。（对于一个非递减的数列来说，第&lt;code&gt;i&lt;/code&gt;块中的每个元素一定比第&lt;code&gt;i-1&lt;/code&gt;块中的任意元素大）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先建立一个索引表，索引表中为每一块都设置索引项；&lt;/li&gt;
&lt;li&gt;在索引表中查找，目的是找出关键所属的块的位置。如果索引表较大的话，可以采用折半查找；&lt;/li&gt;
&lt;li&gt;进入该块中，使用简单顺序表查找算法进行关键字查找。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种带索引表的分块有序表查找的时间性能取决于两步查找时间之和：如前面所述，第一步可以采用简单顺序查找和折半查找之一进行。第二步只能采用简单顺序查找，但由于子表的长度较原表的长度小。因此，其时间性能介于顺序查找和折半查找之间。分块查找也同时有顺序查找和二分查找的优点：&lt;strong&gt;不需要有序&lt;/strong&gt;、&lt;strong&gt;速度快&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;BlockSearch&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] index;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt; list;
    
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;BlockSearch&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] index) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;index&lt;/span&gt; = index;
        list = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;ArrayList&amp;lt;Integer&amp;gt;&amp;gt;();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; index.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
            list.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;Integer&amp;gt;());
        }
    }
    
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;insert&lt;/span&gt;(Integer value) {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = binarySearch(value);
        list.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(i).&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(value);
    }
    
  	&lt;span style=&#34;color:#228b22&#34;&gt;// 分块查找
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;search&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; data) {
      	&lt;span style=&#34;color:#228b22&#34;&gt;// 二分查找所在块
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = binarySearch(data);
      	&lt;span style=&#34;color:#228b22&#34;&gt;// 顺序查找该元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; list.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(i).&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(); j++) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(data == list.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(i).&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(j)) {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
    }
  
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;printAll&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; list.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(); i++) {
            ArrayList&amp;lt;Integer&amp;gt; l = list.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(i);
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ArrayList: &amp;#34;&lt;/span&gt; + i +  &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; l.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(); j++) {
                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(l.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(j));
            }
        }
    }
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// 二分查找
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;binarySearch&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; target) {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; start = 0;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; end = index.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1 ;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; mid = -1;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(start &amp;lt;= end) {
            mid = (start + end) / 2;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(target == index[mid]) {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; mid;
            }&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt;(target &amp;lt; index[mid]) {
                end = mid - 1;
            }&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                start = mid + 1;
            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; start;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;折半查找二分查找&#34;&gt;折半查找（二分查找）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;原理：首先确定该查找区间的中间点位置： int mid = (low+upper) / 2；然后将待查找的值与中间点位置的值比较：若相等，则查找成功并返回此位置。若中间点位置值大于待查值，则新的查找区间是中间点位置的左边区域。若中间点位置值小于待查值，则新的查找区间是中间点位置的右边区域。下一次查找是针对新的查找区间进行的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;binarySearch&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] nums, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; key) {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; l = 0, h = nums.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (l &amp;lt;= h) {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; m = l + (h - l) / 2;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (nums[m] == key) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; m;
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (nums[m] &amp;gt; key) {
            h = m - 1;
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            l = m + 1;
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -1;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;时间复杂度&#34;&gt;时间复杂度&lt;/h3&gt;
&lt;p&gt;二分查找也称为折半查找，每次都能将查找区间减半，这种折半特性的算法时间复杂度为 O(logN)。&lt;/p&gt;
&lt;h3 id=&#34;m-计算&#34;&gt;m 计算&lt;/h3&gt;
&lt;p&gt;有两种计算中值 m 的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m = (l + h) / 2&lt;/li&gt;
&lt;li&gt;m = l + (h - l) / 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;l + h 可能出现加法溢出，也就是说加法的结果大于整型能够表示的范围。但是 l 和 h 都为正数，因此 h - l 不会出现加法溢出问题。所以，最好使用第二种计算法方法，该方法又被称为&lt;strong&gt;差值查找&lt;/strong&gt;，是对二分查找的优化。&lt;/p&gt;
&lt;h3 id=&#34;未成功查找的返回值&#34;&gt;未成功查找的返回值&lt;/h3&gt;
&lt;p&gt;循环退出时如果仍然没有查找到 key，那么表示查找失败。可以有两种返回值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-1：以一个错误码表示没有查找到 key&lt;/li&gt;
&lt;li&gt;l：将 key 插入到 nums 中的正确位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;斐波那契查找&#34;&gt;斐波那契查找&lt;/h2&gt;
&lt;p&gt;除了上面的查找方法，还有一种方法，斐波那契查找（Fibonacci Search），它充分利用了黄金分割的原理，是一种特殊的折半查找方法。&lt;/p&gt;
&lt;p&gt;首先要准备一个斐波那契数列：
&lt;strong&gt;F = {0, 1, 1, 2, 3, 5, 8, 13, 21, &amp;hellip;}&lt;/strong&gt;
然后再准备一个供查询的数组：
a[11] = {0, 1, 16, 24, 35, 47, 59, 62, 73, 88, 99}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;斐波拉契查找算法的核心在于&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当&lt;code&gt;key = a[mid]&lt;/code&gt;时，表示查找成功;&lt;/li&gt;
&lt;li&gt;当&lt;code&gt;key &amp;lt; a[mid]&lt;/code&gt;时，将斐波那契数列分割下标k减小1（&lt;code&gt;k=k-1&lt;/code&gt;）向左查找，新范围是第&lt;code&gt;low&lt;/code&gt;个到第新&lt;code&gt;mid-1&lt;/code&gt;个,此时范围个数为&lt;code&gt;F[k-1]-1&lt;/code&gt;个;&lt;/li&gt;
&lt;li&gt;当&lt;code&gt;key &amp;gt; a[mid]&lt;/code&gt;时，将斐波那契数列分割下标k减小2（&lt;code&gt;k=k-2&lt;/code&gt;）向右查找，新范围是第&lt;code&gt;mid+1&lt;/code&gt;个到第&lt;code&gt;high&lt;/code&gt;个. 此时范围个数为&lt;code&gt;F[K-2]-1&lt;/code&gt;个;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先需要计算出黄金分割点k，如上面a数组中除哨兵外元素个数n=10.&lt;/p&gt;
&lt;p&gt;根据已知条件，计算k值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;FibonacciSearch&lt;/span&gt; {
 
	&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;	 * @param args
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;	 */&lt;/span&gt;
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MAXSIZE = 20;
 
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
		&lt;span style=&#34;color:#228b22&#34;&gt;// TODO Auto-generated method stub
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] f = fibonacci();
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i : f) {
			System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;);
		}
		System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
 
		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] data = { 1, 5, 15, 22, 25, 31, 39, 42, 47, 49, 59, 68, 88 };
 
		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; search = 39;
		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; position = fibonacciSearch(data, search);
		System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;值&amp;#34;&lt;/span&gt; + search + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的元素位置为：&amp;#34;&lt;/span&gt; + position);
	}
 
	&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;	 * 斐波那契数列
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;	 * 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;	 * @return
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;	 */&lt;/span&gt;
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] &lt;span style=&#34;color:#008b45&#34;&gt;fibonacci&lt;/span&gt;() {
		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] f = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[20];
		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0;
		f[0] = 1;
		f[1] = 1;
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = 2; i &amp;lt; MAXSIZE; i++) {
			f[i] = f[i - 1] + f[i - 2];
		}
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; f;
	}
 
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;fibonacciSearch&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] data, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; key) {
		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; low = 0;
		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; high = data.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1;
		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; mid = 0;
		&lt;span style=&#34;color:#228b22&#34;&gt;// 斐波那契分割数值下标
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; k = 0;
		&lt;span style=&#34;color:#228b22&#34;&gt;// 序列元素个数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0;
		&lt;span style=&#34;color:#228b22&#34;&gt;// 获取斐波那契数列
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] f = fibonacci();
 
		&lt;span style=&#34;color:#228b22&#34;&gt;// 获取斐波那契分割数值下标
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (data.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; &amp;gt; f[k] - 1) {
			k++;
		}
 
 		&lt;span style=&#34;color:#228b22&#34;&gt;// 利用Java工具类Arrays 构造新数组并指向 数组 a[]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] temp=Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;copyOf&lt;/span&gt;(a, f[k]);
 
		&lt;span style=&#34;color:#228b22&#34;&gt;// 序列补充至f[k]个元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#228b22&#34;&gt;// 补充的元素值为最后一个元素的值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (i = data.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i &amp;lt; f[k] - 1; i++) {
			temp[i] = temp[high];
		}
 
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (low &amp;lt;= high) {
			&lt;span style=&#34;color:#228b22&#34;&gt;// low：起始位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#228b22&#34;&gt;// 前半部分有f[k-1]个元素，由于下标从0开始
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#228b22&#34;&gt;// 则-1 获取 黄金分割位置元素的下标
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			mid = low + f[k - 1] - 1;
 
			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (temp[mid] &amp;gt; key) {
				&lt;span style=&#34;color:#228b22&#34;&gt;// 查找前半部分，高位指针移动
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;				high = mid - 1;
				&lt;span style=&#34;color:#228b22&#34;&gt;// （全部元素） = （前半部分）+（后半部分）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#228b22&#34;&gt;// f[k] = f[k-1] + f[k-1]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#228b22&#34;&gt;// 因为前半部分有f[k-1]个元素，所以 k = k-1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;				k = k - 1;
			} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (temp[mid] &amp;lt; key) {
				&lt;span style=&#34;color:#228b22&#34;&gt;// 查找后半部分，高位指针移动
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;				low = mid + 1;
				&lt;span style=&#34;color:#228b22&#34;&gt;// （全部元素） = （前半部分）+（后半部分）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#228b22&#34;&gt;// f[k] = f[k-1] + f[k-1]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#228b22&#34;&gt;// 因为后半部分有f[k-1]个元素，所以 k = k-2
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;				k = k - 2;
			} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
				&lt;span style=&#34;color:#228b22&#34;&gt;// 如果为真则找到相应的位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (mid &amp;lt;= high) {
					&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; mid;
				} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
					&lt;span style=&#34;color:#228b22&#34;&gt;// 出现这种情况是查找到补充的元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;					&lt;span style=&#34;color:#228b22&#34;&gt;// 而补充的元素与high位置的元素一样
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;					&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; high;
				}
			}
		}
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -1;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;算法复杂度分析&#34;&gt;算法复杂度分析&lt;/h3&gt;
&lt;p&gt;算法复杂度 O(logn)&lt;/p&gt;
&lt;p&gt;平均性能要优于折半查找，如果是最坏情况比如如本例程序中 key=1,那么始终在左侧长半区查找，则查找效率要低于折半查找。&lt;/p&gt;
&lt;p&gt;二分查找分割方式 mid = (low+high)/2&lt;/p&gt;
&lt;p&gt;插值查找分割方式 mid = low + (high-low)*(key-a[low])/(a[high]-a[low])&lt;/p&gt;
&lt;p&gt;斐波那契查找分割方式 mid = low + Fibonacci[index - 1] - 1&lt;/p&gt;
&lt;p&gt;海量数据查找中，这种细微的差距会影响最终的查找效率。&lt;/p&gt;
&lt;h1 id=&#34;动态查找表dynamic-search-table&#34;&gt;动态查找表(Dynamic Search Table)&lt;/h1&gt;
&lt;p&gt;当查找表以顺序存储结构存储且需要保持有序时，若对查找表进行插入、删除或排序操作，就必须移动大量的记录，当记录数很多时，这种移动的代价很大。若查找表无序，则插入删除可无需移动大量记录，但于查找不利。利用树的形式组织查找表，可以对查找表进行动态高效的查找。&lt;/p&gt;
&lt;p&gt;在查找过程中同时插入查找表中不存在的数据元素, 或者从查找表中删除已经存在的某个数据元素。显然动态查找表的操作就是2个动作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找时插入数据元素&lt;/li&gt;
&lt;li&gt;查找时删除数据元素&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;动态查找表主要使用树形结构中的二叉排序树（Binary Sort Tree）、平衡二叉树（Balance Binary Tree或AVL Tree, Adelson-Velskii Landis Tree），&lt;strong&gt;AVL与BST均在961考纲中&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;二叉排序树&#34;&gt;二叉排序树&lt;/h2&gt;
&lt;p&gt;二叉排序树(Binary Sort Tree或Binary Search Tree) 的定义为：二叉排序树或者是空树，或者是满足下列性质的二叉树：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若左子树不为空，则左子树上所有结点的值(关键字)都小于根结点的值；&lt;/li&gt;
&lt;li&gt;若右子树不为空，则右子树上所有结点的值(关键字)都大于根结点的值；&lt;/li&gt;
&lt;li&gt;左、右子树都分别是二叉排序树。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;若按中序遍历一棵二叉排序树，所得到的结点序列是一个递增序列。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;二叉排序树性能&#34;&gt;二叉排序树性能&lt;/h3&gt;
&lt;p&gt;二叉排序树查找关键字的比较次数，等于该结点所在的层次数（查找成功）； 若查找不成功，其比较次数最多为树的深度。对于一棵具有n个结点的树来说，其深度介于㏒&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;(n+1)与n之间。二叉排序树的形态对于查找效率至关重要，或者说，一棵二叉排序树不一定就能提高查找的速度，而是要看这棵树的形态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;指导书中二叉排序树与二分查找的对比&lt;/strong&gt;：就维护表的&lt;strong&gt;有序性&lt;/strong&gt;而言，二叉排序树无需移动结点，只需修改指针即可完成插入和删除操作，平均执行时间为O(log&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;n)。二分查找的对象是&lt;strong&gt;有序顺序表&lt;/strong&gt;，若有插入和删除结点的操作，所花时间是O(n)。当有序表是&lt;strong&gt;静态查找表&lt;/strong&gt;时，宜用&lt;strong&gt;顺序表&lt;/strong&gt;作为其&lt;strong&gt;存储结构&lt;/strong&gt;，而采用二分查找实现其查找操作；若有序表是动态查找表，则应该选择二叉排序树作为其逻辑结构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;平衡二叉树&#34;&gt;平衡二叉树&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;为了避免树的高度增长过快，降低二叉排序的性能&lt;/strong&gt;，规定在插入和删除二叉树结点时，要保证任意结点的左、右树高度差的绝对值&lt;strong&gt;不超过1&lt;/strong&gt;，这样的二叉树称为平衡二叉树，简称平衡树。定义结点左子树和右子树的高度差为该节点的&lt;strong&gt;平衡因子&lt;/strong&gt;。平衡二叉树结点的平衡因子只可能是&lt;code&gt;-1&lt;/code&gt;、&lt;code&gt;0&lt;/code&gt;或&lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;平衡二叉树的插入过程的前半部分与二叉排序树相同，但是在新节点插入后，若造成查找路径上的某个结点不再平衡，则需要作出相应的调整。归纳总结为以下四种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LL平衡旋转（右单旋转）&lt;/li&gt;
&lt;li&gt;RR平衡旋转（左单旋转）&lt;/li&gt;
&lt;li&gt;LR平衡旋转（先左后右双旋转）&lt;/li&gt;
&lt;li&gt;RL平衡旋转（先右后左双旋转）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;平衡二叉树性能&#34;&gt;平衡二叉树性能&lt;/h3&gt;
&lt;p&gt;含有n个结点的平衡二叉树最大深度为O(log&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;n)，因此平衡二叉树的平均查找长度为O(log&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;n)。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;reference&#34;&gt;Reference&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/entry/5b6a89916fb9a04f86065737&#34;&gt;https://juejin.im/entry/5b6a89916fb9a04f86065737&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000022654107&#34;&gt;数据结构与算法之查找（静态查找与动态查找）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/fibonacci-search/&#34;&gt;Fibonacci Search on GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/cs/%E5%8A%A8%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8%E4%B8%8E%E9%9D%99%E6%80%81%E6%9F%A5%E6%89%BE%E8%A1%A8/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>C# in Depth</title>
        <link>https://www.openheart.icu/cs/csharp-in-depth/</link>
        <pubDate>Sat, 25 Jul 2020 00:14:11 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/csharp-in-depth/</guid>
        <description>42th openheart https://www.openheart.icu/cs/csharp-in-depth/ -&lt;p&gt;&lt;em&gt;本文为「C# in Depth」(4th edition)学习记录。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;part-1-c-in-context&#34;&gt;Part 1 C# in context&lt;/h1&gt;
&lt;h2 id=&#34;survival-of-the-sharpest&#34;&gt;Survival of the sharpest&lt;/h2&gt;
&lt;p&gt;本章主要讲C#的由来与介绍（吹嘘）。&lt;/p&gt;
&lt;p&gt;开始前可以回顾一下C#的历史，现在是北京时间2021-05-29 14:06:54，the last C# version is C# 9.&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history&#34;&gt;The history of C#&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;part-2-c-in-2-5&#34;&gt;Part 2 C# in 2-5&lt;/h1&gt;
&lt;h2 id=&#34;c-3-linq-and-everything-that-comes-with-it&#34;&gt;C# 3: LINQ and everything that comes with it&lt;/h2&gt;
&lt;h3 id=&#34;extension-methods&#34;&gt;Extension methods&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Extension methods allow existing classes to be extended without relying on inheritance or having to change the class&amp;rsquo;s source code. This means that if you want to add some methods into the existing String class you can do it quite easily. Here&amp;rsquo;s a couple of rules to consider when deciding on whether or not to use extension methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extension methods cannot be used to override existing methods&lt;/li&gt;
&lt;li&gt;An extension method with the same name and signature as an instance method will not be called&lt;/li&gt;
&lt;li&gt;The concept of extension methods cannot be applied to fields, properties or events&lt;/li&gt;
&lt;li&gt;Use extension methods sparingly&amp;hellip;.overuse can be a bad thing!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Times to use extension methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when you don&amp;rsquo;t control the types being extended&lt;/li&gt;
&lt;li&gt;where you don&amp;rsquo;t want to force the implementor to provide code that can be done using the existing methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For an example of the second point; you might have an extension method on &lt;code&gt;IList&amp;lt;T&amp;gt;&lt;/code&gt; (for example, &lt;code&gt;Sort&lt;/code&gt;) that can be written entirely using the existing &lt;code&gt;IList&amp;lt;T&amp;gt;&lt;/code&gt; members&amp;hellip; so why force anybody else to write anything? This is the foundation block of LINQ, and allowed Microsoft to provide &lt;em&gt;much&lt;/em&gt; more functionality without breaking anything.&lt;/p&gt;
&lt;p&gt;Times to &lt;strong&gt;not&lt;/strong&gt; use extension methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when polymorphism is critical; you cannot guarantee that your code will be the version that gets executed with an extension method, as methods directly on the type take precedence&lt;/li&gt;
&lt;li&gt;when you need access to private/protected members&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;reference-1&#34;&gt;Reference&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/787324/when-do-you-use-extension-methods-ext-methods-vs-inheritance&#34;&gt;When do you use extension methods, ext. methods vs. inheritance?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;part-3-c-in-6&#34;&gt;Part 3 C# in 6&lt;/h1&gt;
&lt;h2 id=&#34;super-sleek-properties-and-expression-bodied-members&#34;&gt;Super-sleek properties and expression-bodied members&lt;/h2&gt;
&lt;h3 id=&#34;upgrades-to-automatically-implemented-properties&#34;&gt;Upgrades to automatically implemented properties&lt;/h3&gt;
&lt;h4 id=&#34;automatically-implemented-properties-in-structs&#34;&gt;Automatically implemented properties in structs&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;In C# 6, the language and the compiler have a closer understanding of the relationship between automatically implemented properties and the fields they’re backed by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You’re allowed to set an automatically implemented property before all the fields are initialized.&lt;/li&gt;
&lt;li&gt;Setting an automatically implemented property counts as initializing the field.&lt;/li&gt;
&lt;li&gt;You’re allowed to read an automatically implemented property before other fields are initialized, so long as you’ve set it beforehand.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Employee&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;alias&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; name;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Employee(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; name, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;alias&lt;/span&gt;) : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;()
    {
        &lt;span style=&#34;color:#228b22&#34;&gt;// Qualify the members of the class
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      	&lt;span style=&#34;color:#228b22&#34;&gt;// Chaining to default constructor
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.name = name;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;alias&lt;/span&gt; = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;alias&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ServiceDescriptor&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; ServiceDescriptor(Type serviceType, ServiceLifetime lifetime)
    {
      	Lifetime = lifetime;
     		ServiceType = serviceType;
    }

  	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; ServiceDescriptor(
    		Type serviceType,
    		&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; instance)
    		: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;(serviceType, ServiceLifetime.Singleton)
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (serviceType == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
        {
          	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArgumentNullException(nameof(serviceType));
        }

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
        {
          	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArgumentNullException(nameof(instance));
        }

        ImplementationInstance = instance;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;reference-2&#34;&gt;Reference&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-constructors&#34;&gt;Using Constructors (C# Programming Guide)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/this&#34;&gt;this (C# Reference)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;part-4-c-in-7-and-beyond&#34;&gt;Part 4 C# in 7 and beyond&lt;/h1&gt;
&lt;h2 id=&#34;concise-code-in-c-7&#34;&gt;Concise code in C# 7&lt;/h2&gt;
&lt;h3 id=&#34;minor-improvements-in-c-73&#34;&gt;Minor improvements in C# 7.3&lt;/h3&gt;
&lt;h4 id=&#34;generic-type-constraints&#34;&gt;Generic type constraints&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Prior to C# 7.3, a type constraint couldn’t specify that the type argument must derive from Enum or Delegate.&lt;/p&gt;
&lt;p&gt;Before C# 7.3, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.enum&#34;&gt;Enum&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.delegate&#34;&gt;Delegate&lt;/a&gt;, and &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.multicastdelegate&#34;&gt;MulticastDelegate&lt;/a&gt; were also disallowed as base class constraints.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; SampleEnum {}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; EnumMethod&amp;lt;T&amp;gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; T : struct, Enum {}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; DelegateMethod&amp;lt;T&amp;gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; T : Delegate {}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; UnmanagedMethod&amp;lt;T&amp;gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; T : unmanaged {}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyClass&lt;/span&gt;&amp;lt;T, U&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; T : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;where&lt;/span&gt; U : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; {}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;B&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; M&amp;lt;T&amp;gt;(T? item) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; T : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; { }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; M&amp;lt;T&amp;gt;(T? item);

}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;D&lt;/span&gt; : B
{
    &lt;span style=&#34;color:#228b22&#34;&gt;// Without the &amp;#34;default&amp;#34; constraint, the compiler tries to override the first method in B
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; M&amp;lt;T&amp;gt;(T? item) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; T : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; { }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;In a nullable context in C# 8.0 and later, the nullability of the base class type is enforced. If the base class is non-nullable (for example &lt;code&gt;Base&lt;/code&gt;), the type argument must be non-nullable. If the base class is nullable (for example &lt;code&gt;Base?&lt;/code&gt;), the type argument may be either a nullable or non-nullable reference type. The compiler issues a warning if the type argument is a nullable reference type when the base class is non-nullable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;type-parameter-naming-guidelinesreference3httpsdocsmicrosoftcomen-usdotnetcsharpprogramming-guidegenericsgeneric-type-parameters&#34;&gt;Type parameter naming guidelines(&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/generic-type-parameters&#34;&gt;Reference3&lt;/a&gt;)&lt;/h5&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do&lt;/strong&gt; name generic type parameters with descriptive names, unless a single letter name is completely self explanatory and a descriptive name would not add value.&lt;/p&gt;
&lt;p&gt;C#Copy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; ISessionChannel&amp;lt;TSession&amp;gt; { &lt;span style=&#34;color:#228b22&#34;&gt;/*...*/&lt;/span&gt; }
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delegate&lt;/span&gt; TOutput Converter&amp;lt;TInput, TOutput&amp;gt;(TInput &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;List&lt;/span&gt;&amp;lt;T&amp;gt; { &lt;span style=&#34;color:#228b22&#34;&gt;/*...*/&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consider&lt;/strong&gt; using T as the type parameter name for types with one single letter type parameter.&lt;/p&gt;
&lt;p&gt;C#Copy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; IComparer&amp;lt;T&amp;gt;() { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; }
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;bool&lt;/span&gt; Predicate&amp;lt;T&amp;gt;(T item);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Nullable&lt;/span&gt;&amp;lt;T&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; T : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;struct&lt;/span&gt; { &lt;span style=&#34;color:#228b22&#34;&gt;/*...*/&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do&lt;/strong&gt; prefix descriptive type parameter names with &amp;ldquo;T&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;C#Copy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; ISessionChannel&amp;lt;TSession&amp;gt;
{
    TSession Session { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consider&lt;/strong&gt; indicating constraints placed on a type parameter in the name of parameter. For example, a parameter constrained to &lt;code&gt;ISession&lt;/code&gt; may be called &lt;code&gt;TSession&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;reference-3&#34;&gt;Reference:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/where-generic-type-constraint&#34;&gt;where (generic type constraint) (C# Reference)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/archive/blogs/ericlippert/constraints-are-not-part-of-the-signature&#34;&gt;Constraints are not part of the signature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/generic-type-parameters&#34;&gt;Generic type parameters (C# Programming Guide)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;my-part-5-whats-new-in-c-90&#34;&gt;My Part 5 What&amp;rsquo;s new in C# 9.0&lt;/h1&gt;
&lt;h2 id=&#34;reference-4&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history&#34;&gt;What&amp;rsquo;s new in C# 9.0&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/cs/csharp-in-depth/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Implementing the Singleton Pattern in C#</title>
        <link>https://www.openheart.icu/cs/implementing-the-singleton-pattern-in-csharp/</link>
        <pubDate>Sat, 25 Jul 2020 00:14:11 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/implementing-the-singleton-pattern-in-csharp/</guid>
        <description>42th openheart https://www.openheart.icu/cs/implementing-the-singleton-pattern-in-csharp/ -&lt;h1 id=&#34;implementing-the-singleton-pattern-in-chttpscsharpindepthcomarticlessingleton&#34;&gt;&lt;a href=&#34;https://csharpindepth.com/articles/Singleton&#34;&gt;Implementing the Singleton Pattern in C#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在C＃中实现单例模式。该模式是非常常见的设计模式之一，某个对象全局只需要一个实例时，就可以使用单例模式。它的优点也显而易见：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它能够避免对象重复创建，节约空间并提升效率&lt;/li&gt;
&lt;li&gt;避免由于操作不同实例导致的逻辑错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;以下是原文作者Jon Skeet 对C#单例模式的介绍。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;单例模式是软件工程中最著名的模式之一。本质上，单例是仅允许创建其自身的单个实例的类，并且通常提供对该实例的简单访问。最常见的是，单例在创建实例时不允许指定任何参数，否则对实例的第二次请求但参数不同可能会出现问题！ （如果应该为具有相同参数的所有请求访问相同的实例，则使用工厂模式更为合适。）本文仅涉及不需要参数的情况。通常，单例的要求是它们是懒惰地创建的，即：直到首次需要实例时才创建实例。&lt;/p&gt;
&lt;p&gt;在C＃中有多种不同的方式来实现单例模式。我将在这里以从简到难顺序（&lt;em&gt;in reverse order of elegance&lt;/em&gt;）介绍它们，从最常见的线程安全性开始，逐步发展为完全延迟加载，线程安全，简单且高性能的版本。&lt;/p&gt;
&lt;p&gt;所有这些实现都有四个共同的特征，但是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个构造函数，私有且无参数。这样可以防止其他类实例化它（这将违反模式）。请注意，它还防止了子类化（&lt;em&gt;subclassing&lt;/em&gt;）如果一个单例可以被子类化一次，则可以被子类化两次，并且如果每个子类都可以创建一个实例，则将违反（&lt;em&gt;violated&lt;/em&gt;）该模式。如果您需要基本类型的单个实例，则可以使用工厂模式，但是直到运行时才知道确切的类型。&lt;/li&gt;
&lt;li&gt;该类是密封的。严格来说，由于上述几点，这是不必要的，但可以帮助&lt;code&gt;JIT&lt;/code&gt;进行更多优化。&lt;/li&gt;
&lt;li&gt;一个静态变量，其中包含对创建的单个实例的引用（如果有）。&lt;/li&gt;
&lt;li&gt;公共静态方法是获取对创建的单个实例的引用，并在必要时创建一个实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，所有这些实现还使用公共静态属性&lt;code&gt;Instance&lt;/code&gt;作为访问实例的方式。在所有情况下，都可以轻松地将属性转换为方法，而不会影响线程安全性或性能。&lt;/p&gt;
&lt;h2 id=&#34;first-version---not-thread-safe&#34;&gt;First version - not thread-safe&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Bad code! Do not use!
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance
  {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;
    {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
      {
        instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();
      }
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如前所述，以上内容不是线程安全的。&lt;/p&gt;
&lt;p&gt;两个不同的线程都可以执行判断（&lt;em&gt;evaluated the test&lt;/em&gt;）&lt;code&gt;if(instance == null)&lt;/code&gt;并发现它为&lt;code&gt;true&lt;/code&gt;，然后都创建实例，这违反了单例模式。请注意，实际上可能已经在计算表达式之前创建了实例，但是内存模型不能保证实例的新值能暴露给其他线程，除非已传递适当的内存屏障（互斥锁）（&lt;em&gt;memory barriers&lt;/em&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;second-version---simple-thread-safety&#34;&gt;Second version - simple thread-safety&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; padlock = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt;();

  Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance
  {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;
    {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;lock&lt;/span&gt; (padlock)
      {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
        {
          instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此实现是线程安全的。线程在共享对象上加锁（&lt;em&gt;takes out a lock&lt;/em&gt;），然后在创建实例之前检查是否已创建实例。这可以解决内存屏障问题（因为锁定可确保所有读取均在获取锁之后逻辑发生，而解锁可确保所有写入均在锁释放之前逻辑发生）并确保只有一个线程将创建一个实例（仅一个线程一次可以位于代码的该部分中，到第二个线程进入该线程时，第一个线程将创建该实例，因此该表达式的计算结果为&lt;code&gt;false&lt;/code&gt;）。不幸的是，每次请求实例时都需要获取锁，因此性能会受到影响。&lt;/p&gt;
&lt;p&gt;请注意，我没有像此实现的某些版本那样锁定&lt;code&gt;typeof(Singleton)&lt;/code&gt;，而是锁定了类私有的静态变量的值。锁定其他类可以访问和锁定的对象（such as the type）可能会导致性能问题甚至死锁。这是我的一般样式首选项-尽可能仅锁定专门为锁定目的而创建的对象，或者为特定目的而将其锁定在哪个文档上（例如用于等待/触发队列）。通常，此类对象应为使用它们的类所专用。这有助于使编写线程安全的应用程序变得更加容易。&lt;/p&gt;
&lt;h2 id=&#34;third-version---attempted-thread-safety-using-double-check-locking&#34;&gt;Third version - attempted thread-safety using double-check locking&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Bad code! Do not use!
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; padlock = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt;();

  Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance
  {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;
    {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
      {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;lock&lt;/span&gt; (padlock)
        {
          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
          {
            instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();
          }
        }
      }
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此实现方式（&lt;em&gt;implementation&lt;/em&gt;）尝试不再每次都加锁，同时保证线程安全。遗憾的是，该模式有四个缺点（&lt;em&gt;there are four downsides to the pattern&lt;/em&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它在Java中不起作用。这么说这似乎有些不合理，但是值得一提的是，您是否需要Java中的单例模式，C＃程序员也很可能是Java程序员。 Java内存模型无法确保在将对新对象的引用分配给实例之前，执行完构造函数。 Java内存模型针对1.5版进行了重新加工，但是在此之后，在没有易失性变量的情况下，双重检查锁定仍然被破坏（像C＃一样）。&lt;/li&gt;
&lt;li&gt;没有任何内存障碍，它在&lt;code&gt;ECMA CLI&lt;/code&gt;规范中也被打破。在.NET 2.0内存模型（比ECMA规范更强）下，它很可能是安全的，但我宁愿不依赖那些更强的语义，尤其是在对安全性有任何疑问的情况下。将实例变量设置为&lt;code&gt;volatile&lt;/code&gt;也有效，就像显式的内存屏障调用一样，但这样的话即使是大佬也无法确切地确定需要哪些屏障。我倾向于不去用大佬们有争议的方法！&lt;/li&gt;
&lt;li&gt;很容易出错。该模式必须与上面的完全一样-任何重大更改都可能影响性能或正确性。&lt;/li&gt;
&lt;li&gt;它的性能仍然不如后来的实现方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fourth-version---not-quite-as-lazy-but-thread-safe-without-using-locks&#34;&gt;Fourth version - not quite as lazy, but thread-safe without using locks&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; Singleton instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();

  &lt;span style=&#34;color:#228b22&#34;&gt;// Explicit static constructor to tell C# compiler
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#228b22&#34;&gt;// not to mark type as beforefieldinit
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance
  {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;
    {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如您所见，这确实非常简单，那它是怎么实现线程安全的，它有多懒呢？Well，将C＃中的静态构造函数指定为仅在创建类的实例或引用静态成员时执行，并且每个&lt;code&gt;AppDomain&lt;/code&gt;仅执行一次。鉴于无论其他情况如何都需要执行对新构造的类型的检查，因此比在前面的示例中添加额外的检查要快。&lt;/p&gt;
&lt;p&gt;但是，这种方法也有一些缺点（&lt;em&gt;wrinkles&lt;/em&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它没有其他实现那么懒。特别是，当具有实例以外的静态成员时，对这些成员的首次引用将涉及创建实例。在下一个实现中将对此进行更正。&lt;/li&gt;
&lt;li&gt;如果一个静态构造函数调用另一个而又再次调用第一个静态构造函数，则会带来复杂性。请查阅&lt;code&gt;.NET规范（currently section 9.5.3 of partition II&lt;/code&gt;），以获取有关类型初始值设定项的确切性质的更多详细信息。它们不太可能会影响程序（&lt;em&gt;they&amp;rsquo;re unlikely to bite you&lt;/em&gt;），但值得一提的是，静态构造函数在生命周期内存在互相引用（&lt;em&gt;the consequences of static constructors which refer to each other in a cycle&lt;/em&gt;）。&lt;/li&gt;
&lt;li&gt;只有当类型未使用称为&lt;code&gt;beforefieldinit&lt;/code&gt;的特殊标志进行标记时，.NET才能保证类型初始化程序的惰性。不幸的是，C＃编译器（至少是.NET 1.1运行时中提供的）将所有没有静态构造函数（即看起来像构造函数但被标记为静态的块）的类型都标记为&lt;code&gt;beforefieldinit&lt;/code&gt;。我有一篇&lt;a href=&#34;https://csharpindepth.com/articles/BeforeFieldInit&#34;&gt;文章&lt;/a&gt;，详细介绍了这个问题。还要注意，它会影响性能，如页面底部所述。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种实现方式可以采取的一种捷径：仅使实例成为公共静态只读变量，并完全摆脱该属性。这使得基本框架代码绝对很小！但是，许多人更喜欢拥有属性，以防将来需要采取进一步的措施，并且&lt;code&gt;JIT&lt;/code&gt;内联可能使性能相同。 （请注意，如果您需要惰性，则仍然需要静态构造函数本身。）&lt;/p&gt;
&lt;h2 id=&#34;fifth-version---fully-lazy-instantiation&#34;&gt;Fifth version - fully lazy instantiation&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Singleton()
  {
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance
  {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; Nested.instance; }
  }

  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Nested&lt;/span&gt;
  {
    &lt;span style=&#34;color:#228b22&#34;&gt;// Explicit static constructor to tell C# compiler
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// not to mark type as beforefieldinit
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Nested()
    {
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; Singleton instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton();
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里，实例化是由对嵌套类的静态成员的第一次引用触发的，该实例仅在&lt;code&gt;Instance&lt;/code&gt;中发生。这意味着该实现完全是懒的，同事具有先前性能的所有性能优势。请注意，尽管嵌套类可以访问封闭类的私有成员，但事实并非如此，因此这里需要实例化。但是，由于类本身是私有的，所以这不会引起任何其他问题。但是，为了使实例化变得懒惰，代码有些复杂。&lt;/p&gt;
&lt;h2 id=&#34;sixth-version---using-net-4s-lazyt-type&#34;&gt;Sixth version - using .NET 4&amp;rsquo;s &lt;code&gt;Lazy&amp;lt;T&amp;gt;&lt;/code&gt; type&lt;/h2&gt;
&lt;p&gt;如果使用的是.NET 4（或更高版本），则可以使用&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd642331.aspx&#34;&gt;System.Lazy&lt;/a&gt;类型使懒变得非常简单。您需要做的就是将委托传递给构造函数，该构造函数调用Singleton构造函数，使用&lt;code&gt;lambda表达式&lt;/code&gt;最容易完成。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Singleton&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; Lazy&amp;lt;Singleton&amp;gt; lazy = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Lazy&amp;lt;Singleton&amp;gt; (() =&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Singleton());

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Singleton Instance { 
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; lazy.Value; }
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Singleton()
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它很简单，性能也很好。如果需要，还可以使用&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd642334.aspx&#34;&gt;IsValueCreated&lt;/a&gt;属性检查实例是否已创建。&lt;/p&gt;
&lt;p&gt;上面的代码隐式地使用&lt;code&gt;LazyThreadSafetyMode.ExecutionAndPublication&lt;/code&gt;作为&lt;code&gt;Lazy&amp;lt;Singleton&amp;gt;&lt;/code&gt;的线程安全模式。根据您的要求，您可能希望尝试其他模式。&lt;/p&gt;
&lt;h2 id=&#34;performance-vs-laziness&#34;&gt;Performance vs laziness&lt;/h2&gt;
&lt;p&gt;在许多情况下，您实际上并不需要完全的懒，除非类初始化时需要做特别耗时的事情，或者在其他地方有副作用，否则可以忽略上面有关显式静态构造函数的实现方法。这可以提高性能，因为它允许&lt;code&gt;JIT&lt;/code&gt;编译器进行一次检查（例如，在方法开始时进行检查），以确保类型已初始化，然后从此开始进行假定。如果您的单例实例是在相对紧凑的循环中引用的，则这可能会（相对）产生明显的性能差异。您应该确定是否需要完全延迟的实例化，并在类中适当地记录此决定。&lt;/p&gt;
&lt;p&gt;该页面存在的很多原因是人们试图变得聪明（&lt;em&gt;A lot of the reason for this page&amp;rsquo;s existence is people trying to be clever&lt;/em&gt;），因此提出了双重检查的锁定算法。人们常常认为加锁是付出昂贵代价的操作，这是普遍的并且是错误的。我编写了一个非常快速的基准测试，它以十亿次尝试各种变体，以循环方式获取单例实例。这并不是十分科学（&lt;em&gt;It&amp;rsquo;s not terribly scientific&lt;/em&gt;），因为在现实生活中，您可能想知道，如果每次迭代实际上都涉及到对获取单例的方法的调用等，该过程有多快。但是，它确实显示了重要的意义。在我的笔记本电脑上，最慢的解决方案（约为5倍）是加锁的解决方法（解决方案2）。那重要吗？当您记住它仍然可以在40秒内成功获取十亿次单例时，可能就不会了。 （注意：本文最初是在很早以前写的，我希望现在可以有更好的性能。）这意味着，如果您“仅”每秒获取40万次单例，则获取的成本将不断增加达到1％的性能。因此，改善性能并不会起到太大作用。现在，如果您经常使用单例模式，您是否是在循环中使用它？如果您非常在乎提高性能，为什么不在循环之外声明局部变量，请获取一次单例然后循环。所以，即使是最慢的实现也很容易做到。&lt;/p&gt;
&lt;p&gt;我非常有兴趣看到一个现实世界的应用程序，在该应用程序中，使用简单的加锁和使用较快速的解决方案之一之间的差异实际上带来了显着的性能差异。&lt;/p&gt;
&lt;h2 id=&#34;exceptions&#34;&gt;Exceptions&lt;/h2&gt;
&lt;p&gt;有时，您需要在单例构造函数中进行工作，这可能会引发异常，但对整个应用程序可能不会致命。您的应用程序可能能够解决问题，并希望重试。在这个阶段，使用类型初始值设定项构造单例成为问题。不同的运行时对这种情况的处理方式不同，但是我不知道哪个运行者可以做所需的事情（再次运行类型初始化器），即使这样做，您的代码也会在其他运行时中损坏。为了避免这些问题，我建议使用页面上列出的第二种模式，只需使用一个简单的锁，然后每次都要进行检查，如果尚未成功构建该实例，则可以在方法/属性中进行构建。&lt;/p&gt;
&lt;h2 id=&#34;conclusion-modified-slightly-on-january-7th-2006-updated-feb-12th-2011&#34;&gt;Conclusion (modified slightly on January 7th 2006; updated Feb 12th 2011)&lt;/h2&gt;
&lt;p&gt;在C＃中有多种不同的方式来实现单例模式。读者写信给我，详细介绍了他封装同步方面的一种方式，尽管我承认这在某些非常特殊的情况下（特别是在您想要非常高性能的情况下，并且能够确定单例是否已经被使用的能力）很有用。创建，并且完全懒惰（无论是否调用其他静态成员）。我个人认为这种情况不会经常出现，值得在此页面上进行进一步介绍，但是如果您遇到这种情况，请发&lt;a href=&#34;skeet@pobox.com&#34;&gt;邮件&lt;/a&gt;给我。&lt;/p&gt;
&lt;p&gt;我的个人偏爱是解决方案4：通常，我只有在我需要能够在不触发初始化的情况下调用其他静态方法，或者如果我需要知道单例是否已经被实例化，或者是否需要知道单例是否已被实例化时才不会使用该方法。我不记得我上次遇到这种情况，假设我有过，在这种情况下，我可能会选择解决方案2，该解决方案仍然很不错，而且很容易就可以实现。&lt;/p&gt;
&lt;p&gt;解决方案5很优雅，但比2或4棘手，而且正如我上面所说，它提供的好处似乎很少有用。如果您使用的是.NET 4，则解决方案6是实现懒惰的一种更简单的方法，它还具有明显的惰性。我目前倾向于仅通过习惯就使用解决方案4，但是如果我与经验不足的开发人员一起工作，我很可能会选择解决方案6作为一种简单且普遍适用的模式开始。&lt;/p&gt;
&lt;p&gt;（我不会使用解决方案1，因为它是有缺陷的，我不会使用解决方案3，因为它比不过5。）&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;用上述第六种方式实现读取文件的方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Collections.Generic&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.IO&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Text&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System.Web&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;Demo&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyFileReader&lt;/span&gt;
    {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; Lazy&amp;lt;MyFileReader&amp;gt; lazy = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Lazy&amp;lt;MyFileReader&amp;gt;(() =&amp;gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; MyFileReader());

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; MyFileReader Instance =&amp;gt; lazy.Value;

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; MyFileReader()
        {
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;///  读取json格式文件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;param name=&amp;#34;filePath&amp;#34;&amp;gt;eg：\\Demo\\Config.txt&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;param name=&amp;#34;encodType&amp;#34;&amp;gt;默认为 Encoding.Default&amp;lt;/param&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; JsonReader(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; filePath, Encoding encodType)
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (encodType == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
            {
                encodType = Encoding.Default;
            }
            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; jsonobj = &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;.Empty;

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; (StreamReader sr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StreamReader(System.Web.HttpRuntime.AppDomainAppPath + filePath, encodType))
            {
                &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; line;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; ((line = sr.ReadLine()) != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
                {
                    jsonobj = jsonobj + line.ToString();
                }
            }

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; jsonobj;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;调用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; json = fileReader.JsonReader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\\Demo\\Config.txt&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://csharpindepth.com/articles/Singleton&#34;&gt;https://csharpindepth.com/articles/Singleton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/leolion/p/10241822.html&#34;&gt;https://www.cnblogs.com/leolion/p/10241822.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/cs/implementing-the-singleton-pattern-in-csharp/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
  </channel>
</rss> 