<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>42th openheart</title>
    <link>https://www.openheart.icu/</link>
    <description>Recent content on 42th openheart</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ALL RIGHTS RESERVED KRIS NIE</copyright>
    <lastBuildDate>Sun, 17 Oct 2021 11:35:34 +0000</lastBuildDate>
    
        <atom:link href="https://www.openheart.icu/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>To My Children</title>
        <link>https://www.openheart.icu/boom/%E7%BB%99%E6%88%91%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%AD%A9%E5%AD%90/</link>
        <pubDate>Wed, 17 Feb 2021 00:54:02 +0000</pubDate>
        
        <guid>https://www.openheart.icu/boom/%E7%BB%99%E6%88%91%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%AD%A9%E5%AD%90/</guid>
        <description>42th openheart https://www.openheart.icu/boom/%E7%BB%99%E6%88%91%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%AD%A9%E5%AD%90/ -&lt;blockquote&gt;
&lt;p&gt;孩子，&lt;/p&gt;
&lt;p&gt;我希望你自始至终都是一个理想主义者。&lt;/p&gt;
&lt;p&gt;你可以是农民，&lt;/p&gt;
&lt;p&gt;可以是工程师，&lt;/p&gt;
&lt;p&gt;可以是演员，&lt;/p&gt;
&lt;p&gt;可以是流浪汉，&lt;/p&gt;
&lt;p&gt;但你必须是个理想主义者。&lt;/p&gt;
&lt;p&gt;童年，&lt;/p&gt;
&lt;p&gt;我们讲英雄故事给你听，&lt;/p&gt;
&lt;p&gt;并不是一定要你成为英雄，&lt;/p&gt;
&lt;p&gt;而是希望你具有纯正的品格。&lt;/p&gt;
&lt;p&gt;少年，&lt;/p&gt;
&lt;p&gt;我们让你接触诗歌、绘画、音乐，&lt;/p&gt;
&lt;p&gt;是为了让你的心灵填满高尚的情趣，&lt;/p&gt;
&lt;p&gt;这些高尚的情趣会支撑你的一生，&lt;/p&gt;
&lt;p&gt;使你在最严酷的冬天也不会忘记玫瑰的芳香，&lt;/p&gt;
&lt;p&gt;理想会使人出众。&lt;/p&gt;
&lt;p&gt;孩子，不要为自己的外形担忧。&lt;/p&gt;
&lt;p&gt;理想纯洁你的气质，&lt;/p&gt;
&lt;p&gt;而最美貌的女人也会因为庸俗而令人生厌。&lt;/p&gt;
&lt;p&gt;通向理想的途径往往不尽如人意，&lt;/p&gt;
&lt;p&gt;而你亦会为此受尽磨难。&lt;/p&gt;
&lt;p&gt;但是，孩子，&lt;/p&gt;
&lt;p&gt;你尽管去争取，&lt;/p&gt;
&lt;p&gt;理想主义者的结局悲壮而绝不可怜。&lt;/p&gt;
&lt;p&gt;在貌似坎坷的人生里，&lt;/p&gt;
&lt;p&gt;你会结识许多智者和君子，&lt;/p&gt;
&lt;p&gt;你会见到许多旁人无法遇到的风景和奇迹。&lt;/p&gt;
&lt;p&gt;选择平庸虽然稳妥，但绝无色彩。&lt;/p&gt;
&lt;p&gt;不要为蝇头小利放弃自己的理想，&lt;/p&gt;
&lt;p&gt;不要为某种潮流而改换自己的信念。&lt;/p&gt;
&lt;p&gt;物质世界的外表太过复杂，&lt;/p&gt;
&lt;p&gt;你要懂得如何去拒绝虚荣的诱惑。&lt;/p&gt;
&lt;p&gt;理想不是实惠的东西，&lt;/p&gt;
&lt;p&gt;它往往不能带给你尘世的享受。&lt;/p&gt;
&lt;p&gt;因此你必须习惯无人欣赏，&lt;/p&gt;
&lt;p&gt;学会精神享受，学会与他人不同。&lt;/p&gt;
&lt;p&gt;其次，孩子，&lt;/p&gt;
&lt;p&gt;我希望你是个踏实的人。&lt;/p&gt;
&lt;p&gt;人生太过短促，&lt;/p&gt;
&lt;p&gt;而虚的东西又太多，&lt;/p&gt;
&lt;p&gt;你很容易眼花缭乱，最终一事无成。&lt;/p&gt;
&lt;p&gt;如果你是个美貌的女孩，&lt;/p&gt;
&lt;p&gt;年轻的时候会有许多男性宠你，&lt;/p&gt;
&lt;p&gt;你得到的东西太过容易，&lt;/p&gt;
&lt;p&gt;这会使你流于浅薄和虚浮；&lt;/p&gt;
&lt;p&gt;如果你是个极聪明的男孩，&lt;/p&gt;
&lt;p&gt;又会以为自己能够成就许多大事而流于轻佻。&lt;/p&gt;
&lt;p&gt;记住，每个人的能力有限，&lt;/p&gt;
&lt;p&gt;我们活在世上能做好一件事足矣。&lt;/p&gt;
&lt;p&gt;写好一本书，做好一个主妇。&lt;/p&gt;
&lt;p&gt;不要轻视平凡的人，不要投机取巧，&lt;/p&gt;
&lt;p&gt;不要攻击自己做不到的事。&lt;/p&gt;
&lt;p&gt;你长大后会知道，做好一件事太难，&lt;/p&gt;
&lt;p&gt;但绝不要放弃。&lt;/p&gt;
&lt;p&gt;你要懂得和珍惜感情。&lt;/p&gt;
&lt;p&gt;不管男人女人，&lt;/p&gt;
&lt;p&gt;不管墙内墙外，相交一场实在不易。&lt;/p&gt;
&lt;p&gt;交友的过程会有误会和摩擦，&lt;/p&gt;
&lt;p&gt;但想一想，&lt;/p&gt;
&lt;p&gt;诺大世界，有缘结伴而行的能有几人？&lt;/p&gt;
&lt;p&gt;你要明白朋友终会离去，&lt;/p&gt;
&lt;p&gt;生活中能有人伴在身边，&lt;/p&gt;
&lt;p&gt;听你倾谈，倾谈给你听，就应该感激。&lt;/p&gt;
&lt;p&gt;要爱自己和爱他人，&lt;/p&gt;
&lt;p&gt;要懂自己和懂他人。&lt;/p&gt;
&lt;p&gt;你的心要如溪水般柔软，&lt;/p&gt;
&lt;p&gt;你的眼波要像春天般明媚。&lt;/p&gt;
&lt;p&gt;你要会流泪，&lt;/p&gt;
&lt;p&gt;会孤身一人坐在黑暗中听伤感的音乐。&lt;/p&gt;
&lt;p&gt;你要懂得欣赏悲剧，&lt;/p&gt;
&lt;p&gt;悲剧能丰富你的心灵。&lt;/p&gt;
&lt;p&gt;希望你不要媚俗。&lt;/p&gt;
&lt;p&gt;你是个独立的人，&lt;/p&gt;
&lt;p&gt;无人能抹杀你的独立性，&lt;/p&gt;
&lt;p&gt;除非你向世俗妥协。&lt;/p&gt;
&lt;p&gt;要学会欣赏真，&lt;/p&gt;
&lt;p&gt;要在重重面具下看到真。&lt;/p&gt;
&lt;p&gt;世上圆滑标准的人很多，&lt;/p&gt;
&lt;p&gt;但出类拔萃的人极少。&lt;/p&gt;
&lt;p&gt;而往往出类拔萃又隐藏在卑琐狂荡之下。&lt;/p&gt;
&lt;p&gt;在形式上我们无法与既定的世俗争斗，&lt;/p&gt;
&lt;p&gt;而在内心我们都是自己的国王。&lt;/p&gt;
&lt;p&gt;如果你的脸上出现谄媚的笑容，&lt;/p&gt;
&lt;p&gt;我将会羞愧地掩面而去。&lt;/p&gt;
&lt;p&gt;世俗的许多东西虽耀眼却无价值，&lt;/p&gt;
&lt;p&gt;不要把自己置于大众的天平上，&lt;/p&gt;
&lt;p&gt;不然你会因此无所适从，人云亦云。&lt;/p&gt;
&lt;p&gt;在具体的做人上，&lt;/p&gt;
&lt;p&gt;我希望你不要打断别人的谈话，&lt;/p&gt;
&lt;p&gt;不要娇气十足。&lt;/p&gt;
&lt;p&gt;你每天至少要拿出两小时来读书，&lt;/p&gt;
&lt;p&gt;要回信写信给你的朋友。&lt;/p&gt;
&lt;p&gt;不要老是想着别人应该为你做些什么，&lt;/p&gt;
&lt;p&gt;而要想着怎么去帮助他人。&lt;/p&gt;
&lt;p&gt;借他人的东西要还，&lt;/p&gt;
&lt;p&gt;不要随便接受别人的恩惠。&lt;/p&gt;
&lt;p&gt;要记住，别人的东西，再好也是别人的；&lt;/p&gt;
&lt;p&gt;自己的东西，再差也是自己的。&lt;/p&gt;
&lt;p&gt;孩子，还有一件事，&lt;/p&gt;
&lt;p&gt;虽然做起来很难，但相当重要，&lt;/p&gt;
&lt;p&gt;这就是要有勇气正视自己的缺点。&lt;/p&gt;
&lt;p&gt;你会一年年地长大，&lt;/p&gt;
&lt;p&gt;会渐渐遇到比你强、比你优秀的人，&lt;/p&gt;
&lt;p&gt;会发现自己身上有许多你所厌恶的缺点。&lt;/p&gt;
&lt;p&gt;这会使你沮丧和自卑。&lt;/p&gt;
&lt;p&gt;但你一定要正视它，&lt;/p&gt;
&lt;p&gt;不要躲避，要一点点地加以改正。&lt;/p&gt;
&lt;p&gt;战胜自己比征服他人还要艰巨和有意义。&lt;/p&gt;
&lt;p&gt;不管世界潮流如何变化，&lt;/p&gt;
&lt;p&gt;但人的优秀品质却是永恒的：&lt;/p&gt;
&lt;p&gt;正直、勇敢、独立。&lt;/p&gt;
&lt;p&gt;我希望你是一个优秀的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这首散文诗选自张梅老师的《&lt;a href=&#34;https://book.douban.com/subject/26687021/&#34;&gt;木屐声声&lt;/a&gt;》 ，我读了好几遍，想从头当个孩子。&lt;/p&gt;
- https://www.openheart.icu/boom/%E7%BB%99%E6%88%91%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%AD%A9%E5%AD%90/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>CSharp Special Characters</title>
        <link>https://www.openheart.icu/cs/csharp-special-characters/</link>
        <pubDate>Sat, 23 Jan 2021 12:14:19 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/csharp-special-characters/</guid>
        <description>42th openheart https://www.openheart.icu/cs/csharp-special-characters/ -&lt;h1 id=&#34;heading&#34;&gt;?&lt;/h1&gt;
&lt;p&gt;There are 4 question marks &lt;code&gt;?&lt;/code&gt; used in C# syntax which I think is pretty confusing sometimes. Here I will attempt to explain them to you.&lt;/p&gt;
&lt;h2 id=&#34;1-the--operator-since-visual-studio-2003&#34;&gt;1) The ?: Operator (since Visual Studio 2003)&lt;/h2&gt;
&lt;p&gt;The format : &lt;code&gt;condition ? first_expression : second_expression;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;condition&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;first_expression&lt;/code&gt; shall be returned, otherwise &lt;code&gt;second_expression&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;Random rnd = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Random();
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; randomNo = rnd.Next();

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; status = randomNo % &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; == &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; ? &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Generated number is an even number.&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Generated number is an odd number.&amp;#34;&lt;/span&gt;;
Console.WriteLine(randomNo);
Console.WriteLine(status);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-the-nullable-types-since-visual-studio-2005&#34;&gt;2) The Nullable Types (since Visual Studio 2005)&lt;/h2&gt;
&lt;p&gt;Definition on msdn&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nullable types can represent all the values of an underlying type, and an additional null value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How do you use a nullable, let say nullable integer. Simple&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int?&lt;/span&gt; x = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// x can hold any integer values plus the null value
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;x = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; isXNull = (x == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) ? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
Console.WriteLine(isXNull); &lt;span style=&#34;color:#228b22&#34;&gt;// True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
x = &lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;;
isXNull = (x == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) ? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;: &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
Console.WriteLine(isXNull); &lt;span style=&#34;color:#228b22&#34;&gt;// False
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-the-null-conditional-operators-since-visual-studio-2015&#34;&gt;3) The Null-conditional Operators (since Visual Studio 2015)&lt;/h2&gt;
&lt;p&gt;Example of a pretty common mistake&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main() {
 &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; student1 = CreateStudent(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Quan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;27&lt;/span&gt;);
 Console.WriteLine(student1.Name); &lt;span style=&#34;color:#228b22&#34;&gt;// Quan
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; student2 = CreateStudent(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;27&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// student2 is null because no student name is given to the fiction method CreateStudent
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt; Console.WriteLine(student2.Name); &lt;span style=&#34;color:#228b22&#34;&gt;// System.NullReferenceException: Object reference not set to an instance of an object.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The method &lt;code&gt;CreateStudent&lt;/code&gt; returns a &lt;code&gt;null&lt;/code&gt; value instead of creating a new student if the student name is not given. Trying to access its &lt;code&gt;Name&lt;/code&gt; property after that will throw a &lt;code&gt;NullReferenceException&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What you can do (without the Null-conditional Operators)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; student2 = CreateStudent(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;27&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// student2 is null
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (student2 != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;){
 Console.WriteLine(student2.Name); &lt;span style=&#34;color:#228b22&#34;&gt;// No more System.NullReferenceException
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What you can do (with the Null-conditional Operators)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; student2 = CreateStudent(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;27&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// student2 is null
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Console.WriteLine(student2?.Name); &lt;span style=&#34;color:#228b22&#34;&gt;// No more System.NullReferenceException
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What happended? Thanks to the question mark after &lt;code&gt;student2&lt;/code&gt;, you are telling C# that &lt;code&gt;student2&lt;/code&gt; may be null. If &lt;code&gt;student2&lt;/code&gt; is indeed &lt;code&gt;null&lt;/code&gt;, C# will not try to access &lt;code&gt;Name&lt;/code&gt; anymore, it returns &lt;code&gt;null&lt;/code&gt; instead and &lt;code&gt;Console.WriteLine&lt;/code&gt;will happily ignore the &lt;code&gt;null&lt;/code&gt; value and only add a new line.&lt;/p&gt;
&lt;h2 id=&#34;4-the---null-coalescing-operator-operator-since-visual-studio-2005&#34;&gt;4) The ?? : Null-coalescing operator Operator (since Visual Studio 2005)&lt;/h2&gt;
&lt;p&gt;This is a special case of the ?: Operator in section 1&lt;/p&gt;
&lt;p&gt;The format : &lt;code&gt;asking_value ?? just_in_case;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;if &lt;code&gt;asking_value&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;just_in_case&lt;/code&gt; is returned, otherwise &lt;code&gt;asking_value&lt;/code&gt;is returned.&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int?&lt;/span&gt; x = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// x is nullable so it can be null
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; y = x ?? &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// if x is null, set y to 0, otherwise set y = x;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// which is essentially the same as
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; y = (x == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) ? &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt; : x;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://quannt.github.io/programming/c%23/2017/01/07/question-marks-c-sharp.html&#34;&gt;Four question marks you should know in C#&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;heading-1&#34;&gt;$&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting with C# 8.0, you can use the &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; tokens in any order: both &lt;code&gt;$@&amp;quot;...&amp;quot;&lt;/code&gt; and &lt;code&gt;@$&amp;quot;...&amp;quot;&lt;/code&gt; are valid interpolated verbatim strings. In earlier C# versions, the &lt;code&gt;$&lt;/code&gt; token must appear before the &lt;code&gt;@&lt;/code&gt; token.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-1&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated&#34;&gt;$ - string interpolation (C# reference)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;heading-2&#34;&gt;@&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;@&lt;/code&gt; special character serves as a verbatim identifier. It can be used in the following ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To enable C# keywords to be used as identifiers. The &lt;code&gt;@&lt;/code&gt; character prefixes a code element that the compiler is to interpret as an identifier rather than a C# keyword. The following example uses the &lt;code&gt;@&lt;/code&gt; character to define an identifier named &lt;code&gt;for&lt;/code&gt; that it uses in a &lt;code&gt;for&lt;/code&gt;loop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;[] @for = { &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;James&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Joan&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Jamie&amp;#34;&lt;/span&gt; };
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ctr = &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; ctr &amp;lt; @for.Length; ctr++)
{
   Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;Here is your gift, {@for[ctr]}!&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#228b22&#34;&gt;// The example displays the following output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//     Here is your gift, John!
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//     Here is your gift, James!
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//     Here is your gift, Joan!
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//     Here is your gift, Jamie!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To indicate that a string literal is to be interpreted verbatim. The &lt;code&gt;@&lt;/code&gt; character in this instance defines a &lt;em&gt;verbatim string literal&lt;/em&gt;. Simple escape sequences (such as &lt;code&gt;&amp;quot;\\&amp;quot;&lt;/code&gt; for a backslash), hexadecimal escape sequences (such as &lt;code&gt;&amp;quot;\x0041&amp;quot;&lt;/code&gt; for an uppercase A), and Unicode escape sequences (such as &lt;code&gt;&amp;quot;\u0041&amp;quot;&lt;/code&gt; for an uppercase A) are interpreted literally. Only a quote escape sequence (&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;) is not interpreted literally; it produces one double quotation mark. Additionally, in case of a verbatim &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated&#34;&gt;interpolated string&lt;/a&gt; brace escape sequences (&lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;) are not interpreted literally; they produce single brace characters. The following example defines two identical file paths, one by using a regular string literal and the other by using a verbatim string literal. This is one of the more common uses of verbatim string literals.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; filename1 = &lt;span style=&#34;color:#cd5555&#34;&gt;@&amp;#34;c:\documents\files\u0066.txt&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; filename2 = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c:\\documents\\files\\u0066.txt&amp;#34;&lt;/span&gt;;
   
Console.WriteLine(filename1);
Console.WriteLine(filename2);
&lt;span style=&#34;color:#228b22&#34;&gt;// The example displays the following output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//     c:\documents\files\u0066.txt
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//     c:\documents\files\u0066.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following example illustrates the effect of defining a regular string literal and a verbatim string literal that contain identical character sequences.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; s1 = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;He said, \&amp;#34;This is the last \u0063hance\x0021\&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; s2 = &lt;span style=&#34;color:#cd5555&#34;&gt;@&amp;#34;He said, &amp;#34;&amp;#34;This is the last \u0063hance\x0021&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;;
   
Console.WriteLine(s1);
Console.WriteLine(s2);
&lt;span style=&#34;color:#228b22&#34;&gt;// The example displays the following output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//     He said, &amp;#34;This is the last chance!&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//     He said, &amp;#34;This is the last \u0063hance\x0021&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To enable the compiler to distinguish between attributes in cases of a naming conflict. An attribute is a class that derives from &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.attribute&#34;&gt;Attribute&lt;/a&gt;. Its type name typically includes the suffix &lt;strong&gt;Attribute&lt;/strong&gt;, although the compiler does not enforce this convention. The attribute can then be referenced in code either by its full type name (for example, &lt;code&gt;[InfoAttribute]&lt;/code&gt; or its shortened name (for example, &lt;code&gt;[Info]&lt;/code&gt;). However, a naming conflict occurs if two shortened attribute type names are identical, and one type name includes the &lt;strong&gt;Attribute&lt;/strong&gt; suffix but the other does not. For example, the following code fails to compile because the compiler cannot determine whether the &lt;code&gt;Info&lt;/code&gt; or &lt;code&gt;InfoAttribute&lt;/code&gt; attribute is applied to the &lt;code&gt;Example&lt;/code&gt; class. See &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1614&#34;&gt;CS1614&lt;/a&gt; for more information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;System&lt;/span&gt;;
&lt;span style=&#34;color:#658b00&#34;&gt;   
&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[AttributeUsage(AttributeTargets.Class)]&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Info&lt;/span&gt; : Attribute
{
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; information;
   
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Info(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; info)
   {
      information = info;
   }
}
&lt;span style=&#34;color:#658b00&#34;&gt;   
&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[AttributeUsage(AttributeTargets.Method)]&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;InfoAttribute&lt;/span&gt; : Attribute
{
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; information;
   
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; InfoAttribute(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; info)
   {
      information = info;
   }
}
&lt;span style=&#34;color:#658b00&#34;&gt;   
&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[Info(&amp;#34;A simple executable.&amp;#34;)]&lt;/span&gt; 
&lt;span style=&#34;color:#228b22&#34;&gt;// Generates compiler error CS1614. Ambiguous Info and InfoAttribute.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Prepend &amp;#39;@&amp;#39; to select &amp;#39;Info&amp;#39;. Specify the full name &amp;#39;InfoAttribute&amp;#39; to select it.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Example&lt;/span&gt;
{
&lt;span style=&#34;color:#658b00&#34;&gt;   [InfoAttribute(&amp;#34;The entry point.&amp;#34;)]&lt;/span&gt;
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main()
   {
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;heading-3&#34;&gt;!&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Available in C# 8.0 and later, the unary postfix &lt;code&gt;!&lt;/code&gt; operator is the null-forgiving, or null-suppression, operator. In an enabled &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references#nullable-annotation-context&#34;&gt;nullable annotation context&lt;/a&gt;, you use the null-forgiving operator to declare that expression &lt;code&gt;x&lt;/code&gt; of a reference type isn&amp;rsquo;t &lt;code&gt;null&lt;/code&gt;: &lt;code&gt;x!&lt;/code&gt;. The unary prefix &lt;code&gt;!&lt;/code&gt; operator is the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#logical-negation-operator-&#34;&gt;logical negation operator&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It tells the compiler &amp;ldquo;this isn&amp;rsquo;t null, trust me&amp;rdquo;, so it does not issue a warning for a possible null reference.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-2&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-forgiving&#34;&gt;! (null-forgiving) operator (C# reference)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h1 id=&#34;_&#34;&gt;_&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting with C# 7.0, C# supports discards, which are placeholder variables that are intentionally unused in application code. Discards are equivalent to unassigned variables; they don&amp;rsquo;t have a value. A discard communicates intent to the compiler and others that read your code: You intended to ignore the result of an expression. You may want to ignore the result of an expression, one or more members of a tuple expression, an &lt;code&gt;out&lt;/code&gt; parameter to a method, or the target of a pattern matching expression.&lt;/p&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Beginning with C# 9.0, you can use discards to specify unused input parameters of a lambda expression. For more information, see the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions#input-parameters-of-a-lambda-expression&#34;&gt;Input parameters of a lambda expression&lt;/a&gt; section of the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions&#34;&gt;Lambda expressions&lt;/a&gt; article.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-3&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/functional/discards&#34;&gt;Discards - C# Fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/cs/csharp-special-characters/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Win Operation</title>
        <link>https://www.openheart.icu/cs/windows/</link>
        <pubDate>Tue, 12 Jan 2021 11:47:28 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/windows/</guid>
        <description>42th openheart https://www.openheart.icu/cs/windows/ -&lt;h1 id=&#34;windows-terminal&#34;&gt;Windows Terminal&lt;/h1&gt;
&lt;h2 id=&#34;oh-my-posh&#34;&gt;oh-my-posh&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Install-Module&lt;/span&gt; oh-my-posh -Scope CurrentUser -AllowPrerelease
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;psreadline&#34;&gt;PSReadLine&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/PowerShell/PSReadLine&#34;&gt;PowerShell/PSReadLine&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Install-Module&lt;/span&gt; PSReadLine -AllowPrerelease -Force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;notepad $profile&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Import-Module&lt;/span&gt; PSReadLine
&lt;span style=&#34;color:#658b00&#34;&gt;Set-PSReadLineOption&lt;/span&gt; -PredictionSource &lt;span style=&#34;color:#658b00&#34;&gt;History
&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 下面是三条是文档里推荐的，根据自己的习惯决定是否添加&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;Set-PSReadLineKeyHandler&lt;/span&gt; -Key UpArrow -Function HistorySearchBackward
&lt;span style=&#34;color:#658b00&#34;&gt;Set-PSReadLineKeyHandler&lt;/span&gt; -Key DownArrow -Function HistorySearchForward
&lt;span style=&#34;color:#658b00&#34;&gt;Set-PSReadLineKeyHandler&lt;/span&gt; -Key Tab -Function Complete
&lt;span style=&#34;color:#228b22&#34;&gt;# Hot-Key&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;Set-PSReadLineKeyHandler&lt;/span&gt; -Key &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Ctrl+g&amp;#34;&lt;/span&gt; -Function MenuComplete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;posh-git&#34;&gt;posh-git&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/dahlbyk/posh-git&#34;&gt;dahlbyk/posh-git&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Install-Module&lt;/span&gt; posh-git -Scope CurrentUser -AllowPrerelease -Force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Import-Module&lt;/span&gt; posh-git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;scoop&#34;&gt;Scoop&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;iwr -useb get.scoop.sh | iex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;command&#34;&gt;Command&lt;/h1&gt;
&lt;h3 id=&#34;重置onedrive&#34;&gt;重置Onedrive&lt;/h3&gt;
&lt;p&gt;​      %localappdata%\Microsoft\OneDrive\onedrive.exe /reset&lt;/p&gt;
&lt;p&gt;​      %localappdata%\Microsoft\OneDrive\onedrive.exe&lt;/p&gt;
&lt;h3 id=&#34;资源管理器打开卡顿可以通过索引选项给所有系统文件创建索引&#34;&gt;资源管理器打开卡顿可以通过索引选项给所有系统文件创建索引&lt;/h3&gt;
&lt;h3 id=&#34;证书管理中心&#34;&gt;证书管理中心&lt;/h3&gt;
&lt;p&gt;​     用win+R输入“certmgr.msc”，进入, China Internet Network Information Center EV Certificates Root 和CNNIC Root证书导出，不信任导入，右键&amp;ndash;&amp;gt;属性，在常规选项卡中，找到“证书目的”，选择“禁用此证书的所有目的”&lt;/p&gt;
&lt;h3 id=&#34;图标不正常&#34;&gt;图标不正常：&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; /d %userprofile%&lt;span style=&#34;color:#cd5555&#34;&gt;\A&lt;/span&gt;ppData&lt;span style=&#34;color:#cd5555&#34;&gt;\L&lt;/span&gt;ocal
del IconCache.db /a
&lt;span style=&#34;color:#658b00&#34;&gt;exit&lt;/span&gt;
explorer.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;netstat--ano&#34;&gt;netstat -ano&lt;/h3&gt;
&lt;p&gt;占用进程&lt;/p&gt;
&lt;h3 id=&#34;netsh-winsock-reset&#34;&gt;netsh winsock reset&lt;/h3&gt;
&lt;p&gt;重新初始化网络环境,以解决由于软件冲突、病毒原因造成的参数错误问题&lt;/p&gt;
&lt;h3 id=&#34;ipconfig-flushdns&#34;&gt;ipconfig /flushdns&lt;/h3&gt;
&lt;p&gt;刷新dns缓存&lt;/p&gt;
&lt;h3 id=&#34;程序如果一直停止&#34;&gt;程序如果一直停止：&lt;/h3&gt;
&lt;p&gt;​      删除C:\Users\你的电脑username\AppData\Local\出现问题的程序文件夹&lt;/p&gt;
&lt;h3 id=&#34;net&#34;&gt;net&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;net share &lt;span style=&#34;color:#228b22&#34;&gt;# view your pc&amp;#39;s share folder&lt;/span&gt;
net view &lt;span style=&#34;color:#cd5555&#34;&gt;\I&lt;/span&gt;P &lt;span style=&#34;color:#228b22&#34;&gt;#查看远程主机的所以共享资源&lt;/span&gt;

net use &lt;span style=&#34;color:#cd5555&#34;&gt;\I&lt;/span&gt;P&lt;span style=&#34;color:#cd5555&#34;&gt;\I&lt;/span&gt;PC password /user:name &lt;span style=&#34;color:#228b22&#34;&gt;#建立IPC连接 远程主机的某个共享资源影射为本地盘符&lt;/span&gt;
copy nc.exe &lt;span style=&#34;color:#cd5555&#34;&gt;\1&lt;/span&gt;92.168.0.7&lt;span style=&#34;color:#cd5555&#34;&gt;\a&lt;/span&gt;dmin &lt;span style=&#34;color:#228b22&#34;&gt;#upload 把本地目录下的nc.exe传到远程主机&lt;/span&gt;

net start servername &lt;span style=&#34;color:#228b22&#34;&gt;#启动远程主机上的服务&lt;/span&gt;
net stop servername &lt;span style=&#34;color:#228b22&#34;&gt;#停止远程主机上的服务&lt;/span&gt;

net user abcd &lt;span style=&#34;color:#b452cd&#34;&gt;1234&lt;/span&gt; /add &lt;span style=&#34;color:#228b22&#34;&gt;#新建一个用户名为abcd，密码为1234的帐户，默认为user组成员。&lt;/span&gt;
net user abcd /del &lt;span style=&#34;color:#228b22&#34;&gt;#将用户名为abcd的用户删除。&lt;/span&gt;
net user abcd /active:no &lt;span style=&#34;color:#228b22&#34;&gt;#将用户名为abcd的用户禁用。&lt;/span&gt;
net user abcd /active:yes &lt;span style=&#34;color:#228b22&#34;&gt;#激活用户名为abcd的用户。&lt;/span&gt;
net user abcd &lt;span style=&#34;color:#228b22&#34;&gt;#查看用户名为abcd的用户的情况&lt;/span&gt;

net localgroup groupname username /add &lt;span style=&#34;color:#228b22&#34;&gt;#查看所有和用户组有关的信息和进行相关操作&lt;/span&gt;

net &lt;span style=&#34;color:#658b00&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;\I&lt;/span&gt;P &lt;span style=&#34;color:#228b22&#34;&gt;#可以查看远程主机当前的时间&lt;/span&gt;


tracert IP

at &lt;span style=&#34;color:#658b00&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;\c&lt;/span&gt;omputer &lt;span style=&#34;color:#228b22&#34;&gt;#表示在6点55分时，让名称为a-01的计算机开启telnet服务（这里net start telnet即为开启telnet服务的命令）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;ftp&#34;&gt;ftp&lt;/h3&gt;
&lt;p&gt;​     网络上开放的ftp的主机很多，其中很大一部分是匿名的，也就是说任何人都可以登陆上去。现在如果你扫到了一台开放 ftp服务的主机（一般都是开了21端口的机器），如果你还不会使用ftp的命令怎么办？下面就给出基本的ftp命令使用方法。&lt;/p&gt;
&lt;p&gt;​      首先在命令行键入ftp回车，出现ftp的提示符，这时候可以键入&amp;quot;help&amp;quot;来查看帮助（任何DOS命令都可以使用此方法查看其帮助)。&lt;/p&gt;
&lt;p&gt;​      大家可能看到了，这么多命令该怎么用？其实也用不到那么多，掌握几个基本的就够了。&lt;/p&gt;
&lt;p&gt;​      首先是登陆过程，这就要用到open了，直接在ftp的提示符下输入&amp;quot;open 主机IP ftp端口&amp;quot;回车即可，一般端口默认都是21，可以不写。接着就是输入合法的用户名和密码进行登陆了，这里以匿名ftp为例介绍。&lt;/p&gt;
&lt;p&gt;​      用户名和密码都是ftp，密码是不显示的。当提示 logged in时，就说明登陆成功。这里因为是匿名登陆，所以用户显示为Anonymous。&lt;/p&gt;
&lt;p&gt;​      接下来就要介绍具体命令的使用方法了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;dir &lt;span style=&#34;color:#228b22&#34;&gt;#跟DOS命令一样，用于查看服务器的文件，直接敲上dir回车，就可以看到此ftp服务器上的文件。&lt;/span&gt;
&lt;span style=&#34;color:#658b00&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;#进入某个文件夹。&lt;/span&gt;
get &lt;span style=&#34;color:#228b22&#34;&gt;#下载文件到本地机器。&lt;/span&gt;
put &lt;span style=&#34;color:#228b22&#34;&gt;#上传文件到远程服务器。这就要看远程ftp服务器是否给了你可写的权限了，如果可以，呵呵，该怎么 利用就不多说了，大家就自由发挥去吧。&lt;/span&gt;
delete &lt;span style=&#34;color:#228b22&#34;&gt;#删除远程ftp服务器上的文件。这也必须保证你有可写的权限。&lt;/span&gt;
bye &lt;span style=&#34;color:#228b22&#34;&gt;#退出当前连接。&lt;/span&gt;
quit &lt;span style=&#34;color:#228b22&#34;&gt;#同上&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;telnet&#34;&gt;telnet&lt;/h3&gt;
&lt;p&gt;​      功能强大的远程登陆命令，几乎所有的入侵者都喜欢用它，屡试不爽。为什么？它操作简单，如同使用自己的机器一样，只要你熟悉DOS命令，在成功以 administrator身份连接了远程机器后，就可以用它来干你想干的一切了。下面介绍一下使用方法，首先键入telnet回车，再键入help查看其帮助信息。&lt;/p&gt;
&lt;p&gt;​	当输入用户名和密码都正确后就成功建立了telnet连接，这时候你就在远程主机上具有了和此用户一样的权限，利用DOS命令就可以实现你想干的事情了。这里我使用的超级管理员权限登陆的。&lt;/p&gt;
&lt;p&gt;​     任何人要想进入系统，必须得有一个合法的用户名和密码（输入法漏洞差不多绝迹了吧），哪怕你拿到帐户的只有一个很小的权限，你也可以利用它来达到最后的目的。所以坚决消灭空口令，给自己的帐户加上一个强壮的密码，是最好的防御弱口令入侵的方法。&lt;/p&gt;
&lt;h3 id=&#34;常用命令&#34;&gt;常用命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;winver &lt;span style=&#34;color:#228b22&#34;&gt;#检查Windows版本 &lt;/span&gt;
wmimgmt.msc &lt;span style=&#34;color:#228b22&#34;&gt;#打开windows管理体系结构(WMI) &lt;/span&gt;
wupdmgr &lt;span style=&#34;color:#228b22&#34;&gt;#windows更新程序 &lt;/span&gt;
wscript &lt;span style=&#34;color:#228b22&#34;&gt;#windows脚本宿主设置 &lt;/span&gt;
write &lt;span style=&#34;color:#228b22&#34;&gt;#写字板 &lt;/span&gt;
winmsd &lt;span style=&#34;color:#228b22&#34;&gt;#系统信息 &lt;/span&gt;
wiaacmgr &lt;span style=&#34;color:#228b22&#34;&gt;#扫描仪和照相机向导 &lt;/span&gt;
winchat &lt;span style=&#34;color:#228b22&#34;&gt;#XP自带局域网聊天&lt;/span&gt;
mem.exe &lt;span style=&#34;color:#228b22&#34;&gt;#显示内存使用情况 &lt;/span&gt;
Msconfig.exe &lt;span style=&#34;color:#228b22&#34;&gt;#系统配置实用程序 &lt;/span&gt;
mplayer2 &lt;span style=&#34;color:#228b22&#34;&gt;#简易widnows media player &lt;/span&gt;
mspaint &lt;span style=&#34;color:#228b22&#34;&gt;#画图板 &lt;/span&gt;
mstsc &lt;span style=&#34;color:#228b22&#34;&gt;#远程桌面连接 &lt;/span&gt;
mplayer2 &lt;span style=&#34;color:#228b22&#34;&gt;#媒体播放机 &lt;/span&gt;
magnify &lt;span style=&#34;color:#228b22&#34;&gt;#放大镜实用程序 &lt;/span&gt;
mmc &lt;span style=&#34;color:#228b22&#34;&gt;#打开控制台 &lt;/span&gt;
mobsync &lt;span style=&#34;color:#228b22&#34;&gt;#同步命令&lt;/span&gt;
dxdiag &lt;span style=&#34;color:#228b22&#34;&gt;#检查directx&lt;/span&gt;
drwtsn32 &lt;span style=&#34;color:#228b22&#34;&gt;#系统医生 &lt;/span&gt;
devmgmt.msc &lt;span style=&#34;color:#228b22&#34;&gt;#设备管理器 &lt;/span&gt;
dfrg.msc &lt;span style=&#34;color:#228b22&#34;&gt;#-磁盘碎片整理&lt;/span&gt;
diskmgmt.msc &lt;span style=&#34;color:#228b22&#34;&gt;#磁盘管理实用程序 &lt;/span&gt;
dcomcnfg &lt;span style=&#34;color:#228b22&#34;&gt;#打开系统组件服务 &lt;/span&gt;
ddeshare &lt;span style=&#34;color:#228b22&#34;&gt;#打开DDE共享设置 &lt;/span&gt;
dvdplay &lt;span style=&#34;color:#228b22&#34;&gt;#dvd播放器&lt;/span&gt;
net stop messenger &lt;span style=&#34;color:#228b22&#34;&gt;#停止信使服务 &lt;/span&gt;
net start messenger &lt;span style=&#34;color:#228b22&#34;&gt;#开始信使服务 &lt;/span&gt;
notepad &lt;span style=&#34;color:#228b22&#34;&gt;#打开记事本 &lt;/span&gt;
nslookup &lt;span style=&#34;color:#228b22&#34;&gt;#网络管理的工具向导 &lt;/span&gt;
ntbackup &lt;span style=&#34;color:#228b22&#34;&gt;#系统备份和还原 &lt;/span&gt;
narrator &lt;span style=&#34;color:#228b22&#34;&gt;#屏幕&amp;amp;quot;讲述人&amp;amp;quot; &lt;/span&gt;
ntmsmgr.msc &lt;span style=&#34;color:#228b22&#34;&gt;#移动存储管理器 &lt;/span&gt;
ntmsoprq.msc &lt;span style=&#34;color:#228b22&#34;&gt;#移动存储管理员操作请求 &lt;/span&gt;
netstat -an &lt;span style=&#34;color:#228b22&#34;&gt;#(TC)命令检查接口&lt;/span&gt;
syncapp &lt;span style=&#34;color:#228b22&#34;&gt;#创建一个公文包 &lt;/span&gt;
sysedit &lt;span style=&#34;color:#228b22&#34;&gt;#系统配置编辑器 &lt;/span&gt;
sigverif &lt;span style=&#34;color:#228b22&#34;&gt;#文件签名验证程序 &lt;/span&gt;
sndrec32 &lt;span style=&#34;color:#228b22&#34;&gt;#录音机 &lt;/span&gt;
shrpubw &lt;span style=&#34;color:#228b22&#34;&gt;#创建共享文件夹 &lt;/span&gt;
secpol.msc &lt;span style=&#34;color:#228b22&#34;&gt;#本地安全策略 &lt;/span&gt;
syskey &lt;span style=&#34;color:#228b22&#34;&gt;#系统加密，一旦加密就不能解开，保护windows xp系统的双重密码 &lt;/span&gt;
services.msc &lt;span style=&#34;color:#228b22&#34;&gt;#本地服务设置 &lt;/span&gt;
Sndvol32 &lt;span style=&#34;color:#228b22&#34;&gt;#音量控制程序 &lt;/span&gt;
sfc.exe &lt;span style=&#34;color:#228b22&#34;&gt;#系统文件检查器 &lt;/span&gt;
sfc /scannow &lt;span style=&#34;color:#228b22&#34;&gt;#windows文件保护&lt;/span&gt;
tsshutdn &lt;span style=&#34;color:#228b22&#34;&gt;#60秒倒计时关机命令 &lt;/span&gt;
tourstart &lt;span style=&#34;color:#228b22&#34;&gt;#xp简介（安装完成后出现的漫游xp程序） &lt;/span&gt;
taskmgr &lt;span style=&#34;color:#228b22&#34;&gt;#任务管理器&lt;/span&gt;
eventvwr &lt;span style=&#34;color:#228b22&#34;&gt;#事件查看器 &lt;/span&gt;
eudcedit &lt;span style=&#34;color:#228b22&#34;&gt;#造字程序 &lt;/span&gt;
explorer &lt;span style=&#34;color:#228b22&#34;&gt;#打开资源管理器&lt;/span&gt;
packager &lt;span style=&#34;color:#228b22&#34;&gt;#对象包装程序 &lt;/span&gt;
perfmon.msc &lt;span style=&#34;color:#228b22&#34;&gt;#计算机性能监测程序 &lt;/span&gt;
progman &lt;span style=&#34;color:#228b22&#34;&gt;#程序管理器&lt;/span&gt;
regedit.exe &lt;span style=&#34;color:#228b22&#34;&gt;#注册表 &lt;/span&gt;
rsop.msc &lt;span style=&#34;color:#228b22&#34;&gt;#组策略结果集 &lt;/span&gt;
regedt32 &lt;span style=&#34;color:#228b22&#34;&gt;#注册表编辑器 &lt;/span&gt;
rononce -p &lt;span style=&#34;color:#228b22&#34;&gt;#15秒关机 &lt;/span&gt;
regsvr32 /u *.dll &lt;span style=&#34;color:#228b22&#34;&gt;#停止dll文件运行 &lt;/span&gt;
regsvr32 /u zipfldr.dll &lt;span style=&#34;color:#228b22&#34;&gt;#取消ZIP支持&lt;/span&gt;
cmd.exe &lt;span style=&#34;color:#228b22&#34;&gt;#CMD命令提示符 &lt;/span&gt;
chkdsk.exe &lt;span style=&#34;color:#228b22&#34;&gt;#Chkdsk磁盘检查 &lt;/span&gt;
certmgr.msc &lt;span style=&#34;color:#228b22&#34;&gt;#证书管理实用程序 &lt;/span&gt;
calc &lt;span style=&#34;color:#228b22&#34;&gt;#启动计算器&lt;/span&gt;
charmap &lt;span style=&#34;color:#228b22&#34;&gt;#启动字符映射表 &lt;/span&gt;
cliconfg &lt;span style=&#34;color:#228b22&#34;&gt;#sql server 客户端网络实用程序 &lt;/span&gt;
Clipbrd &lt;span style=&#34;color:#228b22&#34;&gt;#剪贴板查看器 &lt;/span&gt;
conf &lt;span style=&#34;color:#228b22&#34;&gt;#启动netmeeting &lt;/span&gt;
compmgmt.msc &lt;span style=&#34;color:#228b22&#34;&gt;#计算机管理 &lt;/span&gt;
cleanmgr &lt;span style=&#34;color:#228b22&#34;&gt;#垃圾整理 &lt;/span&gt;
ciadv.msc &lt;span style=&#34;color:#228b22&#34;&gt;#索引服务程序&lt;/span&gt;
osk &lt;span style=&#34;color:#228b22&#34;&gt;#打开屏幕键盘 &lt;/span&gt;
odbcad32 &lt;span style=&#34;color:#228b22&#34;&gt;#ODBC数据源管理器 &lt;/span&gt;
oobe/msoobe /a &lt;span style=&#34;color:#228b22&#34;&gt;#检查XP是否激活 &lt;/span&gt;
lusrmgr.msc &lt;span style=&#34;color:#228b22&#34;&gt;#本机用户和组 &lt;/span&gt;
iexpress &lt;span style=&#34;color:#228b22&#34;&gt;#木马捆绑工具，系统自带&lt;/span&gt;
Nslookup &lt;span style=&#34;color:#228b22&#34;&gt;#IP地址侦测器&lt;/span&gt;
fsmgmt.msc &lt;span style=&#34;color:#228b22&#34;&gt;#共享文件夹管理器&lt;/span&gt;
utilman &lt;span style=&#34;color:#228b22&#34;&gt;#辅助工具管理器&lt;/span&gt;
gpedit.msc &lt;span style=&#34;color:#228b22&#34;&gt;#组策略&lt;/span&gt;
ntmsoprq.msc &lt;span style=&#34;color:#228b22&#34;&gt;#移动存储管理员操作请求&lt;/span&gt;
netstat -an &lt;span style=&#34;color:#228b22&#34;&gt;#(TC)命令检查接口&lt;/span&gt;
Nslookup &lt;span style=&#34;color:#228b22&#34;&gt;#IP地址侦测器&lt;/span&gt;
oobe/msoobe /a &lt;span style=&#34;color:#228b22&#34;&gt;#检查windows是否激活&lt;/span&gt;
odbcad32 &lt;span style=&#34;color:#228b22&#34;&gt;#ODBC数据源管理器&lt;/span&gt;
progman &lt;span style=&#34;color:#228b22&#34;&gt;#程序管理器&lt;/span&gt;
perfmon.msc &lt;span style=&#34;color:#228b22&#34;&gt;#计算机性能监测程序&lt;/span&gt;
packager &lt;span style=&#34;color:#228b22&#34;&gt;#对象包装程序&lt;/span&gt;
rononce -p  &lt;span style=&#34;color:#228b22&#34;&gt;#15秒关机&lt;/span&gt;
regsvr32 /u *.dll &lt;span style=&#34;color:#228b22&#34;&gt;#停止dll文件运行(把*号换成要停止的dll文件名)&lt;/span&gt;
regedt32 &lt;span style=&#34;color:#228b22&#34;&gt;#注册表编辑器&lt;/span&gt;
rsop.msc &lt;span style=&#34;color:#228b22&#34;&gt;#组策略结果集&lt;/span&gt;
regedit.exe–注册表
regsvr32 /u zipfldr.dll &lt;span style=&#34;color:#228b22&#34;&gt;#取消ZIP支持&lt;/span&gt;
sndrec32 &lt;span style=&#34;color:#228b22&#34;&gt;#录音机&lt;/span&gt;
services.msc &lt;span style=&#34;color:#228b22&#34;&gt;#本地服务设置&lt;/span&gt;
syncapp &lt;span style=&#34;color:#228b22&#34;&gt;#创建一个公文包&lt;/span&gt;
sysedit &lt;span style=&#34;color:#228b22&#34;&gt;#系统配置编辑器&lt;/span&gt;
sigverif &lt;span style=&#34;color:#228b22&#34;&gt;#文件签名验证程序&lt;/span&gt;
shrpubw &lt;span style=&#34;color:#228b22&#34;&gt;#创建共享文件夹&lt;/span&gt;
secpol.msc &lt;span style=&#34;color:#228b22&#34;&gt;#本地安全策略&lt;/span&gt;
syskey &lt;span style=&#34;color:#228b22&#34;&gt;#系统加密&lt;/span&gt;
Sndvol32 &lt;span style=&#34;color:#228b22&#34;&gt;#音量控制程序&lt;/span&gt;
sfc.exe &lt;span style=&#34;color:#228b22&#34;&gt;#系统文件检查器&lt;/span&gt;
sfc /scannow &lt;span style=&#34;color:#228b22&#34;&gt;#windows文件保护(扫描错误并复原)&lt;/span&gt;
tsshutdn &lt;span style=&#34;color:#228b22&#34;&gt;#60秒倒计时关机命令&lt;/span&gt;
taskmgr &lt;span style=&#34;color:#228b22&#34;&gt;#任务管理器&lt;/span&gt;
utilman &lt;span style=&#34;color:#228b22&#34;&gt;#辅助工具管理器&lt;/span&gt;
winmsd &lt;span style=&#34;color:#228b22&#34;&gt;#系统信息&lt;/span&gt;
winver &lt;span style=&#34;color:#228b22&#34;&gt;#检查Windows版本&lt;/span&gt;
wmimgmt.msc &lt;span style=&#34;color:#228b22&#34;&gt;#打开windows管理体系结构(WMI)&lt;/span&gt;
wupdmgr &lt;span style=&#34;color:#228b22&#34;&gt;#windows更新程序 (不是正版系统不要打开)&lt;/span&gt;
Wscript.exe &lt;span style=&#34;color:#228b22&#34;&gt;#windows脚本宿主设置&lt;/span&gt;
wiaacmgr &lt;span style=&#34;color:#228b22&#34;&gt;#扫描仪和照相机向导&lt;/span&gt;
cleanmgr &lt;span style=&#34;color:#228b22&#34;&gt;#打开磁盘清理工具&lt;/span&gt;
compmgmt.msc &lt;span style=&#34;color:#228b22&#34;&gt;#计算机管理&lt;/span&gt;
conf &lt;span style=&#34;color:#228b22&#34;&gt;#启动 netmeeting&lt;/span&gt;
chkdsk.exe &lt;span style=&#34;color:#228b22&#34;&gt;#Chkdsk磁盘检查&lt;/span&gt;
cmd.exe &lt;span style=&#34;color:#228b22&#34;&gt;#CMD命令提示符&lt;/span&gt;
certmgr.msc &lt;span style=&#34;color:#228b22&#34;&gt;#证书管理实用程序&lt;/span&gt;
cliconfg &lt;span style=&#34;color:#228b22&#34;&gt;#SQL SERVER 客户端网络实用程序&lt;/span&gt;
Clipbrd &lt;span style=&#34;color:#228b22&#34;&gt;#剪贴板查看器&lt;/span&gt;
ciadv.msc &lt;span style=&#34;color:#228b22&#34;&gt;#索引服务程序&lt;/span&gt;
dvdplay &lt;span style=&#34;color:#228b22&#34;&gt;#DVD播放器&lt;/span&gt;
diskmgmt.msc &lt;span style=&#34;color:#228b22&#34;&gt;#磁盘管理实用程序&lt;/span&gt;
dfrg.msc &lt;span style=&#34;color:#228b22&#34;&gt;#磁盘碎片整理程序&lt;/span&gt;
devmgmt.msc &lt;span style=&#34;color:#228b22&#34;&gt;#设备管理器&lt;/span&gt;
drwtsn32 &lt;span style=&#34;color:#228b22&#34;&gt;#系统医生&lt;/span&gt;
dxdiag &lt;span style=&#34;color:#228b22&#34;&gt;#检查DirectX信息&lt;/span&gt;
dcomcnfg &lt;span style=&#34;color:#228b22&#34;&gt;#打开系统组件服务&lt;/span&gt;
ddeshare &lt;span style=&#34;color:#228b22&#34;&gt;#打开DDE共享设置&lt;/span&gt;
explorer &lt;span style=&#34;color:#228b22&#34;&gt;#打开资源管理器&lt;/span&gt;
eventvwr &lt;span style=&#34;color:#228b22&#34;&gt;#事件查看器&lt;/span&gt;
eudcedit &lt;span style=&#34;color:#228b22&#34;&gt;#造字程序&lt;/span&gt;
fsmgmt.msc &lt;span style=&#34;color:#228b22&#34;&gt;#共享文件夹管理器&lt;/span&gt;
gpedit.msc &lt;span style=&#34;color:#228b22&#34;&gt;#组策略&lt;/span&gt;
iexpress &lt;span style=&#34;color:#228b22&#34;&gt;#工具，系统自带&lt;/span&gt;
logoff &lt;span style=&#34;color:#228b22&#34;&gt;#注销命令&lt;/span&gt;
lusrmgr.msc &lt;span style=&#34;color:#228b22&#34;&gt;#本机用户和组&lt;/span&gt;
mstsc &lt;span style=&#34;color:#228b22&#34;&gt;#远程桌面连接&lt;/span&gt;
Msconfig.exe &lt;span style=&#34;color:#228b22&#34;&gt;#系统配置实用程序&lt;/span&gt;
mem.exe &lt;span style=&#34;color:#228b22&#34;&gt;#显示内存使用情况(如果直接运行无效，可以先运行cmd，在命令提示符里输入mem.exe&amp;gt;d:a.txt 即可打开d盘查看a.txt，里面的就是内存使用情况了。当然什么盘什么文件名可自己决定。)&lt;/span&gt;
mplayer2 &lt;span style=&#34;color:#228b22&#34;&gt;#简易widnows media player&lt;/span&gt;
mspaint &lt;span style=&#34;color:#228b22&#34;&gt;#画图板&lt;/span&gt;
mplayer2 &lt;span style=&#34;color:#228b22&#34;&gt;#媒体播放机&lt;/span&gt;
magnify &lt;span style=&#34;color:#228b22&#34;&gt;#放大镜实用程序&lt;/span&gt;
mmc &lt;span style=&#34;color:#228b22&#34;&gt;#打开控制台&lt;/span&gt;
mobsync &lt;span style=&#34;color:#228b22&#34;&gt;#同步命令&lt;/span&gt;
notepad &lt;span style=&#34;color:#228b22&#34;&gt;#打开记事本&lt;/span&gt;
net start messenger &lt;span style=&#34;color:#228b22&#34;&gt;#开始信使服务&lt;/span&gt;
net stop messenger &lt;span style=&#34;color:#228b22&#34;&gt;#停止信使服务&lt;/span&gt;
notepad &lt;span style=&#34;color:#228b22&#34;&gt;#打开记事本&lt;/span&gt;
nslookup &lt;span style=&#34;color:#228b22&#34;&gt;#网络管理的工具向导&lt;/span&gt;
ntbackup &lt;span style=&#34;color:#228b22&#34;&gt;#系统备份和还原&lt;/span&gt;
narrator &lt;span style=&#34;color:#228b22&#34;&gt;#屏幕“讲述人”&lt;/span&gt;
ntmsmgr.msc &lt;span style=&#34;color:#228b22&#34;&gt;#移动存储管理器&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://www.openheart.icu/cs/windows/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Effective CSharp</title>
        <link>https://www.openheart.icu/cs/effective-csharp6.0/</link>
        <pubDate>Sat, 09 Jan 2021 16:22:42 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/effective-csharp6.0/</guid>
        <description>42th openheart https://www.openheart.icu/cs/effective-csharp6.0/ -&lt;h1 id=&#34;effective-c&#34;&gt;Effective C#&lt;/h1&gt;
&lt;p&gt;Effective C# does not take you on a historical journey through the changes in the language. Rather, I provide advice on how to use the current C# language.&lt;/p&gt;
&lt;h2 id=&#34;c--language-idioms&#34;&gt;C # Language Idioms&lt;/h2&gt;
&lt;p&gt;You change tools or languages because you can be more productive.&lt;/p&gt;
&lt;h3 id=&#34;item-1-prefer-implicitly-typed-local-variableshttpsdocsmicrosoftcomen-usdotnetcsharpprogramming-guideclasses-and-structsimplicitly-typed-local-variables&#34;&gt;Item 1: &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables&#34;&gt;Prefer Implicitly Typed Local Variables&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword may be used in the following contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On local variables (variables declared at method scope).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// i is compiled as an int
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// s is compiled as a string
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; s = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// a is compiled as int[]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;[] { &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; };
  
&lt;span style=&#34;color:#228b22&#34;&gt;// expr is compiled as IEnumerable&amp;lt;Customer&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// or perhaps IQueryable&amp;lt;Customer&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; expr =
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; c &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; customers
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; c.City == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;London&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; c;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// anon is compiled as an anonymous type
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; anon = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; { Name = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Terry&amp;#34;&lt;/span&gt;, Age = &lt;span style=&#34;color:#b452cd&#34;&gt;34&lt;/span&gt; };
  
&lt;span style=&#34;color:#228b22&#34;&gt;// list is compiled as List&amp;lt;int&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; list = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/for&#34;&gt;for&lt;/a&gt; initialization statement.&lt;/p&gt;
&lt;p&gt;C#Copy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; x = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; x &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;; x++)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/foreach-in&#34;&gt;foreach&lt;/a&gt; initialization statement.&lt;/p&gt;
&lt;p&gt;C#Copy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; list) {...}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement&#34;&gt;using&lt;/a&gt; statement.&lt;/p&gt;
&lt;p&gt;C#Copy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; file = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StreamReader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;C:\\myfile.txt&amp;#34;&lt;/span&gt;)) {...}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression&#34;&gt;use implicitly typed local variables and arrays in a query expression.&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; QueryNames(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; firstLetter)
{
    &lt;span style=&#34;color:#228b22&#34;&gt;// Create the query. Use of var is required because
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// the query produces a sequence of anonymous types:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// System.Collections.Generic.IEnumerable&amp;lt;????&amp;gt;.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; studentQuery =
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; student &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; students
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; student.FirstName[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] == firstLetter
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; { student.FirstName, student.LastName };
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// Execute the query and display the results.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; anonType &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; studentQuery)
    {
        Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;First = {0}, Last = {1}&amp;#34;&lt;/span&gt;, anonType.FirstName, anonType.LastName);
    }
      
    &lt;span style=&#34;color:#228b22&#34;&gt;// Variable queryId could be declared by using
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// System.Collections.Generic.IEnumerable&amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// instead of var.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; queryId =
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; student &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; students
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; student.Id &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;111&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; student.LastName;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// Variable str could be declared by using var instead of string.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; str &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; queryId)
    {
        Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Last name: {0}&amp;#34;&lt;/span&gt;, str);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using var also improves a developer’s comprehension of the code. With var, you are not telling the compiler which type you’re creating; the compiler declares the type for you. The compiler examines the compile-time type and infers the type of the local variable based on those declarations.&lt;/p&gt;
&lt;p&gt;At other times, however, overusing var only decreases the readability of your code.&lt;/p&gt;
&lt;p&gt;I recommend explicitly declaring all numeric types (int, float, double, and others) rather than using a var declaration.&lt;/p&gt;
&lt;h3 id=&#34;item-2-prefer-readonly-to-const&#34;&gt;Item 2: Prefer &lt;code&gt;readonly&lt;/code&gt; to &lt;code&gt;const&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly&#34;&gt;&lt;code&gt;readonly&lt;/code&gt;: runtime constants.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/const&#34;&gt;&lt;code&gt;const&lt;/code&gt;: compile-time constants, slightly faster but far less flexible&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly&#34;&gt;readonly&lt;/a&gt; keyword differs from the &lt;code&gt;const&lt;/code&gt; keyword. A &lt;code&gt;const&lt;/code&gt; field can only be initialized at the declaration of the field. A &lt;code&gt;readonly&lt;/code&gt; field can be initialized either at the declaration or in a constructor. Therefore, &lt;code&gt;readonly&lt;/code&gt; fields can have different values depending on the constructor used. Also, although a &lt;code&gt;const&lt;/code&gt; field is a compile-time constant, the &lt;code&gt;readonly&lt;/code&gt; field can be used for run-time constants, as in this line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint&lt;/span&gt; l1 = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint&lt;/span&gt;)DateTime.Now.Ticks;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt; must be used when the value must be available at compile time: attribute parameters, &lt;code&gt;switch case&lt;/code&gt; labels, and &lt;code&gt;enum&lt;/code&gt; definitions, and those rare times when you mean to define a value that does not change from release to release. For everything else, prefer the increased flexibility of &lt;code&gt;readonly&lt;/code&gt; constants.&lt;/p&gt;
&lt;h3 id=&#34;item-3-prefer-the-is-or-as-operators-to-casts&#34;&gt;Item 3: Prefer the &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;as&lt;/code&gt; Operators to Casts&lt;/h3&gt;
&lt;p&gt;You can use the following operators and expressions to perform type checking or type conversion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator&#34;&gt;is operator&lt;/a&gt;: to check if the runtime type of an expression is compatible with a given type&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#as-operator&#34;&gt;as operator&lt;/a&gt;: to explicitly convert an expression to a given type if its runtime type is compatible with that type&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#cast-expression&#34;&gt;cast expression&lt;/a&gt;: to perform an explicit conversion&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#typeof-operator&#34;&gt;typeof operator&lt;/a&gt;: to obtain the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.type&#34;&gt;System.Type&lt;/a&gt; instance for a type&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ishttpsdocsmicrosoftcomen-usdotnetcsharplanguage-referencekeywordsis&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/is&#34;&gt;&lt;code&gt;is&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The following example demonstrates that the &lt;code&gt;is&lt;/code&gt; operator returns &lt;code&gt;true&lt;/code&gt; if the runtime type of an expression result derives from a given type, that is, there exists a reference conversion between types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Base&lt;/span&gt; { }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Derived&lt;/span&gt; : Base { }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;IsOperatorExample&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; b = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Base();
        Console.WriteLine(b &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Base);  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Console.WriteLine(b &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Derived);  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: False
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; d = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Derived();
        Console.WriteLine(d &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Base);  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Console.WriteLine(d &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Derived); 
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The next example shows that the &lt;code&gt;is&lt;/code&gt; operator takes into account boxing and unboxing conversions but doesn&amp;rsquo;t consider &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/numeric-conversions&#34;&gt;numeric conversions&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;27&lt;/span&gt;;
Console.WriteLine(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; System.IFormattable);  
&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; iBoxed = i;
Console.WriteLine(iBoxed &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;);  
&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Console.WriteLine(iBoxed &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt;);  
&lt;span style=&#34;color:#228b22&#34;&gt;// output: False
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following example demonstrates the usage of the &lt;code&gt;is&lt;/code&gt; operator with the type pattern(Beginning with &lt;strong&gt;C# 7.0&lt;/strong&gt;, the &lt;code&gt;is&lt;/code&gt; operator also tests an expression result against a pattern. Or Called: Type testing with &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching&#34;&gt;pattern matching&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;23&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; iBoxed = i;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int?&lt;/span&gt; jNullable = &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;;
&lt;span style=&#34;color:#228b22&#34;&gt;//e.g. If the result of iBoxed is non-null and can be converted to int by a reference, boxing(or unboxing conversion), the iBoxed is int a expression returns true and the converted value of the result of iBoxed is assigned to variable a.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (iBoxed &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a &amp;amp;&amp;amp; jNullable &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; b)
{
    Console.WriteLine(a + b);
  	&lt;span style=&#34;color:#228b22&#34;&gt;// output 30
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;as&#34;&gt;&lt;code&gt;as&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Notice that the cast version must check &lt;code&gt;null&lt;/code&gt; in addition to catching exceptions. &lt;code&gt;null&lt;/code&gt; can be converted to any reference type using a cast, but the as operator returns &lt;code&gt;null&lt;/code&gt; when used on a &lt;code&gt;null&lt;/code&gt; reference. The &lt;code&gt;as&lt;/code&gt; operator explicitly converts the result of an expression to a given reference or nullable value type. If the conversion is not possible, the &lt;code&gt;as&lt;/code&gt; operator returns &lt;code&gt;null&lt;/code&gt;. Unlike a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#cast-expression&#34;&gt;cast expression&lt;/a&gt;, the &lt;code&gt;as&lt;/code&gt; operator never throws an exception.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;IEnumerable&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt; numbers = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;[] { &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt; };
IList&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt; indexable = numbers &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; IList&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt;;
&lt;span style=&#34;color:#228b22&#34;&gt;// numbers is IList&amp;lt;int&amp;gt; ? (IList&amp;lt;int&amp;gt;)(numbers) : (IList&amp;lt;int&amp;gt;)null
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (indexable != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
{
    Console.WriteLine(indexable[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] + indexable[indexable.Count - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]);  
  	&lt;span style=&#34;color:#228b22&#34;&gt;// output: 40
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following program fragment won’t compile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; o = Factory.GetValue(); 
&lt;span style=&#34;color:#228b22&#34;&gt;// int i = o as int; 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Does not compile.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; i = o &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int?&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) 
  Console.WriteLine(i.Value);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;cast-expression&#34;&gt;Cast expression&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; x = &lt;span style=&#34;color:#b452cd&#34;&gt;1234.7&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)x;
Console.WriteLine(a);   
&lt;span style=&#34;color:#228b22&#34;&gt;// output: 1234
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
IEnumerable&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt; numbers = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt; };
IList&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt; list = (IList&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt;)numbers;
Console.WriteLine(list.Count);  
&lt;span style=&#34;color:#228b22&#34;&gt;// output: 3
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Console.WriteLine(list[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]);  
&lt;span style=&#34;color:#228b22&#34;&gt;// output: 20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;typeof-operator&#34;&gt;Typeof operator&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; PrintType&amp;lt;T&amp;gt;() =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(T));

Console.WriteLine(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(List&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;&amp;gt;));
PrintType&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt;();
PrintType&amp;lt;System.Int32&amp;gt;();
PrintType&amp;lt;Dictionary&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;&amp;gt;&amp;gt;();
&lt;span style=&#34;color:#228b22&#34;&gt;// Output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// System.Collections.Generic.List`1[System.String]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// System.Int32
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// System.Int32
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// System.Collections.Generic.Dictionary`2[System.Int32,System.Char]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
Console.WriteLine(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(Dictionary&amp;lt;,&amp;gt;));
&lt;span style=&#34;color:#228b22&#34;&gt;// Output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// System.Collections.Generic.Dictionary`2[TKey,TValue]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Type testing with the &lt;code&gt;typeof&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Animal&lt;/span&gt; { }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Giraffe&lt;/span&gt; : Animal { }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;TypeOfExample&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; b = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Giraffe();
        Console.WriteLine(b &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Animal);  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Console.WriteLine(b.GetType() == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(Animal));  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: False
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
        Console.WriteLine(b &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Giraffe);  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Console.WriteLine(b.GetType() == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(Giraffe));  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;item-4-replace-stringformat-with-interpolated-strings&#34;&gt;Item 4: Replace &lt;code&gt;string.Format()&lt;/code&gt; with Interpolated Strings&lt;/h3&gt;
&lt;p&gt;Using &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated&#34;&gt;string interpolation&lt;/a&gt; greatly improves readability. It’s easy to read the replacement expressions in place in the format strings. The result is easy verification. The expressions are inline in the format string instead of in a separate array, you can’t have the wrong number of arguments in the replacement array. You can’t easily put the wrong expression in the wrong spot in the string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; name = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Mark&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; date = DateTime.Now;

&lt;span style=&#34;color:#228b22&#34;&gt;// Composite formatting:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; name = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Fred&amp;#34;&lt;/span&gt;;
String.Format(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Name = {0}, hours = {1:hh}&amp;#34;&lt;/span&gt;, name, DateTime.Now);
Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello, {0}! Today is {1}, it&amp;#39;s {2:HH:mm} now.&amp;#34;&lt;/span&gt;, name, date.DayOfWeek, date);
&lt;span style=&#34;color:#228b22&#34;&gt;// String interpolation:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;Hello, {name}! Today is {date.DayOfWeek}, it&amp;#39;s {date:HH:mm} now.&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// Both calls produce the same output that is similar to:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Hello, Mark! Today is Wednesday, it&amp;#39;s 19:40 now.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;The value of pi is {Math.PI}&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;Starting with C# 8.0, you can use the &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; tokens in any order: both &lt;code&gt;$@&amp;quot;...&amp;quot;&lt;/code&gt; and &lt;code&gt;@$&amp;quot;...&amp;quot;&lt;/code&gt; are valid interpolated verbatim strings. In earlier C# versions, the &lt;code&gt;$&lt;/code&gt; token must appear before the &lt;code&gt;@&lt;/code&gt; token.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This feature is even being incorporated into the Razor View engine for ASP.NET MVC. This can make it much easier to generate HTML output in a Web application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;asp-controller&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Manage&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;asp-action&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Index&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;title&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Manage&amp;#34;&lt;/span&gt;&amp;gt;Hello@User.GetUserName()!&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And Other :&lt;/p&gt;
&lt;p&gt;ASPX/JSP&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aui.github.io/art-template/&#34;&gt;art-template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://baidufe.github.io/BaiduTemplate/&#34;&gt;BaiduTemplate&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;item-5-prefer-formattablestring-for-culture-specific-strings&#34;&gt;Item 5: Prefer &lt;code&gt;FormattableString&lt;/code&gt; for Culture-Specific Strings&lt;/h3&gt;
&lt;h3 id=&#34;item-6-avoid-string-ly-typed-apis&#34;&gt;Item 6: Avoid String-ly Typed APIs&lt;/h3&gt;
&lt;h3 id=&#34;item-7-express-callbacks-with-delegates&#34;&gt;Item 7: Express Callbacks with Delegates&lt;/h3&gt;
&lt;h3 id=&#34;item-8-use-the-null-conditional-operator-for-event-invocations&#34;&gt;Item 8: Use the Null Conditional Operator for Event Invocations&lt;/h3&gt;
&lt;h3 id=&#34;item-10-use-the-new-modifier-only-to-react-to-base-class-updates&#34;&gt;Item 10: Use the new Modifier Only to React to Base Class Updates&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;working-with-linq&#34;&gt;Working with LINQ&lt;/h2&gt;
&lt;h3 id=&#34;item-42-distinguish-between-ienumerable-and-iqueryable-data-sourceshttpsdocsmicrosoftcomen-usdotnetframeworkdataadoneteflanguage-referencequery-executionredirectedfrommsdnanchor_0&#34;&gt;Item 42: &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/query-execution?redirectedfrom=MSDN#Anchor_0&#34;&gt;Distinguish between IEnumerable and IQueryable Data Sources&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/2876616/returning-ienumerablet-vs-iqueryablet&#34;&gt;Returning IEnumerable vs. IQueryable&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The difference is that &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb351562.aspx&#34;&gt;&lt;code&gt;IQueryable&lt;/code&gt;&lt;/a&gt; is the interface that allows LINQ-to-SQL (LINQ.-to-anything really) to work. So if you further refine your query on an &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb351562.aspx&#34;&gt;&lt;code&gt;IQueryable&lt;/code&gt;&lt;/a&gt;, that query will be executed in the database, if possible.&lt;/p&gt;
&lt;p&gt;For the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/9eekhta0.aspx&#34;&gt;&lt;code&gt;IEnumerable&lt;/code&gt;&lt;/a&gt; case, it will be LINQ-to-object, meaning that all objects matching the original query will have to be loaded into memory from the database.&lt;/p&gt;
&lt;p&gt;In code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;IQueryable&amp;lt;Customer&amp;gt; custs = ...;
&lt;span style=&#34;color:#228b22&#34;&gt;// Later on...
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; goldCustomers = custs.Where(c =&amp;gt; c.IsGold);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That code will execute SQL to only select gold customers. The following code, on the other hand, will execute the original query in the database, then filtering out the non-gold customers in the memory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;IEnumerable&amp;lt;Customer&amp;gt; custs = ...;
&lt;span style=&#34;color:#228b22&#34;&gt;// Later on...
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; goldCustomers = custs.Where(c =&amp;gt; c.IsGold);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is quite an important difference, and working on &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb351562.aspx&#34;&gt;&lt;code&gt;IQueryable&lt;/code&gt;&lt;/a&gt; can in many cases save you from returning too many rows from the database. Another prime example is doing paging: If you use &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb300906.aspx&#34;&gt;&lt;code&gt;Take&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb357513.aspx&#34;&gt;&lt;code&gt;Skip&lt;/code&gt;&lt;/a&gt; on &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.iqueryable.aspx&#34;&gt;&lt;code&gt;IQueryable&lt;/code&gt;&lt;/a&gt;, you will only get the number of rows requested; doing that on an &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/9eekhta0.aspx&#34;&gt;&lt;code&gt;IEnumerable&lt;/code&gt;&lt;/a&gt; will cause all of your rows to be loaded in memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Expression tree: a data structure that holds all the logic that makes up the actions in the query.&lt;/p&gt;
- https://www.openheart.icu/cs/effective-csharp6.0/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Dot Net Runtime</title>
        <link>https://www.openheart.icu/cs/dot-net-runtime/</link>
        <pubDate>Sat, 26 Dec 2020 11:25:57 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/dot-net-runtime/</guid>
        <description>42th openheart https://www.openheart.icu/cs/dot-net-runtime/ -&lt;hr&gt;
&lt;p&gt;Source Code Learning for 「&lt;a href=&#34;https://github.com/dotnet/runtime&#34;&gt;&lt;em&gt;Dot Net Runtime&lt;/em&gt;&lt;/a&gt;」.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;microsoftextensionsdependencyinjection&#34;&gt;Microsoft.Extensions.DependencyInjection&lt;/h1&gt;
&lt;p&gt;Branch: &lt;a href=&#34;release/5.0&#34;&gt;release/5.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前使用的都是.NET MVC DI，相对封装较为严重。公司的设计为Composition Root实现MVC中的ConfigureDependencies然后创建BuildServiceProvider。在对方法进行调用前通过IServiceProvider.GetService注入所需类构造函数中的依赖。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dependency injection addresses these problems through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The use of an interface or base class to abstract the dependency implementation.&lt;/li&gt;
&lt;li&gt;Registration of the dependency in a service container. .NET provides a built-in service container, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iserviceprovider&#34;&gt;IServiceProvider&lt;/a&gt;. Services are typically registered at the app&amp;rsquo;s start-up, and appended to an &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection&#34;&gt;IServiceCollection&lt;/a&gt;. Once all services are added, you use &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectioncontainerbuilderextensions.buildserviceprovider&#34;&gt;BuildServiceProvider&lt;/a&gt; to create the service container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Injection&lt;/em&gt; of the service into the constructor of the class where it&amp;rsquo;s used. The framework takes on the responsibility of creating an instance of the dependency and disposing of it when it&amp;rsquo;s no longer needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Microsoft.Extensions.DependencyInjection 命名空间下还有Microsoft.Extensions.DependencyInjection.Abstractions，是Service相关的interface与Extensions。&lt;/p&gt;
&lt;h2 id=&#34;servicedescriptor&#34;&gt;ServiceDescriptor&lt;/h2&gt;
&lt;p&gt;ServiceDescriptor 的包含的属性如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; ServiceLifetime Lifetime { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Type ServiceType { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }
&lt;span style=&#34;color:#658b00&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Type? ImplementationType { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object?&lt;/span&gt; ImplementationInstance { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Func&amp;lt;IServiceProvider, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt;&amp;gt;? ImplementationFactory { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般，在register services的时候，使用ServiceType和ImplementationType来构造一个ServiceDescriptor ，&lt;/p&gt;
&lt;h2 id=&#34;servicecollection&#34;&gt;ServiceCollection&lt;/h2&gt;
&lt;p&gt;IServiceCollection是ServiceDescriptor的Ilist接口。&lt;/p&gt;
&lt;p&gt;很显然，ServiceDescriptor就是register的每一个service，ServiceCollection必然是对Ilist接口的常规方法实现。register services的方法（AddTransient/AddScoped/AddSingletonAdd）都由ServiceCollectionServiceExtensions实现，而其他部分方法（Add/TryAdd/TryAddTransient/TryAddScoped/TryAddSingleton/TryAddEnumerable/Replace/RemoveAll）由ServiceCollectionDescriptorExtensions（为ServiceCollection的Extension）实现。&lt;/p&gt;
&lt;h2 id=&#34;buildserviceprovider&#34;&gt;BuildServiceProvider&lt;/h2&gt;
&lt;p&gt;BuildServiceProvider方法也是IServiceCollection的扩展，其有三个重载，最终是要创建ServiceProvider的实例。&lt;/p&gt;
&lt;p&gt;BuildServiceProvider的三个重载分别参数为空、一个布尔类型的validateScopes、一个ServiceProviderOptions；其实如果参数为空，实际是创建一个Default的ServiceProviderOptions（ValidateScopes与ValidateOnBuild均为false）；传递布尔类型的validateScopes后，会根据此值创建对应的ServiceProviderOptions（ValidateOnBuild为false）。&lt;/p&gt;
&lt;p&gt;BuildServiceProvider最终是构造一个ServiceProvider，出去上面提到的ServiceProviderOptions与ServiceCollection本身之外，ServiceProvider的构造函数还需要IServiceProviderEngine。&lt;/p&gt;
&lt;h2 id=&#34;serviceprovider&#34;&gt;ServiceProvider&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;Microsoft.Extensions.DependencyInjection&lt;/span&gt;
{
    &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;/// The default IServiceProvider.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ServiceProvider&lt;/span&gt; : IServiceProvider, IDisposable, IServiceProviderEngineCallback, IAsyncDisposable
    {
    	&lt;span style=&#34;color:#228b22&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ServiceProvider实现了IServiceProvider（System.ComponentModel）、IDisposable、IServiceProviderEngineCallback（Microsoft.Extensions.DependencyInjection.ServiceLookup）和IAsyncDisposable。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;microsoftextensionsdependencyinjectionservicelookup&#34;&gt;Microsoft.Extensions.DependencyInjection.ServiceLookup&lt;/h1&gt;
&lt;h2 id=&#34;iserviceproviderengine&#34;&gt;IServiceProviderEngine&lt;/h2&gt;
&lt;p&gt;DynamicServiceProviderEngine/RuntimeServiceProviderEngine/ExpressionsServiceProviderEngine/ILEmitServiceProviderEngine都去继承了ServiceProviderEngine（抽象类），并重写了RealizeService方法。&lt;/p&gt;
&lt;h2 id=&#34;callsitevalidator&#34;&gt;CallSiteValidator&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;systemdiagnostics&#34;&gt;System.Diagnostics&lt;/h1&gt;
&lt;h2 id=&#34;debuggerdisplayattribute&#34;&gt;DebuggerDisplayAttribute&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;systemdiagnosticscodeanalysis&#34;&gt;System.Diagnostics.CodeAnalysis&lt;/h1&gt;
&lt;h2 id=&#34;dynamicallyaccessedmembersattribute&#34;&gt;DynamicallyAccessedMembersAttribute&lt;/h2&gt;
&lt;h2 id=&#34;dynamicallyaccessedmembertypes&#34;&gt;DynamicallyAccessedMemberTypes&lt;/h2&gt;
- https://www.openheart.icu/cs/dot-net-runtime/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>I am a freshman</title>
        <link>https://www.openheart.icu/speech/i-am-a-freshman/</link>
        <pubDate>Tue, 01 Dec 2020 16:39:46 +0000</pubDate>
        
        <guid>https://www.openheart.icu/speech/i-am-a-freshman/</guid>
        <description>42th openheart https://www.openheart.icu/speech/i-am-a-freshman/ -&lt;h1 id=&#34;step-out-of-my-comfort-zone&#34;&gt;Step out of my comfort zone&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sentence&#34;&gt;Sentence&lt;/h2&gt;
&lt;p&gt;We have a new team member onboard from 1st Dec 2020.&lt;/p&gt;
&lt;p&gt;Please join me in welcoming Kris to Infor and give them your great support in every way possible!&lt;/p&gt;
&lt;p&gt;Welcome to the team!&lt;/p&gt;
&lt;p&gt;Thank you. It is my honor to be able to join our team.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t spin your wheels! 这里的spin your wheels&lt;a href=&#34;https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD/spin-your-wheels&#34;&gt;(cambridge.org)&lt;/a&gt; 可以理解为&amp;quot;to waste time doing things that achieve nothing&amp;quot;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re in good company. 你是一个好合作伙伴。此处的company为朋友、同伴&lt;/p&gt;
&lt;p&gt;I really enjoy your company. 我很喜欢你的陪伴。此处的company为陪伴&lt;/p&gt;
&lt;p&gt;She&amp;rsquo;s not coming – she&amp;rsquo;s got company. 她来不了了，她家里有客人。此处的company为客人&lt;/p&gt;
&lt;p&gt;Please be aware that the security team run &lt;em&gt;phishing simulations(网络钓鱼模拟)&lt;/em&gt; that are designed to help you practice recognizing the common &lt;em&gt;tactics scammers(欺诈者)&lt;/em&gt; use to get you to reveal sensitive information or install &lt;em&gt;malware(恶意软件)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And give our warm welcome to Mr. Kris Nie 聂志勇 joins Infor China effective 1st December 2020, as Software Engineer, reporting to Jeking Pan, Manager, Software Development.&lt;/p&gt;
&lt;p&gt;What do you make of this. 你觉得这个怎么样。&lt;/p&gt;
&lt;p&gt;Last I checked/Last time I checked. 如假包换/据我所知&lt;/p&gt;
&lt;p&gt;This is the way.&lt;/p&gt;
&lt;p&gt;You have my word.&lt;/p&gt;
&lt;p&gt;I have spoken.&lt;/p&gt;
&lt;p&gt;That is the most beautiful moonrise I&amp;rsquo;ve seen in my entire life. 那是我这辈子见过的最美的月出时分。&lt;/p&gt;
&lt;p&gt;This page intentionally  left blank.&lt;/p&gt;
&lt;p&gt;This is a performance review for the first month of your probation period.&lt;/p&gt;
&lt;p&gt;It is a good time to show myself/prove I am a five.&lt;/p&gt;
&lt;p&gt;Any questions please just let me know.&lt;/p&gt;
&lt;p&gt;This is a final session for the Probation Review meeting.&lt;/p&gt;
&lt;p&gt;You can list all the things that you have completed or you have concerned with in the week and your plan for the next week.&lt;/p&gt;
&lt;p&gt;Any other topics are welcome to be listed in your update too.&lt;/p&gt;
&lt;p&gt;The things that I have completed and my simple plan as shown in the table below. Attached please find the excel file. I will be very grateful if you can help me improve my study planning.&lt;/p&gt;
&lt;p&gt;Enter up to 20 characters. 最多输入20个字符&lt;/p&gt;
&lt;p&gt;If you have already done it, please ignore the email. Otherwise, please follow below steps to update your MFS settings.&lt;/p&gt;
&lt;p&gt;Mr. Qian’s Forum 培训分享&lt;/p&gt;
&lt;p&gt;Hope this helps!&lt;/p&gt;
&lt;p&gt;All I know is that……/As far as I can tell/As far as I know&lt;/p&gt;
&lt;p&gt;Any thoughts for this discussion?/Any suggestion is welcome!&lt;/p&gt;
&lt;p&gt;FYI Team, please be well noticed, important for you to get aware of.&lt;/p&gt;
&lt;p&gt;If any questions or confusions, please feel free to ask around,&lt;/p&gt;
&lt;p&gt;Estimating is used to create quotes for customers.&lt;/p&gt;
&lt;p&gt;When improperly managed, &amp;hellip; 管理不当时&lt;/p&gt;
&lt;p&gt;How to express you are quite familiar/a little bit familiar/totally new to a word? I would suggest &lt;em&gt;very familiar&lt;/em&gt;, &lt;em&gt;somewhat familiar&lt;/em&gt;, and &lt;em&gt;unfamiliar&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here, the consumer sees all threes as a unit.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Up to you&amp;rdquo; means that someone is giving another person full responsibility to make their own decisions.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Depend on you&amp;rdquo; means that you&amp;rsquo;re putting your faith into that person, that you rely on him or her.&lt;/p&gt;
&lt;p&gt;I have a good impression of/feeling about her&lt;/p&gt;
&lt;p&gt;Good day! We have received your ticket regarding JIRA Account Setup Request for Kris Nie.&lt;/p&gt;
&lt;p&gt;Microsoft Outlook and its &lt;!-- raw HTML omitted --&gt;crippled sibling&lt;!-- raw HTML omitted --&gt; Outlook Express.&lt;/p&gt;
&lt;p&gt;Let’s recap. 让我们回顾一下&lt;/p&gt;
&lt;p&gt;Today is officially a holiday, but it’s business as usual around here.&lt;/p&gt;
&lt;p&gt;Thanks for your time, ……&lt;/p&gt;
&lt;p&gt;Per my understanding, ……&lt;/p&gt;
&lt;p&gt;Sorry for the inconvenience.&lt;/p&gt;
&lt;p&gt;&amp;ndash;I&amp;rsquo;m going to the bar. Anyone else coming?/I&amp;rsquo;m going hunting, are you coming with me?  &amp;ndash; Count me in!&lt;/p&gt;
&lt;p&gt;Will you please write me a letter sometime when you get the time?&lt;/p&gt;
&lt;p&gt;Congrats.&lt;/p&gt;
&lt;p&gt;There are many people to whom I owe thanks for their contributions to this book.&lt;/p&gt;
&lt;p&gt;My pleasure./It&amp;rsquo;s my pleasure.乐意效劳，这是我的荣幸 Sure/Sure thing.应该的 Of course!没事，这是当然的 You bet!当然的，不客气，不用谢 Anytime 别客气，随时愿为您效劳 Happy to help!很开心能帮到你 No worries.没问题 No sweat. 小意思 That&amp;rsquo;s all right.不用谢，不客气，没关系&lt;/p&gt;
&lt;p&gt;After my investigation, ……&lt;/p&gt;
&lt;p&gt;Very witty.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s it you want? You want the moon? Just say the word, and I&amp;rsquo;ll throw a lasso around it and pull it down.&lt;/p&gt;
&lt;p&gt;Youth is wasted on the wrong people.&lt;/p&gt;
&lt;p&gt;Shame on you.&lt;/p&gt;
&lt;p&gt;What gives.&lt;/p&gt;
&lt;p&gt;Some joke.&lt;/p&gt;
&lt;p&gt;I am making violent love to u.&lt;/p&gt;
&lt;p&gt;Do I paint a correct picture, or do I exaggerate?&lt;/p&gt;
&lt;p&gt;We mated.&lt;/p&gt;
&lt;p&gt;Attached is the SQLCMD doc introducing SQLCMD Model In MSSMS Query Editor. I am glad to share SQLCMD with you. It shows me an easy way of changing SQL Server connection in MSSMS. And more commands of SQLCMD is collected. Hope it helps in your work.&lt;/p&gt;
&lt;p&gt;Suit yourself/it&amp;rsquo;s up to u/I don&amp;rsquo;t care/as u wish/whatever. 随便。&lt;/p&gt;
&lt;p&gt;Whatever u think is fine with me.&lt;/p&gt;
&lt;p&gt;Okay, if you have been paying attention unlike a couple people, you&amp;rsquo;re going to be very concerned about the size of these page tables.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a kind of jaw-dropping.&lt;/p&gt;
&lt;p&gt;The unstoppable marching of time that is slowly guiding us all towards an inevitable death, it scares me the most.&lt;/p&gt;
&lt;p&gt;Time to FAP!&lt;/p&gt;
&lt;p&gt;No one ever got laid by going Dutch.&lt;/p&gt;
&lt;p&gt;I am very trainable.&lt;/p&gt;
&lt;p&gt;I am all fucked up!&lt;/p&gt;
&lt;p&gt;I take my work very seriously.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s time for you to go.&lt;/p&gt;
&lt;p&gt;Having a sensitive emotions is turning out to be a pain.&lt;/p&gt;
&lt;p&gt;We did it, we achieved social justice.&lt;/p&gt;
&lt;p&gt;Details as the attached mail.&lt;/p&gt;
&lt;p&gt;Hot hatch. 钢炮！！！！&lt;/p&gt;
&lt;p&gt;They get really big one like it&amp;rsquo;s not a time in the month.&lt;/p&gt;
&lt;p&gt;How do you walk to me.&lt;/p&gt;
&lt;p&gt;Like lambs to the slaughter.&lt;/p&gt;
&lt;p&gt;What a saint you are.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;e.g.&amp;rdquo; means &amp;ldquo;for example&amp;rdquo;, &amp;ldquo;i.e.&amp;rdquo; means &amp;ldquo;in other words&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the memory embedded in me.&lt;/p&gt;
&lt;p&gt;How about now?&lt;/p&gt;
&lt;p&gt;Today is my day, whatever I want do.&lt;/p&gt;
&lt;p&gt;Keep going.&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t wait to be inside you.&lt;/p&gt;
&lt;p&gt;Call me dirty. Maybe Daddy.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s a good clue.&lt;/p&gt;
&lt;p&gt;If I&amp;rsquo;m reading this right&amp;hellip;&lt;/p&gt;
&lt;p&gt;Not sure where we&amp;rsquo;ll land on this one.&lt;/p&gt;
&lt;p&gt;There is nothing more expensive than something free.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll correct my CMD command and prevent it from happening again.&lt;/p&gt;
&lt;p&gt;Thanks for your kind reminder.&lt;/p&gt;
&lt;p&gt;Thanks for your reminding me of the meeting.&lt;/p&gt;
&lt;p&gt;The process is fluid and changes are expected before it is rolled out to customers.&lt;/p&gt;
&lt;p&gt;Feedback is expected and encouraged.&lt;/p&gt;
&lt;p&gt;It can be reopened if found to still be an issue.&lt;/p&gt;
&lt;p&gt;I hope this letter finds you well.&lt;/p&gt;
&lt;p&gt;Every second you&amp;rsquo;re not running, I&amp;rsquo;m only getting closer.&lt;/p&gt;
&lt;p&gt;I have no sight into her heart.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve heard it said that Daisy&amp;rsquo;s murmur was only to make people lean toward her.&lt;/p&gt;
&lt;p&gt;A sort of apology arose to my lips.&lt;/p&gt;
&lt;p&gt;I enjoyed looking at her.&lt;/p&gt;
&lt;p&gt;It occurred to me now that I had seen her, or a picture of her, somewhere before.&lt;/p&gt;
&lt;p&gt;As though he were moving a checker to another square.&lt;/p&gt;
&lt;p&gt;&amp;lsquo;I hate that word hulking, &#39; objected Tom crossly, &amp;lsquo;even in kidding. &#39;&lt;/p&gt;
&lt;p&gt;Why the agression? Is this your time of the month?&lt;/p&gt;
&lt;p&gt;Framing her in narcotic related crimes.&lt;/p&gt;
&lt;p&gt;be out of the ordinary&lt;/p&gt;
&lt;p&gt;shed some tears&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t be so impatient!&lt;/p&gt;
&lt;p&gt;Be careful what you say/Watch your mouth/Mind your words.&lt;/p&gt;
&lt;p&gt;Bite the pillow, it will be hurt.&lt;/p&gt;
&lt;p&gt;Not really my cup of tea.&lt;/p&gt;
&lt;p&gt;What are your turn ons and turn offs?&lt;/p&gt;
&lt;p&gt;She is a call girl.&lt;/p&gt;
&lt;p&gt;There is a God.&lt;/p&gt;
&lt;p&gt;You are unbelievably cute.&lt;/p&gt;
&lt;p&gt;The best way to destigmatize something is to talk about it.&lt;/p&gt;
&lt;p&gt;I find her very attractive(alluring).&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;phrase&#34;&gt;Phrase&lt;/h2&gt;
&lt;p&gt;Carbon Copy 副本、抄送，outlook中的&lt;em&gt;cc&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;lead time 交付周期，订货至交货的时间&lt;/p&gt;
&lt;p&gt;Intranet 内联网&lt;/p&gt;
&lt;p&gt;General Ledger 总账&lt;/p&gt;
&lt;p&gt;Work in process 在制品，在产品&lt;/p&gt;
&lt;p&gt;Mfg. Order/Manufacturing Order 制造订单&lt;/p&gt;
&lt;p&gt;Job Orders 工单&lt;/p&gt;
&lt;p&gt;Floor plan 平面图&lt;/p&gt;
&lt;p&gt;Break rules 犯规，破例&lt;/p&gt;
&lt;p&gt;Referral fee 推荐费&lt;/p&gt;
&lt;p&gt;Per Lot Quantity 每手数量&lt;/p&gt;
&lt;p&gt;Scope of work&lt;/p&gt;
&lt;p&gt;Firm a planned order 确定计划订单&lt;/p&gt;
&lt;p&gt;the effects can ripple down 效率下降&lt;/p&gt;
&lt;p&gt;over-conservative plan 过度保守的计划&lt;/p&gt;
&lt;p&gt;purchase order(PO) 订购单&lt;/p&gt;
&lt;p&gt;maintain a comprehensive audit trail of changes 保持全面的变更审计跟踪&lt;/p&gt;
&lt;p&gt;engineering change notice (ECN) 工程变更通知&lt;/p&gt;
&lt;p&gt;mass material substitution&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_U.S._state_and_territory_abbreviations&#34;&gt;Prov/St Code 省/州缩写(abbreviations)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Three tier architecture 三层架构&lt;/p&gt;
&lt;p&gt;Earned value management&lt;/p&gt;
&lt;p&gt;Misc. miscellaneous 杂项&lt;/p&gt;
&lt;p&gt;Work Breakdown Structure, WBS 工作分解结构&lt;/p&gt;
&lt;p&gt;Cost Variance 成本偏差&lt;/p&gt;
&lt;p&gt;Shrinkage rates 收缩率&lt;/p&gt;
&lt;p&gt;Circuit Board 电路板&lt;/p&gt;
&lt;p&gt;Value-added management 增值管理&lt;/p&gt;
&lt;p&gt;the logistics of distribution 分销&lt;/p&gt;
&lt;p&gt;semifinished good 半成品&lt;/p&gt;
&lt;p&gt;Business as usual (BAU)&lt;/p&gt;
&lt;p&gt;Cute as a button&lt;/p&gt;
&lt;p&gt;I have the final say&lt;/p&gt;
&lt;p&gt;Vicious circle 恶性循环&lt;/p&gt;
&lt;p&gt;Fireside chat&lt;/p&gt;
&lt;p&gt;Tough （肉）太老，咬不动&lt;/p&gt;
&lt;p&gt;Tender 软嫩，Q弹&lt;/p&gt;
&lt;p&gt;Rare 一分熟， Medium rare 三分熟，Medium well 七分熟，Well done 全熟&lt;/p&gt;
&lt;p&gt;Cook 厨师，Chef 主厨，Absolutely delicious! 好吃&lt;/p&gt;
&lt;p&gt;nippy and zippy.&lt;/p&gt;
&lt;p&gt;last mile: （死刑犯从牢房走到刑场的）最后路程&lt;/p&gt;
&lt;p&gt;Shop floor&lt;/p&gt;
&lt;p&gt;Receive the package 收快递，fragile 易碎品，发快递用send&lt;/p&gt;
&lt;p&gt;Collect the package 取快递，locker 快递柜，快递 express delivery&lt;/p&gt;
&lt;p&gt;Common Sense Series 常识&lt;/p&gt;
&lt;p&gt;Code of Conduct 行为准则&lt;/p&gt;
&lt;p&gt;Making Tax Digital, MTD 数字化税收&lt;/p&gt;
&lt;p&gt;Value-added tax, VAT 增值税&lt;/p&gt;
&lt;p&gt;Venture capital fund, 风险投资基金; VC, 风投&lt;/p&gt;
&lt;p&gt;take note of&lt;/p&gt;
&lt;p&gt;may I have a look at/on&lt;/p&gt;
&lt;p&gt;Drastic measures 强硬措施&lt;/p&gt;
&lt;p&gt;Plastic surgery 整形外科&lt;/p&gt;
&lt;p&gt;Haute couture 高级定制&lt;/p&gt;
&lt;p&gt;Mass market 大众市场&lt;/p&gt;
&lt;p&gt;Menswear 男装&lt;/p&gt;
&lt;p&gt;Womenswear 女装&lt;/p&gt;
&lt;p&gt;Spring/summer 春夏&lt;/p&gt;
&lt;p&gt;Autumn/winter 秋冬&lt;/p&gt;
&lt;p&gt;Fall/winter 秋冬&lt;/p&gt;
&lt;p&gt;Ready-to-wear （RTW）高级成衣&lt;/p&gt;
&lt;p&gt;Resort 早春度假&lt;/p&gt;
&lt;p&gt;Pre-Fall 早秋&lt;/p&gt;
&lt;p&gt;Spring-couture 春季高定&lt;/p&gt;
&lt;p&gt;Fall-couture 秋季高定&lt;/p&gt;
&lt;p&gt;Bridal 婚礼系列&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;abbreviation&#34;&gt;Abbreviation&lt;/h2&gt;
&lt;h3 id=&#34;phrase-1&#34;&gt;Phrase&lt;/h3&gt;
&lt;p&gt;ASAP, as soon as possible 尽快&lt;/p&gt;
&lt;p&gt;BID, break it down 细分明细&lt;/p&gt;
&lt;p&gt;BTW, by the way 顺带一提&lt;/p&gt;
&lt;p&gt;COB, close of business 下班时&lt;/p&gt;
&lt;p&gt;EOB, end of business 下班时&lt;/p&gt;
&lt;p&gt;EOD, end of day 今天以內&lt;/p&gt;
&lt;p&gt;DOE, depending on experience 视工作经验而定&lt;/p&gt;
&lt;p&gt;ETA, estimated time of arrival 预计达到时间&lt;/p&gt;
&lt;p&gt;FAQ, frequently asked questions 常见问题&lt;/p&gt;
&lt;p&gt;FTE, full-time employee 全体职工&lt;/p&gt;
&lt;p&gt;FWIW, for what it’s worth 不管有沒有用&lt;/p&gt;
&lt;p&gt;FYI, for your information 供你参考&lt;/p&gt;
&lt;p&gt;FYR, for your reference 供你参考&lt;/p&gt;
&lt;p&gt;FYU, for your use 供你使用&lt;/p&gt;
&lt;p&gt;IAM, in a meeting 会议中&lt;/p&gt;
&lt;p&gt;IMO, in my opinion 在我看来&lt;/p&gt;
&lt;p&gt;LET, leaving early today 今天提早走&lt;/p&gt;
&lt;p&gt;LMK, let me know 通知我&lt;/p&gt;
&lt;p&gt;MoM, month over month 月度比较&lt;/p&gt;
&lt;p&gt;MTD, month to date 月初到现在&lt;/p&gt;
&lt;p&gt;OOO, out of office 不在办公室&lt;/p&gt;
&lt;p&gt;OT, over time 加班&lt;/p&gt;
&lt;p&gt;OTP, on the phone 通话中&lt;/p&gt;
&lt;p&gt;PA, performance appraisal 绩效考核&lt;/p&gt;
&lt;p&gt;POC, point of contact 联系人&lt;/p&gt;
&lt;p&gt;PTE, part-time employee 兼职雇员&lt;/p&gt;
&lt;p&gt;PTO, paid time off 带薪休假&lt;/p&gt;
&lt;p&gt;NDA, Non-disclosure agreement 保密协议&lt;/p&gt;
&lt;p&gt;NRN, no reply necessary 不需回复&lt;/p&gt;
&lt;p&gt;NSFW, not safe for work&lt;/p&gt;
&lt;p&gt;RFD, request for discussion 请求讨论&lt;/p&gt;
&lt;p&gt;RSVP, Répondez s’il vous plait 法文的请回复&lt;/p&gt;
&lt;p&gt;TBA, to be announced&lt;/p&gt;
&lt;p&gt;TBD, to be determined&lt;/p&gt;
&lt;p&gt;TCC, teleconference call 电话会议&lt;/p&gt;
&lt;p&gt;TED, Tell me, explain to me, describe to me&lt;/p&gt;
&lt;p&gt;TL;DR, Too long didn’t read 太长，没读&lt;/p&gt;
&lt;p&gt;TOS, terms of service 服务条款&lt;/p&gt;
&lt;p&gt;TYT, take your time 别着急，慢慢来&lt;/p&gt;
&lt;p&gt;WFH, work from home&lt;/p&gt;
&lt;p&gt;WIIFM, what’s in it for me 这对我有什么好处&lt;/p&gt;
&lt;p&gt;WOM, word of mouth 口碑传播&lt;/p&gt;
&lt;p&gt;YTD, year to date 年底、今年之內&lt;/p&gt;
&lt;p&gt;POC, &lt;a href=&#34;https://en.wikipedia.org/wiki/Proof_of_concept&#34;&gt;Proof of concept&lt;/a&gt; 概念证明&lt;/p&gt;
&lt;p&gt;E12, Early Offer Year 12 education&lt;/p&gt;
&lt;p&gt;ACM, Association for Computing Machinery 计算机协会&lt;/p&gt;
&lt;p&gt;FQA, Frequently asked questions&lt;/p&gt;
&lt;p&gt;BI, Business intelligence 商业智能&lt;/p&gt;
&lt;p&gt;APAR,  Accounts Payable/Accounts Receivable &lt;em&gt;(finance)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;APAC, The Asia-Pacific&lt;/p&gt;
&lt;p&gt;RDBMS, abbr. 关系型数据库管理系统（Relational Database Management System）&lt;/p&gt;
&lt;p&gt;L3, means Line 3; Line 1 means On Site; Line 2 means Support; Line 3 means R&amp;amp;D&lt;/p&gt;
&lt;h3 id=&#34;title-and-department-name&#34;&gt;Title and department name&lt;/h3&gt;
&lt;p&gt;CDO, chief data officer&lt;/p&gt;
&lt;p&gt;CEO, chief executive officer&lt;/p&gt;
&lt;p&gt;CFO, chief financial officer&lt;/p&gt;
&lt;p&gt;CIO, chief information officer&lt;/p&gt;
&lt;p&gt;CMO, chief marketing officer&lt;/p&gt;
&lt;p&gt;COO, chief operating officer&lt;/p&gt;
&lt;p&gt;CPA, certified public accountant 注册会计师&lt;/p&gt;
&lt;p&gt;CSO, chief security officer&lt;/p&gt;
&lt;p&gt;CSR, corporate social responsibility 企业社会责任&lt;/p&gt;
&lt;p&gt;CTO, chief technology officer&lt;/p&gt;
&lt;p&gt;CFP, certified financial planner 注册金融理财师&lt;/p&gt;
&lt;p&gt;GC, general counsel 首席法律顾问&lt;/p&gt;
&lt;p&gt;HR, human resources 人力资源&lt;/p&gt;
&lt;p&gt;PM, project manager 项目经理&lt;/p&gt;
&lt;p&gt;PR, public relations 公共关系&lt;/p&gt;
&lt;p&gt;R&amp;amp;D, research and development 研发&lt;/p&gt;
&lt;p&gt;SVP, Senior Vice President 高级副总裁&lt;/p&gt;
&lt;p&gt;President of Products 产品总裁&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mark&#34;&gt;Mark&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;!&lt;/code&gt; 叹号 exclamation mark/bang&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt; 问号 question mark&lt;/p&gt;
&lt;p&gt;&lt;code&gt;,&lt;/code&gt; 逗号 comma&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; 点号 dot/period/point&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:&lt;/code&gt; 冒号 colon&lt;/p&gt;
&lt;p&gt;&lt;code&gt;;&lt;/code&gt; 分号 semicolon&lt;/p&gt;
&lt;p&gt;&lt;code&gt;”&lt;/code&gt; 双引号 quotation marks/double quote&lt;/p&gt;
&lt;p&gt;&lt;code&gt;‘&lt;/code&gt; 单引号/撇号 apostrophe/single quote&lt;/p&gt;
&lt;p&gt;`  重音号 backquote/grave accent&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt; 加号 plus sign&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 减号/横线 hyphen/dash/minus sign/&lt;/p&gt;
&lt;p&gt;&lt;code&gt;=&lt;/code&gt; 等号 equal sign&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/&lt;/code&gt; 斜线 slash&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\ &lt;/code&gt;反斜线 backslash/escape&lt;/p&gt;
&lt;p&gt;&lt;code&gt;|&lt;/code&gt;竖线 bar/pipe/vertical bar&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt;下划线 underline/underscore&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; 美元符号 dollar sign&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@&lt;/code&gt; at at sign&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#&lt;/code&gt; 井号 crosshatch/sharp/hash&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%&lt;/code&gt; 百分号 percent sign/mod&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; and/和/兼 and/ampersand&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt; 折音号 circumflex/caret&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt; 波浪号 tilde&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{}&lt;/code&gt; （左右）花括号/大括号 (left/right|open/close) braces&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[]&lt;/code&gt; （左右）方括号/中括号 (left/right|open/close) brackets&lt;/p&gt;
&lt;p&gt;&lt;code&gt;()&lt;/code&gt; （左右）圆括号/小括号 (left/right|open/close) parentheses&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 尖括号 angle brackets&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; 大于号 less than&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; 小于号 greater than&lt;/p&gt;
&lt;p&gt;葡语中的变音符号（diacritic mark）在英文中的读法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt; circumflex/care&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt; tilde/squiggle&lt;/p&gt;
&lt;p&gt;&lt;code&gt;´&lt;/code&gt; acute&lt;/p&gt;
&lt;p&gt;` grave&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ç&lt;/code&gt; cedilla&lt;/p&gt;
&lt;p&gt;&lt;code&gt;...&lt;/code&gt; ellipsis&lt;/p&gt;
&lt;h3 id=&#34;希腊字母表&#34;&gt;希腊字母表&lt;/h3&gt;
&lt;p&gt;α　Α　alpha /alpha/ h表示送气音，在古希腊语中尚没有音位/f/，所以/pha/的发音类似普通话的“趴”。&lt;/p&gt;
&lt;p&gt;β　Β　beta /be:ta/ /e:/表示长元音，/e/的发音不是英语D.J.音标里的[e]，而类似K.K.音标里的/e/或者法语的/e/。/t/不送气，所以/ta/类似普通话“搭”而不是“他”。&lt;/p&gt;
&lt;p&gt;γ　Γ　gamma /gam:a/　/m:/表示长辅音，即在发辅音时，其持阻阶段应该适当延长，然后再做除阻动作。&lt;/p&gt;
&lt;p&gt;δ　Δ　delta /de:lta/&lt;/p&gt;
&lt;p&gt;ε　Ε　epsilon /epsilo:n/ /o/的发音要比英国英语字母组合au的发音更闭一些。&lt;/p&gt;
&lt;p&gt;ζ　Ζ　zeta /ze:ta, dze:ta/ /z, dz/浊的塞音或塞擦音。&lt;/p&gt;
&lt;p&gt;η　Η　eta /e:ta/ 第一个音节为长音。&lt;/p&gt;
&lt;p&gt;θ　Θ　theta /the:ta/ /th/表示送气音，t为齿化的(dentalised)塞音，而不是英语里的/t/，类似汉语里的t，但要更紧一些。&lt;/p&gt;
&lt;p&gt;ι　Ι　iota /jo:ta，io:ta/&lt;/p&gt;
&lt;p&gt;κ　Κ　kappa /kap:a/ /p:/表示长辅音，其描述类似/m:/，前一个p类似于英语里“失去爆破”或者汉语粤方言中的塞音韵尾/-p/，/k/不送气。&lt;/p&gt;
&lt;p&gt;λ　Λ　lambda /lambda/&lt;/p&gt;
&lt;p&gt;μ　Μ　my /my:/ /y:/是长元音，类似汉语的“淤”以及法语字母u单独存在时的发音。&lt;/p&gt;
&lt;p&gt;ν　Ν　ny /ny:/&lt;/p&gt;
&lt;p&gt;ξ　Ξ　xi /ksi:/&lt;/p&gt;
&lt;p&gt;ο　Ο　omicron /omikro:n/ micron表示“小”，所以是“短o”的意思。&lt;/p&gt;
&lt;p&gt;π　Π　pi /pi:/ /p/不送气，所以应该类似“逼”而不是“批”。&lt;/p&gt;
&lt;p&gt;ρ　Ρ　rho /rho:/ /rh/实际上表示清化的擦颤音，这里打不出来，姑且用这个组合吧。据说捷克语里有，这就是为什么Dvorak被翻译为“德沃夏克”而不是“德沃拉克”的原因。据说古希腊语有两个颤音，一个是词头的擦颤音，一个是词尾的成音节的真正浊颤音，所以希腊字母标里有两个rho，一个只用在词头，一个只用在词尾。&lt;/p&gt;
&lt;p&gt;σ　Σ　sigma /sigma/ /s/为齿化的，类似汉语的s-，而不是英语的[s]。与rho类似希腊字母表里也有两个sigma，一个在词头，一个在词尾，据说在词尾的也能成音节，会不会读得象汉语的“丝”一样就不得而知了。&lt;/p&gt;
&lt;p&gt;τ　Τ　tau /tau,tay?/ 后面一部分得读音不得而知，/u/还是/y/？/t/不送气，所以应该类似“搭屋”/“搭淤”，而非“套”。&lt;/p&gt;
&lt;p&gt;υ　Υ　ypsilon /y:psilo:n/ /y/类似汉语的“淤”而非“乌”，拉丁语里没有这个音，所以字母命名为 igraeca，即“希腊的i”的意思。与/i/部位相同，但是圆唇元音。&lt;/p&gt;
&lt;p&gt;φ　Φ　phi /phi:/ /ph/表示送气音，所以应该类似“批”。&lt;/p&gt;
&lt;p&gt;χ　Χ　chi /khi:/ c在古代拉丁语里的读音总是为/k/，/kh/为送气音。&lt;/p&gt;
&lt;p&gt;ψ　Ψ　psi /psi:/&lt;/p&gt;
&lt;p&gt;ω　Ω　omega /o:me:ga/ /o:/是长音，因为mega表示大的意思，即“大的o”&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;time-zone&#34;&gt;Time Zone&lt;/h2&gt;
&lt;p&gt;SGT (Singapore, GMT+08:00)&lt;/p&gt;
&lt;p&gt;IST (Mumbai, GMT+05:30)&lt;/p&gt;
&lt;p&gt;BST (London, GMT+0100)&lt;/p&gt;
&lt;p&gt;EDT (New York, GMT-05:00)&lt;/p&gt;
&lt;p&gt;PDT (San Francisco, GMT-08:00)&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;pronounce&#34;&gt;Pronounce&lt;/h1&gt;
&lt;h2 id=&#34;live&#34;&gt;Live&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;[liv]&lt;/em&gt;
vi.活,生存；居住; 住；继续存在,留存
vt.&amp;amp; vi.以某种方式生活
&lt;em&gt;[laiv]&lt;/em&gt;
adj.活的,有生命的；真正的；燃烧着的；带电的；未爆炸的; 随时可用的；当前重要的；现场直播的,实况转播的
adv.实地,现场地,以直播方式&lt;/p&gt;
- https://www.openheart.icu/speech/i-am-a-freshman/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Adaptive Code</title>
        <link>https://www.openheart.icu/cs/adaptive-code/</link>
        <pubDate>Sat, 21 Nov 2020 22:30:12 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/adaptive-code/</guid>
        <description>42th openheart https://www.openheart.icu/cs/adaptive-code/ -&lt;h1 id=&#34;adaptive-code-agile-coding-with-design-patterns-and-solid-principleshttpsgithubcomadaptivecode&#34;&gt;&lt;a href=&#34;https://github.com/AdaptiveCode&#34;&gt;Adaptive Code: Agile coding with design patterns and SOLID principles&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;从标题中就不难发现，Adaptive Code的重点有三个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;敏捷编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设计模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOLID(单一功能、开闭原则、里氏替换、接口隔离以及依赖反转)原则&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scrum&#34;&gt;Scrum&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.scrum.org/resources/what-is-scrum&#34;&gt;scrum.org&lt;/a&gt;  2020-Scrum-Guide-US&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scrum is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lightweight&lt;/li&gt;
&lt;li&gt;Simple to understand&lt;/li&gt;
&lt;li&gt;Difficult to master&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;what&#34;&gt;What&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;All work is prioritized on the product backlog and, at the start of each sprint, the development team commits to the work that they will complete during the new iteration by placing it on the sprint backlog. The unit of work within Scrum is the &lt;strong&gt;story&lt;/strong&gt;. The product backlog is a prioritized queue of pending stories, and each sprint is defined by the stories that will be developed during an iteration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前公司也是采用的这种开发框架，将一个项目分为多个迭代（sprint），但是此处引出了一个之前没听过的story。Story在后续Hierarchy of composition中也提到并详细介绍，此处的story可以就相当于是产品积压项，Story下可以有确定的Task（一个Story需要多个人完成，每个人都有自己的任务）。&lt;/p&gt;
&lt;h4 id=&#34;agile-software-development-敏捷软件开发与scrum&#34;&gt;Agile software development (敏捷软件开发)与Scrum&lt;/h4&gt;
&lt;p&gt;Scrum is one of the most common implementations of an Agile process.&lt;/p&gt;
&lt;h4 id=&#34;roles-and-responsibilities&#34;&gt;Roles and responsibilities&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Product owner&lt;/strong&gt;(PO, provides the link between the client or customer and the rest of the development team, &lt;strong&gt;what is to be done&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scrum master&lt;/strong&gt;(SM, shields the team from any external distractions during the sprint and tackles any of the impediments that the team flags during the daily Scrum meeting, &lt;strong&gt;how it is to be done&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Development team&lt;/strong&gt;(generalizing specialists)&lt;/p&gt;
&lt;h4 id=&#34;the-scrum-board&#34;&gt;The Scrum board&lt;/h4&gt;
&lt;p&gt;Physical Scrum boards/Digital Scrum boards.&lt;/p&gt;
&lt;h4 id=&#34;sprint-burndown-chart&#34;&gt;Sprint burndown chart&lt;/h4&gt;
&lt;p&gt;closely to the path of perfection.&lt;/p&gt;
&lt;h4 id=&#34;product-backlog&#34;&gt;Product backlog&lt;/h4&gt;
&lt;p&gt;产品积压项，对应产品的新feature。&lt;/p&gt;
&lt;h4 id=&#34;sprint-planning&#34;&gt;Sprint planning&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Avoiding Parkinson’s Law&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Parkinson’s Law states: “Work expands so as to fill the time available for its completion.” —Cyril Northcote Parkinson&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.mbalib.com/wiki/%E5%B8%95%E9%87%91%E6%A3%AE%E5%AE%9A%E5%BE%8B&#34;&gt;帕金森定律&lt;/a&gt;是指企业在发展过程中往往会因业务的扩展或其他原因而出现的一种现象，这一效应使得企业的机构迅速膨胀资源浪费员工积极性下降。&lt;/p&gt;
&lt;p&gt;The focus should remain on completing the story—that is, on meeting the definition of done—as quickly as possible.&lt;/p&gt;
&lt;p&gt;Affinity estimation &lt;strong&gt;合理&lt;/strong&gt;的工时分配（取决于对项目业务、研发人员的能力的了解程度，以及对其他突发情况的风险应对计划）&lt;/p&gt;
&lt;p&gt;从大到小排序所有的stories，然后从小到大开始。&lt;/p&gt;
&lt;h4 id=&#34;stand-up-meeting&#34;&gt;Stand-up meeting&lt;/h4&gt;
&lt;p&gt;死亡询问What did you do yesterday? What will you do today? What impediments do you face?&lt;/p&gt;
&lt;h3 id=&#34;why&#34;&gt;Why&lt;/h3&gt;
&lt;h4 id=&#34;cynefin-framework&#34;&gt;Cynefin framework&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Lean, or Agile, approaches to software acknowledge that the problem of software delivery is at least complicated and can even be complex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;敏捷开发或精益求精的软件，才能保证在Cynefin的第一或第二象限，避免进入Chaos或者all is not quite as it seems(一切都不尽如人意)的Obvious。我的理解是，Chaos就是毫无头绪；而Obvious就是传统的瀑布式开发，难以&lt;strong&gt;适应复杂的需求或者频繁的需求变更&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;scrum-versus-waterfall&#34;&gt;Scrum versus waterfall&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;waterfall&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the output from one stage becomes the input to the next&lt;/li&gt;
&lt;li&gt;each phase is completed before moving to the next phase&lt;/li&gt;
&lt;li&gt;no errors, issues, problems, or m standings are discovered after a phase has completed&lt;/li&gt;
&lt;li&gt;document-centric, generating a lot of documentation that does not directly improve the software product&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Agile processes：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;welcomes change and allows everyone to adapt to the changes that will occur&lt;/li&gt;
&lt;li&gt;This is not to say that documentation is unimportant or that Agile processes never produce documentation(living documents, such as wikis)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;shortcoming&#34;&gt;Shortcoming&lt;/h4&gt;
&lt;h3 id=&#34;how&#34;&gt;How&lt;/h3&gt;
&lt;p&gt;本章开始就提出如下问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Given that Agile frameworks are now prevalent, how can you ensure that the code you write enables and complements your development framework?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这肯定也是我们所关注的重中之重。&lt;/p&gt;
&lt;p&gt;敏捷开发流程之外还需要注意的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rigidity&lt;/li&gt;
&lt;li&gt;Lack of abstractions&lt;/li&gt;
&lt;li&gt;Too many abstractions&lt;/li&gt;
&lt;li&gt;Mixed responsibilities&lt;/li&gt;
&lt;li&gt;Untestability&lt;/li&gt;
&lt;li&gt;Skyhooks vs. cranes(All skyhooks should be replaced with appropriate cranes.)
&lt;ul&gt;
&lt;li&gt;Skyhooks:
&lt;ul&gt;
&lt;li&gt;Static methods&lt;/li&gt;
&lt;li&gt;Static classes (including singletons)&lt;/li&gt;
&lt;li&gt;Object construction that uses new&lt;/li&gt;
&lt;li&gt;Extension methods&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cranes:
&lt;ul&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;li&gt;Dependency injection&lt;/li&gt;
&lt;li&gt;Inversion of control&lt;/li&gt;
&lt;li&gt;Factories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metrics&lt;/li&gt;
&lt;li&gt;Unit test coverage&lt;/li&gt;
&lt;li&gt;Cyclomatic complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kanban&#34;&gt;Kanban&lt;/h2&gt;
&lt;p&gt;Kanban is a very &lt;strong&gt;simple&lt;/strong&gt; process &lt;strong&gt;with minimal rules&lt;/strong&gt; and a &lt;strong&gt;handful&lt;/strong&gt; of general guidelines.&lt;/p&gt;
&lt;p&gt;看板是一个非常简单的过程，具有最少的规则和一些通用准则。&lt;/p&gt;
&lt;p&gt;看板常被用来指代流程本身。简单的看板可以包含only a high-level process(SIPOC模型？，Supplier Input Process Output Customer)：To Do, Doing, and Done(the states map, 类似个人的timesheet，正因为看板的简单通用小到个人大到集体都可以使用)。当然也可以定义许多的规则严格把控整个软件的流程（Analyze/Implement/Verify/Deliver）&lt;/p&gt;
&lt;p&gt;The popular online work-tracking software : &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;limiting-work-in-progress&#34;&gt;Limiting work in progress&lt;/h3&gt;
&lt;p&gt;用来避免流程中受到需求变更的影响  right-sizing work(Imaportant)&lt;/p&gt;
&lt;h3 id=&#34;event-driven-ceremoniesmeeting&#34;&gt;Event-driven ceremonies(meeting)&lt;/h3&gt;
&lt;p&gt;避免频繁甚至意义不大的会议打断研发的思路&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You would never have been precisely accurate.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;classes-of-servicepriority&#34;&gt;Classes of service(priority)&lt;/h3&gt;
&lt;p&gt;当工作具有不同的风险特征时，使用Classes of service使团队能够确定紧急性或重要性很高的工作，并在必要时将精力集中在那里。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;service level agreements (SLAs) 服务级别协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第95个百分位(95th percentile) 指的是所给数集中超过其95%的数，95th百分点是统计时所采用的最高值，超过的5%的数据将被舍弃。百分位数的意义就在于，我们可以了解到某一个样本在整个样本集合中所处的位置或者某一个样本组的值大概是怎么样分布的。计算百分位数的方法：
&lt;ul&gt;
&lt;li&gt;最近序数方法（The Nearest Rank method）n = ((p / 100) * N) eg.p=95 N=20 n=19 则20个序列中第19个为95th percentile&lt;/li&gt;
&lt;li&gt;在最近序数间线性插值的方法（The Linear Interpolation Between Closest Ranks method）&lt;/li&gt;
&lt;li&gt;权重百分位数方法（The Weighted Percentile method）&lt;/li&gt;
&lt;li&gt;微软excel表格算法（Microsoft Excel method）&lt;/li&gt;
&lt;li&gt;NIST方法（NIST method）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;class WIP limits. 限制使用的典型例子就是重构，并根据工作量大小调整。如果重构的工作量大，则设定高限制（宽松eg.整个限制的75%）；相反则低限制（紧张eg.整个限制的25%）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;People as a class of service 开发人员也可以进行灵活的分配，比如通过看板的SLA和95th percentile得知项目中的前端工作确实很高时，可以重新分配足够的前端研发到项目中加速任务的完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;
&lt;h4 id=&#34;lead-time--cycle-time&#34;&gt;Lead time &amp;amp; Cycle time&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cycle time = Time spent in progress&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lead time = Time spent waiting in backlog + cycle time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lead time measures the time elapsed between order and delivery, thus it measures your production process from your customer’s perspective. Cycle time starts when the actual work begins on the unit and ends when it is ready for delivery.&lt;/p&gt;
&lt;p&gt;In other words, cycle time measures the completion rate and lead time measures the arrival rate.&lt;/p&gt;
&lt;h4 id=&#34;cumulative-flow-diagrams&#34;&gt;Cumulative flow diagrams&lt;/h4&gt;
&lt;p&gt;By graphing the data as a stacked area chart with the number of &lt;strong&gt;work items on the y-axis&lt;/strong&gt; and the &lt;strong&gt;day number on the x-axis&lt;/strong&gt;……&lt;/p&gt;
&lt;p&gt;如何从累积流程图中获取测量整个流程的数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lead time Measuring the x-axis distance between the To Do and Done areas gives the lead time of work items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cycle time Measuring the x-axis distance between the Doing and Done areas gives the cycle time of work items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work in progress Measuring the y-axis distance between the Doing and Done areas gives &lt;strong&gt;the total number of work items that are currently in progress&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unhealthy flows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Too much work in progress: a lack of WIP limits&lt;/li&gt;
&lt;li&gt;Scope creep: 将过量的任务放到TODO，没有考虑是否具有完成这些任务的能力，从而导致lead times(生产周期)变长&lt;/li&gt;
&lt;li&gt;Long phase of delivery: most commonly the Implement phase, when coding occurs. Apply smaller WIP limits to the bottleneck&lt;/li&gt;
&lt;li&gt;Delivery plateau: 交付平稳期&lt;/li&gt;
&lt;li&gt;Regulated deployment phase: 团队限制，比如只有周五才可以发布……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scrum管理变更的方法是对Sprint设置时间并锁定输入，以便在Sprint开始后到达的新工作必须等到下一次迭代后才能确定优先级和计划时间。看板允许随时添加新工作，但仅提供有关完成新工作可能需要多长时间的服务级别协议（SLA）。WIP Limts看板限制进行中的工作，以确保优先于完成工作而不是开始新的工作。&lt;/p&gt;
&lt;p&gt;Scrum is Agile for new teams, while Kanban is Agile for mature teams. 如果工作只是项目的一部分，并且时间和金钱资源有限，那么Scrum是最好的选择，因为每个冲刺都可以单独进行成本估算。如果工作是连续的，没有确定的结束日期，则看板更适合。&lt;/p&gt;
&lt;h2 id=&#34;dependencies-and-layering&#34;&gt;Dependencies and layering&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Framework dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Third-party dependencies&lt;/p&gt;
&lt;p&gt;The main reason to use a third-party dependency is to exchange the effort required for implementing some features or infrastructure for the effort of integrating something that is already written and suitable for the job.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;.net core 可以使用NuGet依赖管理工具&lt;/p&gt;
&lt;p&gt;directed graph(acyclic digraphs/cyclic digraph) 用有向图对依赖结构建模 A-&amp;gt;B 为A依赖B；此方式只能展示出依赖关系，并不能展示出依赖关系的具体分类（集成、聚合、复合、关联）。&lt;/p&gt;
&lt;h3 id=&#34;managing-dependencies&#34;&gt;Managing dependencies&lt;/h3&gt;
&lt;p&gt;patterns: 经验总结后可以重用的模式&lt;/p&gt;
&lt;p&gt;anti-patterns: 实际开发中发先存在许多不仅没多少优点，甚至会引入很多问题的模式&lt;/p&gt;
&lt;p&gt;Code smells: 如果某段代码可能存在问题(some code is potentially problematic)，就可以说有代码味道&lt;/p&gt;
&lt;h4 id=&#34;resolving-dependencies建议朗读并背诵&#34;&gt;Resolving dependencies(建议朗读并背诵)&lt;/h4&gt;
&lt;h5 id=&#34;assemblies&#34;&gt;Assemblies&lt;/h5&gt;
&lt;p&gt;The Common Language Runtime (CLR), which is the virtual machine that the .NET Framework uses to execute code instructions, is a software product like any other and has been programmed to behave in a predictable and logical way when hosting applications.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resolution process&lt;/strong&gt; The assembly resolution process is an important facet of the CLR. This covers the gap between adding a reference to an assembly or project and having the application running with this assembly loaded. The process is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/AssemblyResolutionProcess-20201226102807.jpg&#34; alt=&#34;Assembly resolution process&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The CLR uses a just-in-time (JIT) model to resolve assemblies. As was already proven earlier in the chapter, the references contained in an application are not resolved as you start up the application, but rather when you first make use of a feature of that assembly—literally just in time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each assembly has an identity that is a composite of its name, version, culture, and public key token. Features such as binding redirects can change this identity, so determining it is not quite as simple as it might seem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the assembly’s identity has been established, the CLR is able to determine whether it has already attempted to resolve this dependency previously during the current execution of the application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asking this question causes the CLR to branch depending on the answer. If you have attempted to resolve this assembly, that process has either already succeeded or failed. If it succeeded, the CLR can use the assembly that has already been loaded, and it exits early. If not, the CLR knows that it need not continue attempting to resolve this assembly because it will fail.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alternatively, if this is the first attempt to resolve the assembly, the CLR first checks the global assembly cache (GAC). The GAC is a machine-wide assembly repository that allows multiple versions of the same assembly to be executed in the same application. If the assembly is found in the GAC, the resolution process is successful and the discovered assembly is loaded. So you now know that, because the GAC is searched first, the presence of an applicable assembly in the GAC will take precedence over an assembly on the file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the assembly could not be found in the GAC, the CLR starts probing a variety of directories in search of it. The directories searched depend on the app.config settings. If there is a codeBase element in the app.config, that location is checked and—if the assembly is not foundno other locations are subsequently checked. However, the default is for the application’s root directory to be searched, which is typically the /bin folder that relates to the entry point or web application. If the assembly cannot be found there, the resolution process fails and an exception is thrown by the CLR. Typically, this results in the termination of the application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/tools/fuslogvw-exe-assembly-binding-log-viewer&#34;&gt;The Fusion log(程序集绑定日志)&lt;/a&gt;&lt;/strong&gt;  用来打印CLR加载程序集失败的问题，开启以后，任何托管应用程序的所有尝试（无论成功与否）都会被记录到日志中。&lt;/p&gt;
&lt;p&gt;Not all dependencies require assembly references. One alternative is to deploy the service code as a hosted service. This requires inter-process or inter-network communication, but it minimizes the assembly references required between client and server.&lt;/p&gt;
&lt;h4 id=&#34;services待深入了解&#34;&gt;Services(待深入了解)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;已知端点(编译时就知道服务的位置，直接为客户端创建一个服务代理)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建Proxy的两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Visual Studio为项目添加一个服务引用&lt;/li&gt;
&lt;li&gt;使用.NET Framework的&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.servicemodel.channelfactory-1?view=dotnet-plat-ext-5.0&#34;&gt;Channel Factory&lt;/a&gt;类编码创建服务代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;服务发现(只知道服务的绑定类型或协定，但并不清楚服务的宿主地址)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Managed mode 托管模式
&lt;ul&gt;
&lt;li&gt;客户端请求中心服务&lt;/li&gt;
&lt;li&gt;single point of failure (SPOF)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ad-Hoc mode 临时模式
&lt;ul&gt;
&lt;li&gt;采用组播网路消息(multicast network messages)&lt;/li&gt;
&lt;li&gt;使用UDP协议，每个可发现的服务都会在一个特定的IP地址和端口上等待查询请求(The default implementation of this uses the User Datagram Protocol (UDP), with each discoverable service listening on a specified IP address 1 for queries)， 不可用的服务是不会被发现的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/wcf-discovery&#34;&gt;WCF(Windows Communication Foundation) Discovery&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For an alternative to &lt;em&gt;WCF&lt;/em&gt;, consider gRPC. - - DOTNET 5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;REST(REpresentational State Transfer))ful services&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/january/service-station-an-introduction-to-restful-services-with-wcf&#34;&gt;An Introduction To RESTful Services With WCF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.net core web api 和 grpc 都属于RESTful的服务，更适合跨平台&lt;/p&gt;
&lt;h3 id=&#34;layering&#34;&gt;Layering&lt;/h3&gt;
&lt;p&gt;逻辑层与物理层(Layers vs. tiers)&lt;/p&gt;
&lt;p&gt;两层：用户界面-访问数据&lt;/p&gt;
&lt;p&gt;三层：用户界面-业务逻辑-数据访问(MVC属于用户界面层)&lt;/p&gt;
&lt;h4 id=&#34;cross-cutting-concerns切面&#34;&gt;Cross-cutting concerns(切面)&lt;/h4&gt;
&lt;p&gt;Sometimes a component’s responsibilities are not easily limited to a single layer. Functions such as auditing, security, and caching can permeate through the entire application, because they are applicable at every layer.&lt;/p&gt;
&lt;p&gt;Aspect-oriented programming (AOP)&lt;/p&gt;
&lt;p&gt;比如使用扩展属性更加明显优雅简介的完成可以大量重用操作。&lt;/p&gt;
&lt;h4 id=&#34;asymmetric-layering非对称分层&#34;&gt;Asymmetric layering(非对称分层)&lt;/h4&gt;
&lt;p&gt;Command/Query Separation(CQS): Bertrand Meyer, in his book Object-Oriented Software Construction (Prentice Hall, 1997), used the phrase command/query separation (CQS) to explain that all object methods should be one of only two things: a command or a query.&lt;/p&gt;
&lt;p&gt;Command/Query Responsibility Segregation(CQRS): Commands and queries follow much the same rules as with CQS, but CQRS goes one step further: it acknowledges that commands and queries might need to follow different paths through the layering in order to be best handled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/CQRS-20201227140634.jpg&#34; alt=&#34;Domain models should only be used for handling commands.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Sound management of dependencies很重要&lt;/p&gt;
&lt;h2 id=&#34;interfaces-and-design-patterns&#34;&gt;Interfaces and design patterns&lt;/h2&gt;
&lt;h3 id=&#34;diamond-inheritance-problem&#34;&gt;Diamond inheritance problem&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/Diamond-20201227143025.png&#34; alt=&#34;Diamond inheritance&#34;&gt;&lt;/p&gt;
&lt;p&gt;Because of this ambiguity, the .NET Framework does not allow multiple inheritance of classes.&lt;/p&gt;
&lt;h3 id=&#34;explicit-implementation&#34;&gt;Explicit implementation&lt;/h3&gt;
&lt;h3 id=&#34;polymorphism多态&#34;&gt;Polymorphism(多态)&lt;/h3&gt;
&lt;p&gt;The ability to use an object of one type and have it implicitly act as if it were of a different type is called polymorphism.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/Polymorphism-20201227144730.png&#34; alt=&#34;ploymorphism&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;adaptive-design-patterns&#34;&gt;Adaptive design patterns&lt;/h3&gt;
&lt;h4 id=&#34;the-null-object-pattern&#34;&gt;The Null Object pattern&lt;/h4&gt;
&lt;h4 id=&#34;the-isnull-property-anti-pattern&#34;&gt;The IsNull property anti-pattern&lt;/h4&gt;
&lt;h4 id=&#34;the-adapter-pattern&#34;&gt;The Adapter pattern&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Class Adapter pattern&lt;/li&gt;
&lt;li&gt;The Object Adapter pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-strategy-pattern&#34;&gt;The Strategy pattern&lt;/h4&gt;
&lt;h4 id=&#34;further-versatility&#34;&gt;Further versatility&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Duck-typing&lt;/li&gt;
&lt;li&gt;Mixins&lt;/li&gt;
&lt;li&gt;Fluent interfaces&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;testinghttpsdocsmicrosoftcomen-usvisualstudiotestviewvs-2019&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/test/?view=vs-2019&#34;&gt;Testing&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;unit-testing&#34;&gt;Unit Testing&lt;/h3&gt;
&lt;p&gt;Unit test: Testing a single unit of code, very small atomic test.&lt;/p&gt;
&lt;p&gt;Integration test: Testing multiple units of code integrated together, to go through the different layers and ensure they are using eachother correctly. These should be done after unit tests have verified the individual units work independently. Many people mistakenly refer to these as unit tests.&lt;/p&gt;
&lt;p&gt;Built Verification Test: Testing the built product by deploying it and running tests that will interact with it in the manner a user would. Also mistakenly referred to as unit tests frequently. These are the largest most full featured tests and often just done manually by testing teams rather than being automated.&lt;/p&gt;
&lt;p&gt;Unit testing is the discipline of writing code that tests other code. Every unit test is composed of three distinct parts(AAA):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;arrange&lt;/strong&gt;ment of the preconditions of the test 准备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The performance of the &lt;strong&gt;act&lt;/strong&gt; that is being tested 操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;assert&lt;/strong&gt;ion that the expected behavior occurred 断言&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[TestClass]&lt;/span&gt; 
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;AccountTest&lt;/span&gt; 
{
&lt;span style=&#34;color:#658b00&#34;&gt;    [TestMethod]&lt;/span&gt; 
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; AddingTransactionChangesBalance() {
        &lt;span style=&#34;color:#228b22&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; account = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Account();
        &lt;span style=&#34;color:#228b22&#34;&gt;// Act 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      	account.AddTransaction(&lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;m);
        &lt;span style=&#34;color:#228b22&#34;&gt;// Assert 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      	Assert.AreEqual(&lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;m, account.Balance);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer?view=vs-2019&#34;&gt;Running the tests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSTest is a convenient choice for unit tests—hence its use for the examples in this chapter—but it is not a great choice. NUnit and XUnit are better alternative testing frameworks that rely on external dependencies.&lt;/p&gt;
&lt;h4 id=&#34;test-driven-development&#34;&gt;Test-driven development&lt;/h4&gt;
&lt;p&gt;When you use a TDD approach to writing software, you write the unit tests and the production code in tandem, with a failing test written for every expected behavior exhibited by every method of every class in the production code. The failing test fails only because the production code does not exist yet. The test states—via assertions—that the production code should act in some way, but because it does not yet, the test fails. After the production code is implemented in the simplest way possible to satisfy the test’s requirements, the test will succeed.&lt;/p&gt;
&lt;p&gt;Red, green, refactor:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write a failing test that targets the expected behavior of the SUT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement just enough of the SUT so that the new test passes without breaking existing successful tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If any refactoring can be done on the SUT to improve its design or overall quality, now is the time to do so.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After the transition from red to green for each unit test, you had the opportunity to refactor the implementation of the SUT.&lt;/p&gt;
&lt;p&gt;Addition: &lt;a href=&#34;https://martinfowler.com/articles/is-tdd-dead/&#34;&gt;Is TDD Dead?&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;test-double&#34;&gt;Test double&lt;/h4&gt;
&lt;p&gt;测试替身&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dummies&lt;/strong&gt; This is the simplest of all test doubles. Dummies are intended to fulfil parameter lists and have no special behavior. Often, real implementations are used as dummies and might be primitive types, which are nevertheless required to turn a unit test green.&lt;/p&gt;
&lt;p&gt;被测试方法需要一些参数，但是这些参数实际上并没有用到，它们的存在只是为了满足调用方法的参数要求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spies&lt;/strong&gt; A spy records the calls that have been made to its methods, along with the parameters that were supplied to each call. The record of these calls can then be used in assertions to ensure that certain calls were made.&lt;/p&gt;
&lt;p&gt;确认方法调用记录如何调用，并在断言中可以使用调用结果，断言程序运行的正确性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stubs&lt;/strong&gt; A stub is a dependency that is required by the system under test and that will return a pre-supplied answer whenever queried. Stubs are most useful at the seams of an application, where external dependencies are required. Instead of depending on a database, you can depend on a stub that can return dummy data.&lt;/p&gt;
&lt;p&gt;在测试中为每个调用提供一个封装好的响应，它可以使用很直接的方式模拟依赖项的行为。例如我们可以使用Stub把相关数据放到内存里查询而不是查询真实的数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fakes&lt;/strong&gt; A fake is very similar to a stub, but the intent is subtly different. Fakes are not supplied with any preconceived responses to queries, but are instead closer to real implementations with some necessary concession to avoid an external dependency. Personally, I make a distinction between a manually implemented mock and a mock that is supplied by a mocking framework: manual mocks are called fakes.&lt;/p&gt;
&lt;p&gt;Fake 可以是某个 Data Access Object 或者 Repository 的基于内存的实现；该实现并不会真的去进行数据库操作。这就允许了我们能够在并没有真的启动数据库或者执行耗时的外部请求的情况下进行服务的测试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mocks&lt;/strong&gt; Whereas stubs and fakes provide test doubles for dependencies that are indirect queries, mocks are test doubles for dependencies that have indirect commands. Mocks are useful to determine whether a command was executed on a dependency of the system under test.&lt;/p&gt;
&lt;p&gt;模拟一个具有特性行为的对象，在测试开始前根据期望提供需要的结果。被测试对象往往调用这个对象的方法时，根据条件得到不同的输入，从而满足测试对象的不同场景。例如，mock 数据库的存储层，返回正常数据、空或者丢出异常等情况。当我们并不希望真的调用生产环境下的代码或者在测试中难于验证真实代码执行效果的时候，我们会用 Mock 来替代那些真实的对象。典型的例子即是对邮件发送服务的测试，我们并不希望每次进行测试的时候都发送一封邮件，毕竟我们很难去验证邮件是否真的被发出了或者被接收了。我们更多地关注于邮件服务是否按照我们的预期在合适的业务流中被调用。&lt;/p&gt;
&lt;h4 id=&#34;manual-test-fakery&#34;&gt;Manual test fakery&lt;/h4&gt;
&lt;h4 id=&#34;mocking-frameworks&#34;&gt;Mocking frameworks&lt;/h4&gt;
&lt;p&gt;The most popular: &lt;a href=&#34;https://github.com/Moq/moq4/wiki/Quickstart&#34;&gt;MOQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在一个项目里, 我们经常需要把某一部分程序独立出来以便我们可以对这部分进行测试. 这就要求我们不要考虑项目其余部分的复杂性, 我们只想关注需要被测试的那部分. 这里就需要用到模拟(Mock)技术.&lt;/p&gt;
&lt;p&gt;Mocking is the act of taking a small piece of code that may depend on other things, mocking those other things up so that you can control the circumstances surrounding the piece of code you want to test.&lt;/p&gt;
&lt;p&gt;The purpose of mocking is atomicity in tests. It allows you to test just the individual piece of code you want, without having it&amp;rsquo;s tests affected due to bugs in dependent code pieces. Also mocking gives you the ability to fabricate a variety of scenarios to test the edge cases of each piece of code.&lt;/p&gt;
&lt;p&gt;Mocking is generally purposed for creating boundaries around the target code in unit tests, though it&amp;rsquo;s not uncommon to use it in integration tests too for fabricating a resource that acts as the seed to the integrated code chain you&amp;rsquo;re targeting.&lt;/p&gt;
&lt;p&gt;Moq lets you set the following expectations on a method call:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Call some other lambda expression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return a specific value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Throw a specified type of exception.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that this method was called.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mocks and test over-specification: An over-specified test is fragile, but you can avoid this fragility by changing what you assert. In other words, a test is over-specified when it has knowledge of the SUT’s &lt;em&gt;implementation&lt;/em&gt; rather than its &lt;em&gt;expected behavior&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&#34;testing-all-control-flows&#34;&gt;Testing all control flows&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Happy Path&lt;/em&gt;: the execution path through the code that yields no errors and causes no problems.&lt;/p&gt;
&lt;p&gt;There are a few gaps that need to be addressed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if the account repository is a null reference?&lt;/li&gt;
&lt;li&gt;What if the repository cannot find the account?&lt;/li&gt;
&lt;li&gt;What if the account method throws an exception?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To avoid leaking dependencies between layers, it is good practice to wrap an exception thrown at a lower layer in a new exception for this layer. The exceptions that the domain model throws will be specific to that layer. If the service layer allows this to propagate up to the controller, the controller will need knowledge of the DomainException type to catch and handle these exceptions. This introduces a dependency between the controller and the domain model layer, which should be avoided. Instead, the service will catch the domain model exceptions and wrap them in ServiceException instances before throwing them up to the controller. Due to the controller’s dependency on the service layer, it is able to catch the exceptions that it defines. It is important to acknowledge that the ServiceException contains the DomainException as an inner exception—without this, valuable context about the original exception is lost: the entry point of the application might be able to unwrap this exception in a global exception handler, for example.&lt;/p&gt;
&lt;h4 id=&#34;test-setup&#34;&gt;Test setup&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[TestInitialize]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;writing-tests-first&#34;&gt;Writing tests first&lt;/h3&gt;
&lt;h4 id=&#34;what-is-tdd&#34;&gt;What is TDD?&lt;/h4&gt;
&lt;p&gt;The “&lt;strong&gt;purist&lt;/strong&gt;” idea of TDD is that it is a design tool—that developers should approach the keyboard without forethought of the production code they might implement.&lt;/p&gt;
&lt;p&gt;The “&lt;strong&gt;pragmatic&lt;/strong&gt;” idea of TDD is that developers write the unit tests first.&lt;/p&gt;
&lt;h4 id=&#34;test-driven-design&#34;&gt;Test-driven design&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Write exactly one new test. It should be the smallest test which seems to point in the direction of a solution.&lt;/li&gt;
&lt;li&gt;Run the test to make sure it fails.&lt;/li&gt;
&lt;li&gt;Make the test from (1) pass by writing the least amount of implementation code you can IN THE TEST METHOD.&lt;/li&gt;
&lt;li&gt;Refactor to remove duplication or otherwise as required to improve the design. Be strict about the refactorings. Only introduce new abstractions (methods, classes, etc) when they will help to improve the design of the code. Specifically:
&lt;ol&gt;
&lt;li&gt;ONLY Extract a new method if there is sufficient code duplication in the test methods.&lt;/li&gt;
&lt;li&gt;When extracting a method, initially extract it to the test class (don’t create a new class yet). ONLY create a new class when a clear grouping of methods emerges and when the test class starts to feel crowded or too large.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Repeat the process by writing another test (go back to step 1).&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;test-first-development&#34;&gt;Test-first development&lt;/h4&gt;
&lt;p&gt;TDD = TFD + Refactoring&lt;/p&gt;
&lt;p&gt;TDD是测试驱动，TFD是测试优先，测试优先出现红色就需要重构，这样就靠向了TDD。&lt;/p&gt;
&lt;h3 id=&#34;further-testing&#34;&gt;Further testing&lt;/h3&gt;
&lt;h4 id=&#34;the-testing-pyramid&#34;&gt;The testing pyramid&lt;/h4&gt;
&lt;p&gt;The testing pyramid reminds you of the relative number of tests that you should aim to maintain.&lt;/p&gt;
&lt;h4 id=&#34;the-testing-quadrant&#34;&gt;The testing quadrant&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://lisacrispin.com/wp-content/uploads/2011/11/Agile-Testing-Quadrants.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;The testing quadrant diagram explains that tests can be useful to different stakeholders and for different reasons.&lt;/p&gt;
&lt;h3 id=&#34;testing-for-prevention-and-cure&#34;&gt;Testing for prevention and cure&lt;/h3&gt;
&lt;h4 id=&#34;how-do-you-decrease-mttr&#34;&gt;How do you decrease MTTR?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;li&gt;alerting&lt;/li&gt;
&lt;li&gt;monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://lisacrispin.com/2011/11/08/using-the-agile-testing-quadrants/&#34;&gt;Using the Agile Testing Quadrants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/what-is/elk-stack&#34;&gt;ELK Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;refactoring&#34;&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;Refactoring is the process of incrementally improving the design of existing code.&lt;/p&gt;
&lt;p&gt;This is an important point—refactoring changes the &lt;em&gt;arrangement&lt;/em&gt; of the code, not the &lt;em&gt;outcome&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;changing-existing-code&#34;&gt;Changing existing code&lt;/h3&gt;
&lt;h4 id=&#34;replacing-magic-numbers-with-constants&#34;&gt;Replacing “magic numbers” with constants&lt;/h4&gt;
&lt;p&gt;To the person who wrote the code, their significance might be obvious because that person has prior knowledge of what it all means. In reality, that will probably only be true for a week, perhaps two, before the person’s memory starts to fade and they lose track of what that 5, or that 2, means.&lt;/p&gt;
&lt;h4 id=&#34;replacing-a-conditional-expression-with-polymorphism&#34;&gt;Replacing a conditional expression with polymorphism&lt;/h4&gt;
&lt;p&gt;子类继承父类以替换Switch&lt;/p&gt;
&lt;h4 id=&#34;replacing-a-constructor-with-a-factory-method&#34;&gt;Replacing a constructor with a factory method&lt;/h4&gt;
&lt;h4 id=&#34;replacing-inheritance-with-delegation&#34;&gt;Replacing inheritance with delegation&lt;/h4&gt;
&lt;h4 id=&#34;code-smell-refused-bequest&#34;&gt;Code smell: Refused bequest&lt;/h4&gt;
&lt;p&gt;如果存在一个子类与其他子类不一致，比如不需要实现一个基类中的方法，此时可以有两种方法&lt;/p&gt;
&lt;h3 id=&#34;aggressive-refactoring&#34;&gt;Aggressive refactoring&lt;/h3&gt;
&lt;p&gt;Code is never done. Code can be working, good enough, sufficient, valuable, and producing revenue. But it is rarely, if ever, complete.&lt;/p&gt;
&lt;h4 id=&#34;red-green-refactorredesign&#34;&gt;Red, green, refactor…redesign&lt;/h4&gt;
&lt;h2 id=&#34;dependency-inversionhttpswwwopenhearticucsdependency-injection&#34;&gt;&lt;a href=&#34;https://www.openheart.icu/cs/dependency-injection/&#34;&gt;Dependency inversion&lt;/a&gt;&lt;/h2&gt;
- https://www.openheart.icu/cs/adaptive-code/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Unit Test Practice</title>
        <link>https://www.openheart.icu/cs/unit-test-practice/</link>
        <pubDate>Sat, 21 Nov 2020 22:30:12 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/unit-test-practice/</guid>
        <description>42th openheart https://www.openheart.icu/cs/unit-test-practice/ -&lt;h1 id=&#34;unit-test-practice&#34;&gt;Unit Test Practice&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;纸上得来终觉浅&lt;/strong&gt;，绝知此事要躬行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;shifting-left&#34;&gt;Shifting Left&lt;/h2&gt;
&lt;p&gt;所谓左移，左倾，不是指冒险主义。是将整个流程中右边部分向左边移动，比如测试。 : )&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shift Left is a practice intended to find and prevent defects early in the software delivery process. The idea is to improve quality by moving tasks to the left as early in the lifecycle as possible.&lt;/p&gt;
&lt;p&gt;In the traditional software development model, requirements are kept on the left side of the plan, and the delivery and testing requirements on the right. The problem is that these practices can’t handle changing expectations and requirements, resulting in negative outcomes for the business such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increased costs&lt;/li&gt;
&lt;li&gt;Increased time to market&lt;/li&gt;
&lt;li&gt;Unexpected errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Shift left approach emphasizes the need for developers to concentrate on quality from their earliest stage of a software build, rather than waiting for errors and bugs to be found late in the SDLC(&lt;a href=&#34;https://en.wikipedia.org/wiki/Systems_development_life_cycle&#34;&gt;Systems development life cycle&lt;/a&gt;, &lt;a href=&#34;https://www.tutorialspoint.com/sdlc/sdlc_pdf_version.htm&#34;&gt;SDLC Tutorial&lt;/a&gt;). Shifting left enables product teams perform daily tasks like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Providing feedback&lt;/li&gt;
&lt;li&gt;Reviewing changes and progress&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;人工的过程大都是倒置的，比如制作一个杯子，我们得想象杯子的样子，然后按设计高温烧制，最终的杯子才会在我的右手旁，盛着热美式。这本来就与自然相背而行，类人猿进化到人类，人类继续进化，他们（我们）都不晓得要进化成什么样子的生物，一切未知，但前进却永不止步。软件肯定不是自然产物，所以不能放纵各种“变异”和“遗传”，要把控过程，走的每一步、每一个动作都要向最终产物在靠拢。&lt;/p&gt;
&lt;p&gt;其实所谓左移，将流程后半部前移，真正移动的是什么？还是需求。一切是做出更完善的Demand planning，以减少缺陷，提前规避风险。&lt;/p&gt;
&lt;p&gt;软件的需求并不像生活里比比皆是的目标那么简单。明确今天自己要写几行代码，给哪一个心爱的女孩买个GUCCI……这类目标的确立犹如是探囊取物。而一个明确的软件需求，不止要从客户要求里抽象，还要包括对具体实现的思考与设计，保持一切都符合主流规范并贴合市场发展，这难于上青天。（这也可能是IT相关都需要团队工作的原因）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Scrum we refer to the step’s output as the Definition of Done, the DoD, of a user story or an epic. Writing good DoDs is not trivial and many books and articles are written to cover the topic. A user story (and epic for that matter as well) can also have a Definition of Ready, the DoR, meaning that the story is groomed to the point that it makes sense, and everything is clear enough so the story can be planned. Where the DoD defines the quality requirements of the outcome user story or epic, it is the DoR that defines the user story or epic’s input.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;明确的目标（力所能及），就是对过程最好的掌控。A clear goal (Able To Do) is the best control of the process.&lt;/p&gt;
&lt;h3 id=&#34;shift-left-testinghttpsenwikipediaorgwikishift-left_testing&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Shift-left_testing&#34;&gt;Shift Left Testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;字面意思。 Literally interpretation&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Shift Left testing&lt;/strong&gt; means testing earlier in the software development process.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;iso&#34;&gt;ISO&lt;/h3&gt;
&lt;p&gt;Im my opinion, ISO means a standard, criterion, norm, touchstone&amp;hellip; what we must follow. Like: Veracode will help do a check of our codes, Source Code Scanning with SonarQube.&lt;/p&gt;
&lt;p&gt;BCI should be mentioned here, non-governmental organization may be a joke to me now.&lt;/p&gt;
&lt;h2 id=&#34;bdd&#34;&gt;BDD&lt;/h2&gt;
&lt;p&gt;Behavior Driven Development.&lt;/p&gt;
&lt;p&gt;BDD的过程就是在完善“左移”，将需求（架构）描述的更加清晰。&lt;/p&gt;
&lt;h3 id=&#34;specflowhttpsspecfloworg&#34;&gt;&lt;a href=&#34;https://specflow.org/&#34;&gt;SpecFlow&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Building up the logic to test that a particular behavior is being satisfied can be tedious. One of the tools Doire demonstrated in his presentation was SpecFlow (&lt;a href=&#34;http://specflow.org/&#34;&gt;specflow.org&lt;/a&gt;). &lt;strong&gt;This tool integrates with Visual Studio and enables you to define user stories—called scenarios—using its simple rules.&lt;/strong&gt; It then automates some of the creation and execution of the methods (some with tests and some without). The goal is to validate that the rules of the story are being satisfied.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/38145106/what-is-major-difference-between-integration-testing-and-behavioral-testing-bdd&#34;&gt;What is Major Difference between Integration Testing and Behavioral Testing BDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/july/data-points-behavior-driven-design-with-specflow&#34;&gt;Data Points - Behavior-Driven Design with SpecFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/archive/msdn-magazine/2010/december/msdn-magazine-bdd-primer-behavior-driven-development-with-specflow-and-watin&#34;&gt;BDD Primer - Behavior-Driven Development with SpecFlow and WatiN&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tfd&#34;&gt;TFD&lt;/h2&gt;
&lt;h2 id=&#34;tdd&#34;&gt;TDD&lt;/h2&gt;
&lt;h2 id=&#34;questions&#34;&gt;Questions&lt;/h2&gt;
&lt;h3 id=&#34;unit-test-api&#34;&gt;Unit Test API&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;You should either create Mocks or use Isolation Framework in order to simulate API environment. Unit tests should not depend on resources like internet connections, network, endpoints etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The job of a remote API client is to issue certain calls - no more, no less. Therefore, its test should verify that it issues those calls - no more, no less.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说我们在对各种与API相关的Code做Unit Test时，不需要去测试我们的请求是否能获取正确的结果。非要测试，也只是去测试我们的请求有没有真正的去发送。这也意味着，API相关的Unit Test需要对Code进行做出更准确的分割，保证Coverage然后对分割后与请求无关的Code 进行Unit Test。&lt;/p&gt;
&lt;h3 id=&#34;non-mockable&#34;&gt;Non-Mockable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Internal/Protected/Private 对于此类Classes/Methods，首先肯定要避免在UT会直接需要mock。期次可以考虑Use Fake Method in Unit Test to implement the non-mockable Object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can&amp;rsquo;t Be Mock Type, Like cant be overrided, not interface, not virtual type. 遇到此类可以考虑将此类进行封装，这种情况往往是第三方或者.NET本身限制，存在共性，可以把这些不能mock的Classes/Methods封装成新的Interface保证可以被mock。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reference-1&#34;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3129821/how-to-unit-test-your-api&#34;&gt;How to unit test your API?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/252748/is-it-actually-worth-unit-testing-an-api-client&#34;&gt;Is it actually worth unit-testing an API client?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;refactor&#34;&gt;Refactor&lt;/h2&gt;
&lt;p&gt;如何有效地refactor？&lt;/p&gt;
- https://www.openheart.icu/cs/unit-test-practice/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>处理器中的流水线技术</title>
        <link>https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/</link>
        <pubDate>Sat, 14 Nov 2020 16:55:11 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/</guid>
        <description>42th openheart https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/ -&lt;h1 id=&#34;处理器中的流水线&#34;&gt;处理器中的流水线&lt;/h1&gt;
&lt;p&gt;在现代处理器中，流水线是一个最基本的概念。在了解cpu的时候，很多时候会提及拥有多少级流水线。虽然这个概念并不是在计算机技术中诞生的，但是这个技术却在处理器世界中大放异彩。&lt;/p&gt;
&lt;p&gt;流水线(Pipeline)技术是指程序在执行时候多条指令重叠进行操作的一种准并行处理实现技术。通俗的讲将一个时序过程，分解成若干个子过程，每个过程都能有效的与其他子过程同时执行。这种思想最初是在RISC的架构中出现的，旨在提高处理器处理效率，争取在一个时钟周期中完成一条指令。&lt;/p&gt;
&lt;p&gt;最经典的当属MIPS(无内部互锁的流水线处理器)的五级流水线技术。MIPS体系结构本身就是为了流水线而设计的，cpu在高速缓存中运行，每条指令的执行过程都分成五级。每一级成为一个流水线阶段，每个阶段占用固定的时间，通常是一个时钟周期。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BF1365345053_3598.jpg&#34; alt=&#34;五级流水线&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图是MIPS的五级流水线&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IF(instruction fetch)&lt;/code&gt;：从指令高速缓存中获取下一条指令。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RD(Read register)&lt;/code&gt;：从指定的源寄存器域中指定的cpu寄存器中读取数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ALU(arithmetic/logic  unit)&lt;/code&gt;：算术和逻辑运算操作。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MEM(memory R/W)&lt;/code&gt;：读写数据高速缓存中的内存变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WB(Write back)&lt;/code&gt;：将结果写入寄存器堆中。&lt;/p&gt;
&lt;p&gt;很明显，如果只执行一条指令的话，流水线是不会提高效率的。但是如果要完成多条指令，利用流水线的并行原理，其实是可以提高几倍的处理速度。&lt;/p&gt;
&lt;p&gt;由于流水线技术的高效性，后来所有的处理器都引进了该实现，当然包括x86的处理器，当年奔四号称20级的流水线结构。但是，是不是流水线级数越多越好呢？流水线级数越多，在处理多指令的时候确实也会越高效，但必然以高成本为代价，同时也会出现很多相关的一些副作用。&lt;/p&gt;
&lt;p&gt;流水线的更多详细说明可以参阅更多书籍或者wiki。对于基础书籍推荐一下《&lt;em&gt;大话处理器&lt;/em&gt;》的部分章节。&lt;/p&gt;
&lt;h1 id=&#34;处理器中的冒险&#34;&gt;处理器中的冒险&lt;/h1&gt;
&lt;p&gt;流水线给处理器带来了效率，当然也有问题。称之为流水线冒险(HaZard)。&lt;/p&gt;
&lt;h2 id=&#34;结构冒险&#34;&gt;结构冒险&lt;/h2&gt;
&lt;p&gt;由于处理器资源冲突，而无法实现某些指令或者阶段的组合实现，就称之为处理器有结构冒险。&lt;/p&gt;
&lt;p&gt;比如，早期的处理器中，程序和数据是存储在一起的，那么容易出现下图的情况：在第四个cycle中，IF和MEM同时访问存储器导致有一个操作要等待，此时hazard就出现了。现在的处理器已经解决了该问题：指令存储在L1P cache中，数据存储L1D cache中，单独访问，不会影响相互操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/%E7%BB%93%E6%9E%84%E5%86%92%E9%99%A91365345110_7686.jpg&#34; alt=&#34;结构冒险&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数据冒险&#34;&gt;数据冒险&lt;/h2&gt;
&lt;p&gt;如果流水线中原来有先后顺序的指令同一时刻处理时，可能会导致出现访问了错误的数据的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/%E6%95%B0%E6%8D%AE%E5%86%92%E9%99%A91365345212_2478.jpg&#34; alt=&#34;数据冒险&#34;&gt;&lt;/p&gt;
&lt;p&gt;在汇编语句中，add R1,R2,R3 将寄存器R2和R3的和赋予R1，改变R1的值；而紧接着下面的语句：add R4,R1,R5则会使用R1的值，可是R1必须在第一条语句中的第5个cycle才能更新到寄存器中，语句二是在第4个cycle就要访问R1，也就是说第二,条指令此时在使用错误的R1的值。这是数据hazard出现了。&lt;/p&gt;
&lt;p&gt;很容易就能想到一种方式解决：在两条指令中添加一条空指令：nop。但是会影响处理器的指令的执行效率。在现代处理器技术中，已经用forwarding的方式解决了。如下图，如果处理器在检测到当前指令的源操作数正好在流水线的EX或者MEM阶段，接直接将ex和mem寄存器的值传递给ALU的输入，而不是再从寄存器堆中获取数据了。因为此时寄存器堆中的数据可能是没有被及时更新的。&lt;/p&gt;
&lt;p&gt;当然不仅在EX阶段有这种问题出现，在mem阶段也容易出现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E5%86%92%E9%99%A91365345292_2683.jpg&#34; alt=&#34;解决数据冒险&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;控制冒险&#34;&gt;控制冒险&lt;/h2&gt;
&lt;p&gt;在流水线中的的执行指令时，由于并行处理的关系，后面很多指令其实都在流水线中开始处理了，包括预取值和译码。那么，如果此时程序中出现一条跳转语句怎么办呢？因为程序已经跑到其他地址处执行，流水线中之前已经做好的预取值和译码动作都不能使用了。这些会被处理器的专有部件flush掉，重新开始新的流水线。此时我们可以称之为出现了控制hazard。这种情况对于程序和效率来说是存在很大损失的。&lt;/p&gt;
&lt;p&gt;当然，我们也有解决方案，也就是在jump指令后面(不会被真正使用，但是会进入流水线)添加nop。在MIPS程序中，经常在jump指令后面添加nop语句。&lt;/p&gt;
&lt;p&gt;在X86架构中，是通过硬件来实现flush，将无效的流水线排空，以保证正确运行流水线。这里会涉及到分支预测技术的使用。&lt;/p&gt;
&lt;p&gt;在其他一些处理器中，用软件的方式来处理，添加nop。同时在编译器中通过乱序的思想用有效指令代替nop。这样也可以避免转跳带来的性能损失。&lt;/p&gt;
- https://www.openheart.icu/cs/%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%8A%80%E6%9C%AF/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Idempotent</title>
        <link>https://www.openheart.icu/cs/idempotent/</link>
        <pubDate>Thu, 12 Nov 2020 15:58:21 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/idempotent/</guid>
        <description>42th openheart https://www.openheart.icu/cs/idempotent/ -&lt;h2 id=&#34;什么是幂等&#34;&gt;什么是幂等？&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%B8%E5%AD%B8&#34;&gt;数学&lt;/a&gt;里，&lt;strong&gt;幂等&lt;/strong&gt;有两种主要的定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在某&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E9%81%8B%E7%AE%97&#34;&gt;二元运算&lt;/a&gt;下，&lt;strong&gt;幂等元素&lt;/strong&gt;是指被自己重复运算（或对于&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8&#34;&gt;函数&lt;/a&gt;是为&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%A4%8D%E5%90%88%E5%87%BD%E6%95%B0&#34;&gt;复合&lt;/a&gt;）的结果等于它自己的元素。例如，乘法下唯一两个幂等&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%AF%A6%E6%95%B8&#34;&gt;实数&lt;/a&gt;为0和1。&lt;/li&gt;
&lt;li&gt;某&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%80%E5%85%83%E9%81%8B%E7%AE%97&#34;&gt;一元运算&lt;/a&gt;为&lt;strong&gt;幂等&lt;/strong&gt;的时，其作用在任一元素两次后会和其作用一次的结果相同。例如，&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%AB%98%E6%96%AF%E7%AC%A6%E8%99%9F&#34;&gt;高斯符号&lt;/a&gt;便是幂等的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%80%E5%85%83%E9%81%8B%E7%AE%97&#34;&gt;一元运算&lt;/a&gt;的定义是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E9%81%8B%E7%AE%97&#34;&gt;二元运算&lt;/a&gt;定义的特例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In &lt;a href=&#34;https://en.wikipedia.org/wiki/Computer_science&#34;&gt;computer science&lt;/a&gt;, the term &lt;em&gt;idempotence&lt;/em&gt; may have a different meaning depending on the context in which it is applied:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in &lt;a href=&#34;https://en.wikipedia.org/wiki/Imperative_programming&#34;&gt;imperative programming&lt;/a&gt;(命令编程), a &lt;a href=&#34;https://en.wikipedia.org/wiki/Subroutine&#34;&gt;subroutine&lt;/a&gt;(子程序) with &lt;a href=&#34;https://en.wikipedia.org/wiki/Side_effect_(computer_science)&#34;&gt;side effects&lt;/a&gt; is idempotent if the system state remains the same after one or several calls, in other words if the function from the system state space to itself associated to the subroutine is idempotent in the mathematical sense given in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Idempotence#Definition&#34;&gt;definition&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;in &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_programming&#34;&gt;functional programming&lt;/a&gt;, a &lt;a href=&#34;https://en.wikipedia.org/wiki/Pure_function&#34;&gt;pure function&lt;/a&gt; is idempotent if it is idempotent in the mathematical sense given in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Idempotence#Definition&#34;&gt;definition&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a very useful property in many situations, as it means that an operation can be repeated or retried as often as necessary without causing unintended effects. With non-idempotent operations, the algorithm may have to keep track of whether the operation was already performed or not.&lt;/p&gt;
&lt;p&gt;一个HTTP方法是&lt;strong&gt;幂等&lt;/strong&gt;的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。在正确实现的条件下，&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET&#34;&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/a&gt;，&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD&#34;&gt;&lt;code&gt;HEAD&lt;/code&gt;&lt;/a&gt;，&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT&#34;&gt;&lt;code&gt;PUT&lt;/code&gt;&lt;/a&gt;和&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/DELETE&#34;&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/a&gt; 等方法都是&lt;strong&gt;幂等&lt;/strong&gt;的，而 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST&#34;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/a&gt; 方法不是。所有的 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/safe&#34;&gt;safe&lt;/a&gt; 方法也都是幂等的。&lt;/p&gt;
&lt;p&gt;幂等性只与后端服务器的实际状态有关，而每一次请求接收到的状态码不一定相同。例如，第一次调用&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/DELETE&#34;&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/a&gt; 方法有可能返回 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200&#34;&gt;&lt;code&gt;200&lt;/code&gt;&lt;/a&gt;，但是后续的请求可能会返回&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404&#34;&gt;&lt;code&gt;404&lt;/code&gt;&lt;/a&gt;。&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/DELETE&#34;&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;/a&gt; 的言外之意是，开发者不应该使用&lt;code&gt;DELETE&lt;/code&gt;方法实现具有删除最后条目功能的 RESTful API。&lt;/p&gt;
&lt;p&gt;需要注意的是，服务器不一定会确保请求方法的幂等性，有些应用可能会错误地打破幂等性约束。&lt;/p&gt;
&lt;h2 id=&#34;接口幂等性&#34;&gt;接口幂等性&lt;/h2&gt;
&lt;p&gt;在分布式系统中，一般都会有重试机制。但重复机制又有一定几率出现重复的数据。例如订单系统消费了消息，但是由于网络等问题消息系统未收到反馈是否已成功处理，此时消息系统会根据配置的规则隔断时间就retry一次。但如果此时网络恢复正常，我第一次收到的消息成功处理了，这是又收到一条消息，如果没有防护措施，就有可能出现重复数据。&lt;/p&gt;
&lt;p&gt;幂等性指&lt;strong&gt;任意多次执行所产生的影响均与一次执行的影响相同。多次调用对系统的产生的影响是一样的，即对资源的作用是一样的，但是返回值允许不同。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于业务中需要考虑幂等性的地方一般都是接口的重复请求，重复请求是指同一个请求因为某些原因被多次提交。导致这个情况会有几种场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前端重复提交&lt;/strong&gt;：提交订单，用户快速重复点击多次，造成后端生成多个内容重复的订单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口超时重试&lt;/strong&gt;：对于给第三方调用的接口，为了防止网络抖动或其他原因造成请求丢失，这样的接口一般都会设计成超时重试多次。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息重复消费&lt;/strong&gt;：MQ消息中间件，消息重复消费。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;幂等性实现方式&#34;&gt;幂等性实现方式&lt;/h2&gt;
&lt;h4 id=&#34;查询操作&#34;&gt;查询操作&lt;/h4&gt;
&lt;p&gt;查询一次和查询多次，在数据不变的情况下，查询结果是一样的。select是天然的幂等操作；&lt;/p&gt;
&lt;h4 id=&#34;删除操作&#34;&gt;删除操作&lt;/h4&gt;
&lt;p&gt;删除操作也是幂等的，删除一次和多次删除都是把数据删除。(注意可能返回结果不一样，删除的数据不存在，返回0，删除的数据多条，返回结果多个)&lt;/p&gt;
&lt;h4 id=&#34;唯一索引&#34;&gt;唯一索引&lt;/h4&gt;
&lt;p&gt;这个机制是&lt;strong&gt;利用了数据库的主键唯一约束的特性&lt;/strong&gt;，解决了在&lt;strong&gt;insert场景&lt;/strong&gt;时幂等问题。但主键的要求不是自增的主键，这样就需要业务&lt;strong&gt;生成全局唯一&lt;/strong&gt;的主键，之前老顾的文章也介绍过&lt;strong&gt;分布式唯一主键ID&lt;/strong&gt;的生成，可自行查阅。如果是&lt;strong&gt;分库分表场景下&lt;/strong&gt;，&lt;strong&gt;路由规则要保证相同请求下&lt;/strong&gt;，&lt;strong&gt;落地在同一个数据库和同一表中&lt;/strong&gt;，要不然&lt;strong&gt;数据库主键约束就不起效果&lt;/strong&gt;了，因为是不同的数据库和表主键不相关。因为对主键有一定的要求，这个方案就跟业务有点耦合了，&lt;strong&gt;无法用自增主键了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;防止新增脏数据。比如：支付宝的资金账户，支付宝也有用户账户，每个用户只能有一个资金账户，怎么防止给用户创建资金账户多个，那么给资金账户表中的用户ID加唯一索引，所以一个用户新增成功一个资金账户记录。要点：唯一索引或唯一组合索引来防止新增数据存在脏数据。&lt;/p&gt;
&lt;h4 id=&#34;去重表机制&#34;&gt;去重表机制&lt;/h4&gt;
&lt;p&gt;往去重表里插入数据的时候，利用数据库的唯一索引特性，保证唯一的逻辑。唯一序列号可以是一个字段，也可以是多字段的唯一性组合。&lt;/p&gt;
&lt;p&gt;这里要注意的是，&lt;strong&gt;去重表和业务表应该在同一库中&lt;/strong&gt;，这样就保证了在同一个事务，即使业务操作失败了，也会把去重表的数据回滚。&lt;strong&gt;这个很好的保证了数据一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外，使用数据库防重表的方式它有个严重的缺点，那就是系统容错性不高，如果幂等表所在的数据库连接异常或所在的服务器异常，则会导致整个系统幂等性校验出问题。&lt;/p&gt;
&lt;h4 id=&#34;token机制&#34;&gt;Token机制&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://www.openheart.icu/image/Token-20201112171801.jpeg&#34; alt=&#34;Token&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务端提供了发送token的接口，我们在分析业务的时候，哪些是存在幂等问题的，就必须在执行业务前，前去获取token，服务器会把token保存到redis中；&lt;/li&gt;
&lt;li&gt;然后调用业务接口请求时，把token携带过去，一般反正请求头部；&lt;/li&gt;
&lt;li&gt;服务器判断token是否存在redis中，存在表示第一次请求，可以继续执行业务，业务完成后，&lt;strong&gt;需要把redis中的token删掉&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;如果判断token不存在redis中，就表示是重复操作，直接返回重复标记给client，这样就保证了业务代码，不被重复执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;服务器端第一次验证相同过后，会将session中的Token值更新下，若用户重复提交，第二次的验证判断将失败，因为用户提交的表单中的Token没变，但服务器端session中Token已经改变了。&lt;/p&gt;
&lt;p&gt;这就是token+redis的幂等方案。适用于绝大部分场景。主要针对前端重复连续多次点击的情况，网上也有另一个版本的Token方案，不同的地方是：&lt;strong&gt;网上方案检验token存在后，就立刻删除token，再进行业务处理&lt;/strong&gt;。而上面的方式是检验token存在后，先进行业务处理，再删除token。&lt;/p&gt;
&lt;p&gt;网上方案的缺点是&lt;strong&gt;先删除token&lt;/strong&gt;，这是出现系统问题导致&lt;strong&gt;业务处理出现异常&lt;/strong&gt;，业务处理没有成功，接口调用方也没有获取到明确的结果，然后&lt;strong&gt;进行重试，但token已经删除掉了&lt;/strong&gt;，服务端判断token不存在，&lt;strong&gt;认为是重复请求，就直接返回了&lt;/strong&gt;，无法进行业务处理了。&lt;/p&gt;
&lt;p&gt;而上面的方案&lt;strong&gt;后删除token&lt;/strong&gt;也是会存在问题的，如果进行业务处理成功后，删除redis中的token失败了，这样就导致了有可能会发生重复请求，因为token没有被删除。&lt;/p&gt;
&lt;h4 id=&#34;乐观锁机制&#34;&gt;乐观锁机制&lt;/h4&gt;
&lt;p&gt;乐观锁只是在更新数据那一刻锁表，其他时间不锁表，所以相对于悲观锁，效率更高。乐观锁的实现方式多种多样可以通过version或者其他状态条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过版本号实现update table_xxx set name=#name#,version=version+1 where version=#version#；&lt;/li&gt;
&lt;li&gt;通过条件限制 update table_xxx set avai_amount=avai_amount-#subAmount# where avai_amount-#subAmount# &amp;gt;= 0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;加上了版本号后，就让此计算赋值型业务，具备了幂等性。&lt;/p&gt;
&lt;p&gt;要求：quality-#subQuality# &amp;gt;= ，这个情景适合不用版本号，只更新是做数据安全校验，适合库存模型，扣份额和回滚份额，性能更高。&lt;/p&gt;
&lt;p&gt;乐观锁缺点：在操作业务前，需要先查询出当前的version版本。&lt;/p&gt;
&lt;h4 id=&#34;分布式锁&#34;&gt;分布式锁&lt;/h4&gt;
&lt;p&gt;如果是分布是系统，构建全局唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统(redis或zookeeper)，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。要点：某个长流程处理过程要求不能并发执行，可以在流程执行之前根据某个标志(用户ID+后缀等)获取分布式锁，其他流程执行时获取锁就会失败，也就是同一时间该流程只能有一个能执行成功，执行完成后，释放分布式锁(分布式锁要第三方系统提供)。&lt;/p&gt;
&lt;h4 id=&#34;状态机&#34;&gt;状态机&lt;/h4&gt;
&lt;p&gt;对于很多业务有一个业务流转状态的，每个状态都有前置状态和后置状态，以及最后的结束状态。例如流程的待审批，审批中，驳回，重新发起，审批通过，审批拒绝。订单的待提交，待支付，已支付，取消。&lt;/p&gt;
&lt;p&gt;在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。注意：订单等单据类业务，存在很长的状态流转，一定要深刻理解状态机，对业务系统设计能力提高有很大帮助。&lt;/p&gt;
&lt;h4 id=&#34;select--insert&#34;&gt;select + insert&lt;/h4&gt;
&lt;p&gt;并发不高的后台系统，或者一些任务JOB，为了支持幂等，支持重复执行，简单的处理方法是，先查询下一些关键数据，判断是否已经执行过，再进行业务处理，就可以了。注意：核心高并发流程不要用这种方法。&lt;/p&gt;
&lt;h4 id=&#34;对外提供接口的api如何保证幂等&#34;&gt;对外提供接口的api如何保证幂等&lt;/h4&gt;
&lt;p&gt;如银联提供的付款接口：需要接入商户提交付款请求时附带：source来源，seq序列号；source+seq在数据库里面做唯一索引，防止多次付款(并发时，只能处理一个请求) 。
重点：对外提供接口为了支持幂等调用，接口有两个字段必须传，一个是来源source，一个是来源方序列号seq，这个两个字段在提供方系统里面做联合唯一索引，这样当第三方调用时，先在本方系统里面查询一下，是否已经处理过，返回相应处理结果；没有处理过，进行相应处理，返回结果。注意，为了幂等友好，一定要先查询一下，是否处理过该笔业务，不查询直接插入业务系统，会报错，但实际已经处理了。&lt;/p&gt;
- https://www.openheart.icu/cs/idempotent/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
  </channel>
</rss> 