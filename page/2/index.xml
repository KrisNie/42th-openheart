<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>42th openheart</title>
    <link>https://www.openheart.icu/</link>
    <description>Recent content on 42th openheart</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>ALL RIGHTS RESERVED KRIS NIE</copyright>
    <lastBuildDate>Wed, 01 Dec 2021 14:28:00 +0000</lastBuildDate>
    
        <atom:link href="https://www.openheart.icu/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Working Effectively with Legacy Code</title>
        <link>https://www.openheart.icu/cs/working-effectively-with-legacy-code/</link>
        <pubDate>Thu, 12 Aug 2021 15:15:57 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/working-effectively-with-legacy-code/</guid>
        <description>42th openheart https://www.openheart.icu/cs/working-effectively-with-legacy-code/ -&lt;h1 id=&#34;the-mechanics-of-change&#34;&gt;The Mechanics of Change&lt;/h1&gt;
&lt;h2 id=&#34;changing-software&#34;&gt;Changing Software&lt;/h2&gt;
&lt;h3 id=&#34;four-reasons-to-change-software&#34;&gt;Four Reasons to Change Software&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Adding a feature&lt;/li&gt;
&lt;li&gt;Fixing a bug&lt;/li&gt;
&lt;li&gt;Improving the design&lt;/li&gt;
&lt;li&gt;Optimizing resource usage&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;changing-software-1&#34;&gt;Changing Software&lt;/h1&gt;
&lt;h1 id=&#34;dependency-breaking-techniques&#34;&gt;Dependency-Breaking Techniques&lt;/h1&gt;
- https://www.openheart.icu/cs/working-effectively-with-legacy-code/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Design Patterns</title>
        <link>https://www.openheart.icu/cs/design-patterns/</link>
        <pubDate>Mon, 02 Aug 2021 15:57:23 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/design-patterns/</guid>
        <description>42th openheart https://www.openheart.icu/cs/design-patterns/ -&lt;h1 id=&#34;overengineeringhttpsenwikipediaorgwikioverengineering&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Overengineering&#34;&gt;Overengineering&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;keep it simple, stupid&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;structural-design-patterns&#34;&gt;Structural Design Patterns&lt;/h1&gt;
&lt;h1 id=&#34;creational-design-patterns&#34;&gt;Creational Design Patterns&lt;/h1&gt;
&lt;h2 id=&#34;singleton&#34;&gt;Singleton&lt;/h2&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://csharpindepth.com/articles/Singleton&#34;&gt;https://csharpindepth.com/articles/Singleton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/leolion/p/10241822.html&#34;&gt;https://www.cnblogs.com/leolion/p/10241822.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;behavioral-design-patterns&#34;&gt;Behavioral Design Patterns&lt;/h1&gt;
&lt;h2 id=&#34;observer&#34;&gt;Observer&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/e/e2/Observer-pattern-class-diagram.png&#34; alt=&#34;File:Observer-pattern-class-diagram.png&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The observer design pattern is suitable for distributed push-based notifications, because it supports a clean separation between two different components or application layers, such as a data source (business logic) layer and a user interface (display) layer. The pattern can be implemented whenever a provider uses callbacks to supply its clients with current information.&lt;/p&gt;
&lt;p&gt;Implementing the pattern requires that you provide the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A provider or subject, which is the object that sends notifications to observers. A provider is a class or structure that implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; interface. The provider must implement a single method, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1.subscribe&#34;&gt;IObservable.Subscribe&lt;/a&gt;, which is called by observers that wish to receive notifications from the provider.&lt;/li&gt;
&lt;li&gt;An observer, which is an object that receives notifications from a provider. An observer is a class or structure that implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; interface. The observer must implement three methods, all of which are called by the provider:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.onnext&#34;&gt;IObserver.OnNext&lt;/a&gt;, which supplies the observer with new or current information.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.onerror&#34;&gt;IObserver.OnError&lt;/a&gt;, which informs the observer that an error has occurred.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.oncompleted&#34;&gt;IObserver.OnCompleted&lt;/a&gt;, which indicates that the provider has finished sending notifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A mechanism that allows the provider to keep track of observers. Typically, the provider uses a container object, such as a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1&#34;&gt;System.Collections.Generic.List&lt;/a&gt; object, to hold references to the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; implementations that have subscribed to notifications. Using a storage container for this purpose enables the provider to handle zero to an unlimited number of observers. The order in which observers receive notifications is not defined; the provider is free to use any method to determine the order.&lt;/li&gt;
&lt;li&gt;An &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable&#34;&gt;IDisposable&lt;/a&gt; implementation that enables the provider to remove observers when notification is complete. Observers receive a reference to the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable&#34;&gt;IDisposable&lt;/a&gt; implementation from the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1.subscribe&#34;&gt;Subscribe&lt;/a&gt; method, so they can also call the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable.dispose&#34;&gt;IDisposable.Dispose&lt;/a&gt; method to unsubscribe before the provider has finished sending notifications.&lt;/li&gt;
&lt;li&gt;An object that contains the data that the provider sends to its observers. The type of this object corresponds to the generic type parameter of the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; interfaces. Although this object can be the same as the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; implementation, most commonly it is a separate type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Implementing the pattern requires that you provide the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A provider or subject, which is the object that sends notifications to observers. A provider is a class or structure that implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; interface. The provider must implement a single method, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1.subscribe&#34;&gt;IObservable.Subscribe&lt;/a&gt;, which is called by observers that wish to receive notifications from the provider.&lt;/li&gt;
&lt;li&gt;An observer, which is an object that receives notifications from a provider. An observer is a class or structure that implements the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; interface. The observer must implement three methods, all of which are called by the provider:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.onnext&#34;&gt;IObserver.OnNext&lt;/a&gt;, which supplies the observer with new or current information.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.onerror&#34;&gt;IObserver.OnError&lt;/a&gt;, which informs the observer that an error has occurred.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1.oncompleted&#34;&gt;IObserver.OnCompleted&lt;/a&gt;, which indicates that the provider has finished sending notifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A mechanism(&lt;em&gt;方法&lt;/em&gt;) that allows the provider to keep track of observers. Typically, the provider uses a container object, such as a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1&#34;&gt;System.Collections.Generic.List&lt;/a&gt; object, to hold references to the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; implementations that have subscribed to notifications. Using a storage container for this purpose enables the provider to handle zero to an unlimited number of observers. The order in which observers receive notifications is not defined; the provider is free to use any method to determine the order.&lt;/li&gt;
&lt;li&gt;An &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable&#34;&gt;IDisposable&lt;/a&gt; implementation that enables the provider to remove observers when notification is complete. Observers receive a reference to the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable&#34;&gt;IDisposable&lt;/a&gt; implementation from the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1.subscribe&#34;&gt;Subscribe&lt;/a&gt; method, so they can also call the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.idisposable.dispose&#34;&gt;IDisposable.Dispose&lt;/a&gt; method to unsubscribe before the provider has finished sending notifications.&lt;/li&gt;
&lt;li&gt;An object that contains the data that the provider sends to its observers. The type of this object corresponds to the generic type parameter of the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobserver-1&#34;&gt;IObserver&lt;/a&gt; interfaces. Although this object can be the same as the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1&#34;&gt;IObservable&lt;/a&gt; implementation, most commonly it is a separate type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;reference-1&#34;&gt;Reference:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.runoob.com/design-pattern/observer-pattern.html&#34;&gt;观察者模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://refactoring.guru/design-patterns/observer&#34;&gt;Observer - guru&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34;&gt;Observer pattern - Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/events/observer-design-pattern&#34;&gt;Observer Design Pattern - MSDN&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
- https://www.openheart.icu/cs/design-patterns/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Behavior-driven development</title>
        <link>https://www.openheart.icu/cs/behavior-driven-development/</link>
        <pubDate>Sat, 24 Jul 2021 00:00:50 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/behavior-driven-development/</guid>
        <description>42th openheart https://www.openheart.icu/cs/behavior-driven-development/ -- https://www.openheart.icu/cs/behavior-driven-development/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Economics &amp; Finance &amp; Management</title>
        <link>https://www.openheart.icu/finance/economicsfinancemanagement/</link>
        <pubDate>Tue, 25 May 2021 23:29:58 +0000</pubDate>
        
        <guid>https://www.openheart.icu/finance/economicsfinancemanagement/</guid>
        <description>42th openheart https://www.openheart.icu/finance/economicsfinancemanagement/ -&lt;h1 id=&#34;如何区分并界定经济学金融学与管理学&#34;&gt;如何区分并界定经济学、金融学与管理学？&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这24份期刊涵盖了6大领域：会计(Accounting)、金融(Finance)、IS(Information System)、营销(Marketing)、运营(Operation)和管理(Management)，除了Management Science是一份集合刊物，其他各份刊物都能对号入座&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/v2-c15b2a92974141515f1198c23e784b04_r.jpg?source=1940ef5c&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;economics&#34;&gt;Economics&lt;/h2&gt;
&lt;p&gt;经济学是针对人类经济活动、经济关系以及经济规律的社会科学，所谓经济活动，是指将有限或者稀缺资源进行合理配置的行为。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;微观经济&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;宏观经济&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;finance&#34;&gt;Finance&lt;/h2&gt;
&lt;p&gt;金融学是将“货币资金”视作这个“有限或者稀缺资源”来进行深入研究，是经济学在货币领域的深化和细化。通俗讲，是研究怎么赚钱，通过什么方式赚钱的学科，研究个人、组织和公司等在一段时间内如何有效地筹集，分配和利用资金，是研究资金融通的学科。金融的具体内容有货币、证券、银行、保险、资本市场、衍生证券、投资理财等等。&lt;/p&gt;
&lt;h2 id=&#34;management&#34;&gt;Management&lt;/h2&gt;
&lt;p&gt;财务会计属于管理学。&lt;/p&gt;
&lt;p&gt;The Logics of Management 管理逻辑学&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/26976012&#34;&gt;商学、经济学、金融学与管理学有哪些相似与不同之处，如何具体区分？&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://www.openheart.icu/finance/economicsfinancemanagement/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Effective CSharp</title>
        <link>https://www.openheart.icu/dotnet/effective-csharp6.0/</link>
        <pubDate>Sat, 09 Jan 2021 16:22:42 +0000</pubDate>
        
        <guid>https://www.openheart.icu/dotnet/effective-csharp6.0/</guid>
        <description>42th openheart https://www.openheart.icu/dotnet/effective-csharp6.0/ -&lt;h1 id=&#34;effective-c&#34;&gt;Effective C#&lt;/h1&gt;
&lt;p&gt;Effective C# does not take you on a historical journey through the changes in the language. Rather, I provide advice on how to use the current C# language.&lt;/p&gt;
&lt;h2 id=&#34;c--language-idioms&#34;&gt;C # Language Idioms&lt;/h2&gt;
&lt;p&gt;You change tools or languages because you can be more productive.&lt;/p&gt;
&lt;h3 id=&#34;item-1-prefer-implicitly-typed-local-variableshttpsdocsmicrosoftcomen-usdotnetcsharpprogramming-guideclasses-and-structsimplicitly-typed-local-variables&#34;&gt;Item 1: &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/implicitly-typed-local-variables&#34;&gt;Prefer Implicitly Typed Local Variables&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword may be used in the following contexts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On local variables (variables declared at method scope).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// i is compiled as an int
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// s is compiled as a string
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; s = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// a is compiled as int[]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; a = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;[] { &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt; };
  
&lt;span style=&#34;color:#228b22&#34;&gt;// expr is compiled as IEnumerable&amp;lt;Customer&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// or perhaps IQueryable&amp;lt;Customer&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; expr =
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; c &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; customers
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; c.City == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;London&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; c;
  
&lt;span style=&#34;color:#228b22&#34;&gt;// anon is compiled as an anonymous type
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; anon = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; { Name = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Terry&amp;#34;&lt;/span&gt;, Age = &lt;span style=&#34;color:#b452cd&#34;&gt;34&lt;/span&gt; };
  
&lt;span style=&#34;color:#228b22&#34;&gt;// list is compiled as List&amp;lt;int&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; list = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/for&#34;&gt;for&lt;/a&gt; initialization statement.&lt;/p&gt;
&lt;p&gt;C#Copy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; x = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;; x &amp;lt; &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;; x++)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/foreach-in&#34;&gt;foreach&lt;/a&gt; initialization statement.&lt;/p&gt;
&lt;p&gt;C#Copy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; list) {...}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement&#34;&gt;using&lt;/a&gt; statement.&lt;/p&gt;
&lt;p&gt;C#Copy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; file = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StreamReader(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;C:\\myfile.txt&amp;#34;&lt;/span&gt;)) {...}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression&#34;&gt;use implicitly typed local variables and arrays in a query expression.&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C#&#34; data-lang=&#34;C#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; QueryNames(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; firstLetter)
{
    &lt;span style=&#34;color:#228b22&#34;&gt;// Create the query. Use of var is required because
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// the query produces a sequence of anonymous types:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// System.Collections.Generic.IEnumerable&amp;lt;????&amp;gt;.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; studentQuery =
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; student &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; students
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; student.FirstName[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] == firstLetter
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; { student.FirstName, student.LastName };
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// Execute the query and display the results.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; anonType &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; studentQuery)
    {
        Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;First = {0}, Last = {1}&amp;#34;&lt;/span&gt;, anonType.FirstName, anonType.LastName);
    }
      
    &lt;span style=&#34;color:#228b22&#34;&gt;// Variable queryId could be declared by using
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// System.Collections.Generic.IEnumerable&amp;lt;string&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// instead of var.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; queryId =
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;from&lt;/span&gt; student &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; students
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;where&lt;/span&gt; student.Id &amp;gt; &lt;span style=&#34;color:#b452cd&#34;&gt;111&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;select&lt;/span&gt; student.LastName;
  
    &lt;span style=&#34;color:#228b22&#34;&gt;// Variable str could be declared by using var instead of string.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; str &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;in&lt;/span&gt; queryId)
    {
        Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Last name: {0}&amp;#34;&lt;/span&gt;, str);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using var also improves a developer’s comprehension of the code. With var, you are not telling the compiler which type you’re creating; the compiler declares the type for you. The compiler examines the compile-time type and infers the type of the local variable based on those declarations.&lt;/p&gt;
&lt;p&gt;At other times, however, overusing var only decreases the readability of your code.&lt;/p&gt;
&lt;p&gt;I recommend explicitly declaring all numeric types (int, float, double, and others) rather than using a var declaration.&lt;/p&gt;
&lt;h3 id=&#34;item-2-prefer-readonly-to-const&#34;&gt;Item 2: Prefer &lt;code&gt;readonly&lt;/code&gt; to &lt;code&gt;const&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly&#34;&gt;&lt;code&gt;readonly&lt;/code&gt;: runtime constants.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/const&#34;&gt;&lt;code&gt;const&lt;/code&gt;: compile-time constants, slightly faster but far less flexible&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/readonly&#34;&gt;readonly&lt;/a&gt; keyword differs from the &lt;code&gt;const&lt;/code&gt; keyword. A &lt;code&gt;const&lt;/code&gt; field can only be initialized at the declaration of the field. A &lt;code&gt;readonly&lt;/code&gt; field can be initialized either at the declaration or in a constructor. Therefore, &lt;code&gt;readonly&lt;/code&gt; fields can have different values depending on the constructor used. Also, although a &lt;code&gt;const&lt;/code&gt; field is a compile-time constant, the &lt;code&gt;readonly&lt;/code&gt; field can be used for run-time constants, as in this line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint&lt;/span&gt; l1 = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;uint&lt;/span&gt;)DateTime.Now.Ticks;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;const&lt;/code&gt; must be used when the value must be available at compile time: attribute parameters, &lt;code&gt;switch case&lt;/code&gt; labels, and &lt;code&gt;enum&lt;/code&gt; definitions, and those rare times when you mean to define a value that does not change from release to release. For everything else, prefer the increased flexibility of &lt;code&gt;readonly&lt;/code&gt; constants.&lt;/p&gt;
&lt;h3 id=&#34;item-3-prefer-the-is-or-as-operators-to-casts&#34;&gt;Item 3: Prefer the &lt;code&gt;is&lt;/code&gt; or &lt;code&gt;as&lt;/code&gt; Operators to Casts&lt;/h3&gt;
&lt;p&gt;You can use the following operators and expressions to perform type checking or type conversion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#is-operator&#34;&gt;is operator&lt;/a&gt;: to check if the runtime type of an expression is compatible with a given type&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#as-operator&#34;&gt;as operator&lt;/a&gt;: to explicitly convert an expression to a given type if its runtime type is compatible with that type&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#cast-expression&#34;&gt;cast expression&lt;/a&gt;: to perform an explicit conversion&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#typeof-operator&#34;&gt;typeof operator&lt;/a&gt;: to obtain the &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.type&#34;&gt;System.Type&lt;/a&gt; instance for a type&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ishttpsdocsmicrosoftcomen-usdotnetcsharplanguage-referencekeywordsis&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/is&#34;&gt;&lt;code&gt;is&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The following example demonstrates that the &lt;code&gt;is&lt;/code&gt; operator returns &lt;code&gt;true&lt;/code&gt; if the runtime type of an expression result derives from a given type, that is, there exists a reference conversion between types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Base&lt;/span&gt; { }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Derived&lt;/span&gt; : Base { }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;IsOperatorExample&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; b = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Base();
        Console.WriteLine(b &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Base);  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Console.WriteLine(b &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Derived);  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: False
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; d = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Derived();
        Console.WriteLine(d &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Base);  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Console.WriteLine(d &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Derived); 
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The next example shows that the &lt;code&gt;is&lt;/code&gt; operator takes into account boxing and unboxing conversions but doesn&amp;rsquo;t consider &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/numeric-conversions&#34;&gt;numeric conversions&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;27&lt;/span&gt;;
Console.WriteLine(i &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; System.IFormattable);  
&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; iBoxed = i;
Console.WriteLine(iBoxed &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;);  
&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Console.WriteLine(iBoxed &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt;);  
&lt;span style=&#34;color:#228b22&#34;&gt;// output: False
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following example demonstrates the usage of the &lt;code&gt;is&lt;/code&gt; operator with the type pattern(Beginning with &lt;strong&gt;C# 7.0&lt;/strong&gt;, the &lt;code&gt;is&lt;/code&gt; operator also tests an expression result against a pattern. Or Called: Type testing with &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching&#34;&gt;pattern matching&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#b452cd&#34;&gt;23&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; iBoxed = i;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int?&lt;/span&gt; jNullable = &lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;;
&lt;span style=&#34;color:#228b22&#34;&gt;//e.g. If the result of iBoxed is non-null and can be converted to int by a reference, boxing(or unboxing conversion), the iBoxed is int a expression returns true and the converted value of the result of iBoxed is assigned to variable a.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (iBoxed &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a &amp;amp;&amp;amp; jNullable &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; b)
{
    Console.WriteLine(a + b);
  	&lt;span style=&#34;color:#228b22&#34;&gt;// output 30
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;as&#34;&gt;&lt;code&gt;as&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Notice that the cast version must check &lt;code&gt;null&lt;/code&gt; in addition to catching exceptions. &lt;code&gt;null&lt;/code&gt; can be converted to any reference type using a cast, but the as operator returns &lt;code&gt;null&lt;/code&gt; when used on a &lt;code&gt;null&lt;/code&gt; reference. The &lt;code&gt;as&lt;/code&gt; operator explicitly converts the result of an expression to a given reference or nullable value type. If the conversion is not possible, the &lt;code&gt;as&lt;/code&gt; operator returns &lt;code&gt;null&lt;/code&gt;. Unlike a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/type-testing-and-cast#cast-expression&#34;&gt;cast expression&lt;/a&gt;, the &lt;code&gt;as&lt;/code&gt; operator never throws an exception.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;IEnumerable&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt; numbers = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;[] { &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt; };
IList&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt; indexable = numbers &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; IList&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt;;
&lt;span style=&#34;color:#228b22&#34;&gt;// numbers is IList&amp;lt;int&amp;gt; ? (IList&amp;lt;int&amp;gt;)(numbers) : (IList&amp;lt;int&amp;gt;)null
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (indexable != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;)
{
    Console.WriteLine(indexable[&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;] + indexable[indexable.Count - &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]);  
  	&lt;span style=&#34;color:#228b22&#34;&gt;// output: 40
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following program fragment won’t compile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; o = Factory.GetValue(); 
&lt;span style=&#34;color:#228b22&#34;&gt;// int i = o as int; 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Does not compile.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; i = o &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int?&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) 
  Console.WriteLine(i.Value);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;cast-expression&#34;&gt;Cast expression&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; x = &lt;span style=&#34;color:#b452cd&#34;&gt;1234.7&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)x;
Console.WriteLine(a);   
&lt;span style=&#34;color:#228b22&#34;&gt;// output: 1234
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
IEnumerable&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt; numbers = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] { &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt; };
IList&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt; list = (IList&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt;)numbers;
Console.WriteLine(list.Count);  
&lt;span style=&#34;color:#228b22&#34;&gt;// output: 3
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Console.WriteLine(list[&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]);  
&lt;span style=&#34;color:#228b22&#34;&gt;// output: 20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;typeof-operator&#34;&gt;Typeof operator&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; PrintType&amp;lt;T&amp;gt;() =&amp;gt; Console.WriteLine(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(T));

Console.WriteLine(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(List&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;&amp;gt;));
PrintType&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt;();
PrintType&amp;lt;System.Int32&amp;gt;();
PrintType&amp;lt;Dictionary&amp;lt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;&amp;gt;&amp;gt;();
&lt;span style=&#34;color:#228b22&#34;&gt;// Output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// System.Collections.Generic.List`1[System.String]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// System.Int32
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// System.Int32
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// System.Collections.Generic.Dictionary`2[System.Int32,System.Char]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
Console.WriteLine(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(Dictionary&amp;lt;,&amp;gt;));
&lt;span style=&#34;color:#228b22&#34;&gt;// Output:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// System.Collections.Generic.Dictionary`2[TKey,TValue]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Type testing with the &lt;code&gt;typeof&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Animal&lt;/span&gt; { }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Giraffe&lt;/span&gt; : Animal { }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;TypeOfExample&lt;/span&gt;
{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; Main()
    {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt; b = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Giraffe();
        Console.WriteLine(b &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Animal);  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Console.WriteLine(b.GetType() == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(Animal));  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: False
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
        Console.WriteLine(b &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;is&lt;/span&gt; Giraffe);  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Console.WriteLine(b.GetType() == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;typeof&lt;/span&gt;(Giraffe));  
      	&lt;span style=&#34;color:#228b22&#34;&gt;// output: True
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;item-4-replace-stringformat-with-interpolated-strings&#34;&gt;Item 4: Replace &lt;code&gt;string.Format()&lt;/code&gt; with Interpolated Strings&lt;/h3&gt;
&lt;p&gt;Using &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated&#34;&gt;string interpolation&lt;/a&gt; greatly improves readability. It’s easy to read the replacement expressions in place in the format strings. The result is easy verification. The expressions are inline in the format string instead of in a separate array, you can’t have the wrong number of arguments in the replacement array. You can’t easily put the wrong expression in the wrong spot in the string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; name = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Mark&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; date = DateTime.Now;

&lt;span style=&#34;color:#228b22&#34;&gt;// Composite formatting:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt; name = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Fred&amp;#34;&lt;/span&gt;;
String.Format(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Name = {0}, hours = {1:hh}&amp;#34;&lt;/span&gt;, name, DateTime.Now);
Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello, {0}! Today is {1}, it&amp;#39;s {2:HH:mm} now.&amp;#34;&lt;/span&gt;, name, date.DayOfWeek, date);
&lt;span style=&#34;color:#228b22&#34;&gt;// String interpolation:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;Hello, {name}! Today is {date.DayOfWeek}, it&amp;#39;s {date:HH:mm} now.&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// Both calls produce the same output that is similar to:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Hello, Mark! Today is Wednesday, it&amp;#39;s 19:40 now.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
Console.WriteLine(&lt;span style=&#34;color:#cd5555&#34;&gt;$&amp;#34;The value of pi is {Math.PI}&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;Starting with C# 8.0, you can use the &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; tokens in any order: both &lt;code&gt;$@&amp;quot;...&amp;quot;&lt;/code&gt; and &lt;code&gt;@$&amp;quot;...&amp;quot;&lt;/code&gt; are valid interpolated verbatim strings. In earlier C# versions, the &lt;code&gt;$&lt;/code&gt; token must appear before the &lt;code&gt;@&lt;/code&gt; token.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This feature is even being incorporated into the Razor View engine for ASP.NET MVC. This can make it much easier to generate HTML output in a Web application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;asp-controller&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Manage&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;asp-action&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Index&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;title&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Manage&amp;#34;&lt;/span&gt;&amp;gt;Hello@User.GetUserName()!&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And Other :&lt;/p&gt;
&lt;p&gt;ASPX/JSP&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aui.github.io/art-template/&#34;&gt;art-template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://baidufe.github.io/BaiduTemplate/&#34;&gt;BaiduTemplate&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;item-5-prefer-formattablestring-for-culture-specific-strings&#34;&gt;Item 5: Prefer &lt;code&gt;FormattableString&lt;/code&gt; for Culture-Specific Strings&lt;/h3&gt;
&lt;h3 id=&#34;item-6-avoid-string-ly-typed-apis&#34;&gt;Item 6: Avoid String-ly Typed APIs&lt;/h3&gt;
&lt;h3 id=&#34;item-7-express-callbacks-with-delegates&#34;&gt;Item 7: Express Callbacks with Delegates&lt;/h3&gt;
&lt;h3 id=&#34;item-8-use-the-null-conditional-operator-for-event-invocations&#34;&gt;Item 8: Use the Null Conditional Operator for Event Invocations&lt;/h3&gt;
&lt;h3 id=&#34;item-10-use-the-new-modifier-only-to-react-to-base-class-updates&#34;&gt;Item 10: Use the new Modifier Only to React to Base Class Updates&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;working-with-linq&#34;&gt;Working with LINQ&lt;/h2&gt;
&lt;h3 id=&#34;item-42-distinguish-between-ienumerable-and-iqueryable-data-sourceshttpsdocsmicrosoftcomen-usdotnetframeworkdataadoneteflanguage-referencequery-executionredirectedfrommsdnanchor_0&#34;&gt;Item 42: &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/query-execution?redirectedfrom=MSDN#Anchor_0&#34;&gt;Distinguish between IEnumerable and IQueryable Data Sources&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/2876616/returning-ienumerablet-vs-iqueryablet&#34;&gt;Returning IEnumerable vs. IQueryable&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The difference is that &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb351562.aspx&#34;&gt;&lt;code&gt;IQueryable&lt;/code&gt;&lt;/a&gt; is the interface that allows LINQ-to-SQL (LINQ.-to-anything really) to work. So if you further refine your query on an &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb351562.aspx&#34;&gt;&lt;code&gt;IQueryable&lt;/code&gt;&lt;/a&gt;, that query will be executed in the database, if possible.&lt;/p&gt;
&lt;p&gt;For the &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/9eekhta0.aspx&#34;&gt;&lt;code&gt;IEnumerable&lt;/code&gt;&lt;/a&gt; case, it will be LINQ-to-object, meaning that all objects matching the original query will have to be loaded into memory from the database.&lt;/p&gt;
&lt;p&gt;In code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;IQueryable&amp;lt;Customer&amp;gt; custs = ...;
&lt;span style=&#34;color:#228b22&#34;&gt;// Later on...
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; goldCustomers = custs.Where(c =&amp;gt; c.IsGold);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That code will execute SQL to only select gold customers. The following code, on the other hand, will execute the original query in the database, then filtering out the non-gold customers in the memory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;IEnumerable&amp;lt;Customer&amp;gt; custs = ...;
&lt;span style=&#34;color:#228b22&#34;&gt;// Later on...
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; goldCustomers = custs.Where(c =&amp;gt; c.IsGold);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is quite an important difference, and working on &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb351562.aspx&#34;&gt;&lt;code&gt;IQueryable&lt;/code&gt;&lt;/a&gt; can in many cases save you from returning too many rows from the database. Another prime example is doing paging: If you use &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb300906.aspx&#34;&gt;&lt;code&gt;Take&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb357513.aspx&#34;&gt;&lt;code&gt;Skip&lt;/code&gt;&lt;/a&gt; on &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.linq.iqueryable.aspx&#34;&gt;&lt;code&gt;IQueryable&lt;/code&gt;&lt;/a&gt;, you will only get the number of rows requested; doing that on an &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/9eekhta0.aspx&#34;&gt;&lt;code&gt;IEnumerable&lt;/code&gt;&lt;/a&gt; will cause all of your rows to be loaded in memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Expression tree: a data structure that holds all the logic that makes up the actions in the query.&lt;/p&gt;
- https://www.openheart.icu/dotnet/effective-csharp6.0/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Dot Net Runtime</title>
        <link>https://www.openheart.icu/dotnet/dot-net-runtime/</link>
        <pubDate>Sat, 26 Dec 2020 11:25:57 +0000</pubDate>
        
        <guid>https://www.openheart.icu/dotnet/dot-net-runtime/</guid>
        <description>42th openheart https://www.openheart.icu/dotnet/dot-net-runtime/ -&lt;hr&gt;
&lt;p&gt;Source Code Learning for 「&lt;a href=&#34;https://github.com/dotnet/runtime&#34;&gt;&lt;em&gt;Dot Net Runtime&lt;/em&gt;&lt;/a&gt;」.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;microsoftextensionsdependencyinjection&#34;&gt;Microsoft.Extensions.DependencyInjection&lt;/h1&gt;
&lt;p&gt;Branch: &lt;a href=&#34;release/5.0&#34;&gt;release/5.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之前使用的都是.NET MVC DI，相对封装较为严重。公司的设计为Composition Root实现MVC中的ConfigureDependencies然后创建BuildServiceProvider。在对方法进行调用前通过IServiceProvider.GetService注入所需类构造函数中的依赖。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dependency injection addresses these problems through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The use of an interface or base class to abstract the dependency implementation.&lt;/li&gt;
&lt;li&gt;Registration of the dependency in a service container. .NET provides a built-in service container, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.iserviceprovider&#34;&gt;IServiceProvider&lt;/a&gt;. Services are typically registered at the app&amp;rsquo;s start-up, and appended to an &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection&#34;&gt;IServiceCollection&lt;/a&gt;. Once all services are added, you use &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.servicecollectioncontainerbuilderextensions.buildserviceprovider&#34;&gt;BuildServiceProvider&lt;/a&gt; to create the service container.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Injection&lt;/em&gt; of the service into the constructor of the class where it&amp;rsquo;s used. The framework takes on the responsibility of creating an instance of the dependency and disposing of it when it&amp;rsquo;s no longer needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Microsoft.Extensions.DependencyInjection 命名空间下还有Microsoft.Extensions.DependencyInjection.Abstractions，是Service相关的interface与Extensions。&lt;/p&gt;
&lt;h2 id=&#34;servicedescriptor&#34;&gt;ServiceDescriptor&lt;/h2&gt;
&lt;p&gt;ServiceDescriptor 的包含的属性如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; ServiceLifetime Lifetime { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Type ServiceType { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }
&lt;span style=&#34;color:#658b00&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Type? ImplementationType { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object?&lt;/span&gt; ImplementationInstance { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Func&amp;lt;IServiceProvider, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;object&lt;/span&gt;&amp;gt;? ImplementationFactory { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;get&lt;/span&gt;; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一般，在register services的时候，使用ServiceType和ImplementationType来构造一个ServiceDescriptor ，&lt;/p&gt;
&lt;h2 id=&#34;servicecollection&#34;&gt;ServiceCollection&lt;/h2&gt;
&lt;p&gt;IServiceCollection是ServiceDescriptor的Ilist接口。&lt;/p&gt;
&lt;p&gt;很显然，ServiceDescriptor就是register的每一个service，ServiceCollection必然是对Ilist接口的常规方法实现。register services的方法（AddTransient/AddScoped/AddSingletonAdd）都由ServiceCollectionServiceExtensions实现，而其他部分方法（Add/TryAdd/TryAddTransient/TryAddScoped/TryAddSingleton/TryAddEnumerable/Replace/RemoveAll）由ServiceCollectionDescriptorExtensions（为ServiceCollection的Extension）实现。&lt;/p&gt;
&lt;h2 id=&#34;buildserviceprovider&#34;&gt;BuildServiceProvider&lt;/h2&gt;
&lt;p&gt;BuildServiceProvider方法也是IServiceCollection的扩展，其有三个重载，最终是要创建ServiceProvider的实例。&lt;/p&gt;
&lt;p&gt;BuildServiceProvider的三个重载分别参数为空、一个布尔类型的validateScopes、一个ServiceProviderOptions；其实如果参数为空，实际是创建一个Default的ServiceProviderOptions（ValidateScopes与ValidateOnBuild均为false）；传递布尔类型的validateScopes后，会根据此值创建对应的ServiceProviderOptions（ValidateOnBuild为false）。&lt;/p&gt;
&lt;p&gt;BuildServiceProvider最终是构造一个ServiceProvider，出去上面提到的ServiceProviderOptions与ServiceCollection本身之外，ServiceProvider的构造函数还需要IServiceProviderEngine。&lt;/p&gt;
&lt;h2 id=&#34;serviceprovider&#34;&gt;ServiceProvider&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;Microsoft.Extensions.DependencyInjection&lt;/span&gt;
{
    &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;/// The default IServiceProvider.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;/// &amp;lt;/summary&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ServiceProvider&lt;/span&gt; : IServiceProvider, IDisposable, IServiceProviderEngineCallback, IAsyncDisposable
    {
    	&lt;span style=&#34;color:#228b22&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ServiceProvider实现了IServiceProvider（System.ComponentModel）、IDisposable、IServiceProviderEngineCallback（Microsoft.Extensions.DependencyInjection.ServiceLookup）和IAsyncDisposable。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;microsoftextensionsdependencyinjectionservicelookup&#34;&gt;Microsoft.Extensions.DependencyInjection.ServiceLookup&lt;/h1&gt;
&lt;h2 id=&#34;iserviceproviderengine&#34;&gt;IServiceProviderEngine&lt;/h2&gt;
&lt;p&gt;DynamicServiceProviderEngine/RuntimeServiceProviderEngine/ExpressionsServiceProviderEngine/ILEmitServiceProviderEngine都去继承了ServiceProviderEngine（抽象类），并重写了RealizeService方法。&lt;/p&gt;
&lt;h2 id=&#34;callsitevalidator&#34;&gt;CallSiteValidator&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;systemdiagnostics&#34;&gt;System.Diagnostics&lt;/h1&gt;
&lt;h2 id=&#34;debuggerdisplayattribute&#34;&gt;DebuggerDisplayAttribute&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;systemdiagnosticscodeanalysis&#34;&gt;System.Diagnostics.CodeAnalysis&lt;/h1&gt;
&lt;h2 id=&#34;dynamicallyaccessedmembersattribute&#34;&gt;DynamicallyAccessedMembersAttribute&lt;/h2&gt;
&lt;h2 id=&#34;dynamicallyaccessedmembertypes&#34;&gt;DynamicallyAccessedMemberTypes&lt;/h2&gt;
- https://www.openheart.icu/dotnet/dot-net-runtime/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>I am a freshman</title>
        <link>https://www.openheart.icu/speech/i-am-a-freshman/</link>
        <pubDate>Tue, 01 Dec 2020 16:39:46 +0000</pubDate>
        
        <guid>https://www.openheart.icu/speech/i-am-a-freshman/</guid>
        <description>42th openheart https://www.openheart.icu/speech/i-am-a-freshman/ -&lt;h1 id=&#34;step-out-of-my-comfort-zone&#34;&gt;Step out of my comfort zone&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id=&#34;sentence&#34;&gt;Sentence&lt;/h2&gt;
&lt;p&gt;We have a new team member onboard from 1st Dec 2020.&lt;/p&gt;
&lt;p&gt;Please join me in welcoming Kris to Infor and give them your great support in every way possible!&lt;/p&gt;
&lt;p&gt;Welcome to the team!&lt;/p&gt;
&lt;p&gt;Thank you. It is my honor to be able to join our team.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t spin your wheels! 这里的spin your wheels&lt;a href=&#34;https://dictionary.cambridge.org/zhs/%E8%AF%8D%E5%85%B8/%E8%8B%B1%E8%AF%AD/spin-your-wheels&#34;&gt;(cambridge.org)&lt;/a&gt; 可以理解为&amp;quot;to waste time doing things that achieve nothing&amp;quot;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re in good company. 你是一个好合作伙伴。此处的company为朋友、同伴&lt;/p&gt;
&lt;p&gt;I really enjoy your company. 我很喜欢你的陪伴。此处的company为陪伴&lt;/p&gt;
&lt;p&gt;She&amp;rsquo;s not coming – she&amp;rsquo;s got company. 她来不了了，她家里有客人。此处的company为客人&lt;/p&gt;
&lt;p&gt;Please be aware that the security team run &lt;em&gt;phishing simulations(网络钓鱼模拟)&lt;/em&gt; that are designed to help you practice recognizing the common &lt;em&gt;tactics scammers(欺诈者)&lt;/em&gt; use to get you to reveal sensitive information or install &lt;em&gt;malware(恶意软件)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;And give our warm welcome to Mr. Kris Nie 聂志勇 joins Infor China effective 1st December 2020, as Software Engineer, reporting to Jeking Pan, Manager, Software Development.&lt;/p&gt;
&lt;p&gt;What do you make of this. 你觉得这个怎么样。&lt;/p&gt;
&lt;p&gt;Last I checked/Last time I checked. 如假包换/据我所知&lt;/p&gt;
&lt;p&gt;This is the way.&lt;/p&gt;
&lt;p&gt;You have my word.&lt;/p&gt;
&lt;p&gt;I have spoken.&lt;/p&gt;
&lt;p&gt;That is the most beautiful moonrise I&amp;rsquo;ve seen in my entire life. 那是我这辈子见过的最美的月出时分。&lt;/p&gt;
&lt;p&gt;This page intentionally  left blank.&lt;/p&gt;
&lt;p&gt;This is a performance review for the first month of your probation period.&lt;/p&gt;
&lt;p&gt;It is a good time to show myself/prove I am a five.&lt;/p&gt;
&lt;p&gt;Any questions please just let me know.&lt;/p&gt;
&lt;p&gt;This is a final session for the Probation Review meeting.&lt;/p&gt;
&lt;p&gt;You can list all the things that you have completed or you have concerned with in the week and your plan for the next week.&lt;/p&gt;
&lt;p&gt;Any other topics are welcome to be listed in your update too.&lt;/p&gt;
&lt;p&gt;The things that I have completed and my simple plan as shown in the table below. Attached please find the excel file. I will be very grateful if you can help me improve my study planning.&lt;/p&gt;
&lt;p&gt;Enter up to 20 characters. 最多输入20个字符&lt;/p&gt;
&lt;p&gt;If you have already done it, please ignore the email. Otherwise, please follow below steps to update your MFS settings.&lt;/p&gt;
&lt;p&gt;Mr. Qian’s Forum 培训分享&lt;/p&gt;
&lt;p&gt;Hope this helps!&lt;/p&gt;
&lt;p&gt;All I know is that……/As far as I can tell/As far as I know&lt;/p&gt;
&lt;p&gt;Any thoughts for this discussion?/Any suggestion is welcome!&lt;/p&gt;
&lt;p&gt;FYI Team, please be well noticed, important for you to get aware of.&lt;/p&gt;
&lt;p&gt;If any questions or confusions, please feel free to ask around,&lt;/p&gt;
&lt;p&gt;Estimating is used to create quotes for customers.&lt;/p&gt;
&lt;p&gt;When improperly managed, &amp;hellip; 管理不当时&lt;/p&gt;
&lt;p&gt;How to express you are quite familiar/a little bit familiar/totally new to a word? I would suggest &lt;em&gt;very familiar&lt;/em&gt;, &lt;em&gt;somewhat familiar&lt;/em&gt;, and &lt;em&gt;unfamiliar&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here, the consumer sees all threes as a unit.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Up to you&amp;rdquo; means that someone is giving another person full responsibility to make their own decisions.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Depend on you&amp;rdquo; means that you&amp;rsquo;re putting your faith into that person, that you rely on him or her.&lt;/p&gt;
&lt;p&gt;I have a good impression of/feeling about her&lt;/p&gt;
&lt;p&gt;Good day! We have received your ticket regarding JIRA Account Setup Request for Kris Nie.&lt;/p&gt;
&lt;p&gt;Microsoft Outlook and its &lt;!-- raw HTML omitted --&gt;crippled sibling&lt;!-- raw HTML omitted --&gt; Outlook Express.&lt;/p&gt;
&lt;p&gt;Let’s recap. 让我们回顾一下&lt;/p&gt;
&lt;p&gt;Today is officially a holiday, but it’s business as usual around here.&lt;/p&gt;
&lt;p&gt;Thanks for your time, ……&lt;/p&gt;
&lt;p&gt;Per my understanding, ……&lt;/p&gt;
&lt;p&gt;Sorry for the inconvenience.&lt;/p&gt;
&lt;p&gt;&amp;ndash;I&amp;rsquo;m going to the bar. Anyone else coming?/I&amp;rsquo;m going hunting, are you coming with me?  &amp;ndash; Count me in!&lt;/p&gt;
&lt;p&gt;Will you please write me a letter sometime when you get the time?&lt;/p&gt;
&lt;p&gt;Congrats.&lt;/p&gt;
&lt;p&gt;There are many people to whom I owe thanks for their contributions to this book.&lt;/p&gt;
&lt;p&gt;My pleasure./It&amp;rsquo;s my pleasure.乐意效劳，这是我的荣幸 Sure/Sure thing.应该的 Of course!没事，这是当然的 You bet!当然的，不客气，不用谢 Anytime 别客气，随时愿为您效劳 Happy to help!很开心能帮到你 No worries.没问题 No sweat. 小意思 That&amp;rsquo;s all right.不用谢，不客气，没关系&lt;/p&gt;
&lt;p&gt;After my investigation, ……&lt;/p&gt;
&lt;p&gt;Very witty.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s it you want? You want the moon? Just say the word, and I&amp;rsquo;ll throw a lasso around it and pull it down.&lt;/p&gt;
&lt;p&gt;Youth is wasted on the wrong people.&lt;/p&gt;
&lt;p&gt;Shame on you.&lt;/p&gt;
&lt;p&gt;What gives.&lt;/p&gt;
&lt;p&gt;Some joke.&lt;/p&gt;
&lt;p&gt;I am making violent love to u.&lt;/p&gt;
&lt;p&gt;Do I paint a correct picture, or do I exaggerate?&lt;/p&gt;
&lt;p&gt;We mated.&lt;/p&gt;
&lt;p&gt;Attached is the SQLCMD doc introducing SQLCMD Model In MSSMS Query Editor. I am glad to share SQLCMD with you. It shows me an easy way of changing SQL Server connection in MSSMS. And more commands of SQLCMD is collected. Hope it helps in your work.&lt;/p&gt;
&lt;p&gt;Suit yourself/it&amp;rsquo;s up to u/I don&amp;rsquo;t care/as u wish/whatever. 随便。&lt;/p&gt;
&lt;p&gt;Whatever u think is fine with me.&lt;/p&gt;
&lt;p&gt;Okay, if you have been paying attention unlike a couple people, you&amp;rsquo;re going to be very concerned about the size of these page tables.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a kind of jaw-dropping.&lt;/p&gt;
&lt;p&gt;The unstoppable marching of time that is slowly guiding us all towards an inevitable death, it scares me the most.&lt;/p&gt;
&lt;p&gt;Time to FAP!&lt;/p&gt;
&lt;p&gt;No one ever got laid by going Dutch.&lt;/p&gt;
&lt;p&gt;I am very trainable.&lt;/p&gt;
&lt;p&gt;I am all fucked up!&lt;/p&gt;
&lt;p&gt;I take my work very seriously.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s time for you to go.&lt;/p&gt;
&lt;p&gt;Having a sensitive emotions is turning out to be a pain.&lt;/p&gt;
&lt;p&gt;We did it, we achieved social justice.&lt;/p&gt;
&lt;p&gt;Details as the attached mail.&lt;/p&gt;
&lt;p&gt;Hot hatch. 钢炮！！！！&lt;/p&gt;
&lt;p&gt;They get really big one like it&amp;rsquo;s not a time in the month.&lt;/p&gt;
&lt;p&gt;How do you walk to me.&lt;/p&gt;
&lt;p&gt;Like lambs to the slaughter.&lt;/p&gt;
&lt;p&gt;What a saint you are.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;e.g.&amp;rdquo; means &amp;ldquo;for example&amp;rdquo;, &amp;ldquo;i.e.&amp;rdquo; means &amp;ldquo;in other words&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the memory embedded in me.&lt;/p&gt;
&lt;p&gt;How about now?&lt;/p&gt;
&lt;p&gt;Today is my day, whatever I want do.&lt;/p&gt;
&lt;p&gt;Keep going.&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t wait to be inside you.&lt;/p&gt;
&lt;p&gt;Call me dirty. Maybe Daddy.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s a good clue.&lt;/p&gt;
&lt;p&gt;If I&amp;rsquo;m reading this right&amp;hellip;&lt;/p&gt;
&lt;p&gt;Not sure where we&amp;rsquo;ll land on this one.&lt;/p&gt;
&lt;p&gt;There is nothing more expensive than something free.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll correct my CMD command and prevent it from happening again.&lt;/p&gt;
&lt;p&gt;Thanks for your kind reminder.&lt;/p&gt;
&lt;p&gt;Thanks for your reminding me of the meeting.&lt;/p&gt;
&lt;p&gt;The process is fluid and changes are expected before it is rolled out to customers.&lt;/p&gt;
&lt;p&gt;Feedback is expected and encouraged.&lt;/p&gt;
&lt;p&gt;It can be reopened if found to still be an issue.&lt;/p&gt;
&lt;p&gt;I hope this letter finds you well.&lt;/p&gt;
&lt;p&gt;Every second you&amp;rsquo;re not running, I&amp;rsquo;m only getting closer.&lt;/p&gt;
&lt;p&gt;I have no sight into her heart.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve heard it said that Daisy&amp;rsquo;s murmur was only to make people lean toward her.&lt;/p&gt;
&lt;p&gt;A sort of apology arose to my lips.&lt;/p&gt;
&lt;p&gt;I enjoyed looking at her.&lt;/p&gt;
&lt;p&gt;It occurred to me now that I had seen her, or a picture of her, somewhere before.&lt;/p&gt;
&lt;p&gt;As though he were moving a checker to another square.&lt;/p&gt;
&lt;p&gt;&amp;lsquo;I hate that word hulking, &#39; objected Tom crossly, &amp;lsquo;even in kidding. &#39;&lt;/p&gt;
&lt;p&gt;Why the agression? Is this your time of the month?&lt;/p&gt;
&lt;p&gt;Framing her in narcotic related crimes.&lt;/p&gt;
&lt;p&gt;be out of the ordinary&lt;/p&gt;
&lt;p&gt;shed some tears&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t be so impatient!&lt;/p&gt;
&lt;p&gt;Be careful what you say/Watch your mouth/Mind your words.&lt;/p&gt;
&lt;p&gt;Bite the pillow, it will be hurt.&lt;/p&gt;
&lt;p&gt;Not really my cup of tea.&lt;/p&gt;
&lt;p&gt;What are your turn ons and turn offs?&lt;/p&gt;
&lt;p&gt;She is a call girl.&lt;/p&gt;
&lt;p&gt;There is a God.&lt;/p&gt;
&lt;p&gt;You are unbelievably cute.&lt;/p&gt;
&lt;p&gt;The best way to destigmatize something is to talk about it.&lt;/p&gt;
&lt;p&gt;I find her very attractive(alluring).&lt;/p&gt;
&lt;p&gt;nothing will ever compare.&lt;/p&gt;
&lt;p&gt;You’ve had more than enough time to finish the job.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;phrase&#34;&gt;Phrase&lt;/h2&gt;
&lt;p&gt;Carbon Copy 副本、抄送，outlook中的&lt;em&gt;cc&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;lead time 交付周期，订货至交货的时间&lt;/p&gt;
&lt;p&gt;Intranet 内联网&lt;/p&gt;
&lt;p&gt;General Ledger 总账&lt;/p&gt;
&lt;p&gt;Work in process 在制品，在产品&lt;/p&gt;
&lt;p&gt;Mfg. Order/Manufacturing Order 制造订单&lt;/p&gt;
&lt;p&gt;Job Orders 工单&lt;/p&gt;
&lt;p&gt;Floor plan 平面图&lt;/p&gt;
&lt;p&gt;Break rules 犯规，破例&lt;/p&gt;
&lt;p&gt;Referral fee 推荐费&lt;/p&gt;
&lt;p&gt;Per Lot Quantity 每手数量&lt;/p&gt;
&lt;p&gt;Scope of work&lt;/p&gt;
&lt;p&gt;Firm a planned order 确定计划订单&lt;/p&gt;
&lt;p&gt;the effects can ripple down 效率下降&lt;/p&gt;
&lt;p&gt;over-conservative plan 过度保守的计划&lt;/p&gt;
&lt;p&gt;purchase order(PO) 订购单&lt;/p&gt;
&lt;p&gt;maintain a comprehensive audit trail of changes 保持全面的变更审计跟踪&lt;/p&gt;
&lt;p&gt;engineering change notice (ECN) 工程变更通知&lt;/p&gt;
&lt;p&gt;mass material substitution&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_U.S._state_and_territory_abbreviations&#34;&gt;Prov/St Code 省/州缩写(abbreviations)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Three tier architecture 三层架构&lt;/p&gt;
&lt;p&gt;Earned value management&lt;/p&gt;
&lt;p&gt;Misc. miscellaneous 杂项&lt;/p&gt;
&lt;p&gt;Work Breakdown Structure, WBS 工作分解结构&lt;/p&gt;
&lt;p&gt;Cost Variance 成本偏差&lt;/p&gt;
&lt;p&gt;Shrinkage rates 收缩率&lt;/p&gt;
&lt;p&gt;Circuit Board 电路板&lt;/p&gt;
&lt;p&gt;Value-added management 增值管理&lt;/p&gt;
&lt;p&gt;the logistics of distribution 分销&lt;/p&gt;
&lt;p&gt;semifinished good 半成品&lt;/p&gt;
&lt;p&gt;Business as usual (BAU)&lt;/p&gt;
&lt;p&gt;Cute as a button&lt;/p&gt;
&lt;p&gt;I have the final say&lt;/p&gt;
&lt;p&gt;Vicious circle 恶性循环&lt;/p&gt;
&lt;p&gt;Fireside chat&lt;/p&gt;
&lt;p&gt;Tough （肉）太老，咬不动&lt;/p&gt;
&lt;p&gt;Tender 软嫩，Q弹&lt;/p&gt;
&lt;p&gt;Rare 一分熟， Medium rare 三分熟，Medium well 七分熟，Well done 全熟&lt;/p&gt;
&lt;p&gt;Cook 厨师，Chef 主厨，Absolutely delicious! 好吃&lt;/p&gt;
&lt;p&gt;nippy and zippy.&lt;/p&gt;
&lt;p&gt;last mile: （死刑犯从牢房走到刑场的）最后路程&lt;/p&gt;
&lt;p&gt;Shop floor&lt;/p&gt;
&lt;p&gt;Receive the package 收快递，fragile 易碎品，发快递用send&lt;/p&gt;
&lt;p&gt;Collect the package 取快递，locker 快递柜，快递 express delivery&lt;/p&gt;
&lt;p&gt;Common Sense Series 常识&lt;/p&gt;
&lt;p&gt;Code of Conduct 行为准则&lt;/p&gt;
&lt;p&gt;Making Tax Digital, MTD 数字化税收&lt;/p&gt;
&lt;p&gt;Value-added tax, VAT 增值税&lt;/p&gt;
&lt;p&gt;Venture capital fund, 风险投资基金; VC, 风投&lt;/p&gt;
&lt;p&gt;take note of&lt;/p&gt;
&lt;p&gt;may I have a look at/on&lt;/p&gt;
&lt;p&gt;Drastic measures 强硬措施&lt;/p&gt;
&lt;p&gt;Plastic surgery 整形外科&lt;/p&gt;
&lt;p&gt;Haute couture 高级定制&lt;/p&gt;
&lt;p&gt;Mass market 大众市场&lt;/p&gt;
&lt;p&gt;Menswear 男装&lt;/p&gt;
&lt;p&gt;Womenswear 女装&lt;/p&gt;
&lt;p&gt;Spring/summer 春夏&lt;/p&gt;
&lt;p&gt;Autumn/winter 秋冬&lt;/p&gt;
&lt;p&gt;Fall/winter 秋冬&lt;/p&gt;
&lt;p&gt;Ready-to-wear （RTW）高级成衣&lt;/p&gt;
&lt;p&gt;Resort 早春度假&lt;/p&gt;
&lt;p&gt;Pre-Fall 早秋&lt;/p&gt;
&lt;p&gt;Spring-couture 春季高定&lt;/p&gt;
&lt;p&gt;Fall-couture 秋季高定&lt;/p&gt;
&lt;p&gt;Bridal 婚礼系列&lt;/p&gt;
&lt;p&gt;acknowledge 是确认事情的存在或者发生，但我们不一定能看出承认者的态度到底如何；&lt;/p&gt;
&lt;p&gt;admit 往往带有“不情愿地承认”某件事情的存在或发生&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;abbreviation&#34;&gt;Abbreviation&lt;/h2&gt;
&lt;h3 id=&#34;phrase-1&#34;&gt;Phrase&lt;/h3&gt;
&lt;p&gt;ASAP, as soon as possible 尽快&lt;/p&gt;
&lt;p&gt;BID, break it down 细分明细&lt;/p&gt;
&lt;p&gt;BTW, by the way 顺带一提&lt;/p&gt;
&lt;p&gt;COB, close of business 下班时&lt;/p&gt;
&lt;p&gt;EOB, end of business 下班时&lt;/p&gt;
&lt;p&gt;EOD, end of day 今天以內&lt;/p&gt;
&lt;p&gt;DOE, depending on experience 视工作经验而定&lt;/p&gt;
&lt;p&gt;ETA, estimated time of arrival 预计达到时间&lt;/p&gt;
&lt;p&gt;FAQ, frequently asked questions 常见问题&lt;/p&gt;
&lt;p&gt;FTE, full-time employee 全体职工&lt;/p&gt;
&lt;p&gt;FWIW, for what it’s worth 不管有沒有用&lt;/p&gt;
&lt;p&gt;FYI, for your information 供你参考&lt;/p&gt;
&lt;p&gt;FYR, for your reference 供你参考&lt;/p&gt;
&lt;p&gt;FYU, for your use 供你使用&lt;/p&gt;
&lt;p&gt;IAM, in a meeting 会议中&lt;/p&gt;
&lt;p&gt;IMO, in my opinion 在我看来&lt;/p&gt;
&lt;p&gt;LET, leaving early today 今天提早走&lt;/p&gt;
&lt;p&gt;LMK, let me know 通知我&lt;/p&gt;
&lt;p&gt;MoM, month over month 月度比较&lt;/p&gt;
&lt;p&gt;MTD, month to date 月初到现在&lt;/p&gt;
&lt;p&gt;OOO, out of office 不在办公室&lt;/p&gt;
&lt;p&gt;OT, over time 加班&lt;/p&gt;
&lt;p&gt;OTP, on the phone 通话中&lt;/p&gt;
&lt;p&gt;PA, performance appraisal 绩效考核&lt;/p&gt;
&lt;p&gt;POC, point of contact 联系人&lt;/p&gt;
&lt;p&gt;PTE, part-time employee 兼职雇员&lt;/p&gt;
&lt;p&gt;PTO, paid time off 带薪休假&lt;/p&gt;
&lt;p&gt;NDA, Non-disclosure agreement 保密协议&lt;/p&gt;
&lt;p&gt;NRN, no reply necessary 不需回复&lt;/p&gt;
&lt;p&gt;NSFW, not safe for work&lt;/p&gt;
&lt;p&gt;RFD, request for discussion 请求讨论&lt;/p&gt;
&lt;p&gt;RSVP, Répondez s’il vous plait 法文的请回复&lt;/p&gt;
&lt;p&gt;TBA, to be announced&lt;/p&gt;
&lt;p&gt;TBD, to be determined&lt;/p&gt;
&lt;p&gt;TCC, teleconference call 电话会议&lt;/p&gt;
&lt;p&gt;TED, Tell me, explain to me, describe to me&lt;/p&gt;
&lt;p&gt;TL;DR, Too long didn’t read 太长，没读&lt;/p&gt;
&lt;p&gt;TOS, terms of service 服务条款&lt;/p&gt;
&lt;p&gt;TYT, take your time 别着急，慢慢来&lt;/p&gt;
&lt;p&gt;WFH, work from home&lt;/p&gt;
&lt;p&gt;WIIFM, what’s in it for me 这对我有什么好处&lt;/p&gt;
&lt;p&gt;WOM, word of mouth 口碑传播&lt;/p&gt;
&lt;p&gt;YTD, year to date 年底、今年之內&lt;/p&gt;
&lt;p&gt;POC, &lt;a href=&#34;https://en.wikipedia.org/wiki/Proof_of_concept&#34;&gt;Proof of concept&lt;/a&gt; 概念证明&lt;/p&gt;
&lt;p&gt;E12, Early Offer Year 12 education&lt;/p&gt;
&lt;p&gt;ACM, Association for Computing Machinery 计算机协会&lt;/p&gt;
&lt;p&gt;FQA, Frequently asked questions&lt;/p&gt;
&lt;p&gt;BI, Business intelligence 商业智能&lt;/p&gt;
&lt;p&gt;APAR,  Accounts Payable/Accounts Receivable &lt;em&gt;(finance)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;APAC, The Asia-Pacific&lt;/p&gt;
&lt;p&gt;RDBMS, abbr. 关系型数据库管理系统（Relational Database Management System）&lt;/p&gt;
&lt;p&gt;L3, means Line 3; Line 1 means On Site; Line 2 means Support; Line 3 means R&amp;amp;D&lt;/p&gt;
&lt;p&gt;BFF, Best Friends Forever. intimate friend/bosom friend/bestie/ladybro/partner in crime/all-weather friend/female intimate/fair-weather friend/toxic friend&lt;/p&gt;
&lt;h3 id=&#34;title-and-department-name&#34;&gt;Title and department name&lt;/h3&gt;
&lt;p&gt;CDO, chief data officer&lt;/p&gt;
&lt;p&gt;CEO, chief executive officer&lt;/p&gt;
&lt;p&gt;CFO, chief financial officer&lt;/p&gt;
&lt;p&gt;CIO, chief information officer&lt;/p&gt;
&lt;p&gt;CMO, chief marketing officer&lt;/p&gt;
&lt;p&gt;COO, chief operating officer&lt;/p&gt;
&lt;p&gt;CPA, certified public accountant 注册会计师&lt;/p&gt;
&lt;p&gt;CSO, chief security officer&lt;/p&gt;
&lt;p&gt;CSR, corporate social responsibility 企业社会责任&lt;/p&gt;
&lt;p&gt;CTO, chief technology officer&lt;/p&gt;
&lt;p&gt;CFP, certified financial planner 注册金融理财师&lt;/p&gt;
&lt;p&gt;GC, general counsel 首席法律顾问&lt;/p&gt;
&lt;p&gt;HR, human resources 人力资源&lt;/p&gt;
&lt;p&gt;PM, project manager 项目经理&lt;/p&gt;
&lt;p&gt;PR, public relations 公共关系&lt;/p&gt;
&lt;p&gt;R&amp;amp;D, research and development 研发&lt;/p&gt;
&lt;p&gt;SVP, Senior Vice President 高级副总裁&lt;/p&gt;
&lt;p&gt;President of Products 产品总裁&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mark&#34;&gt;Mark&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;!&lt;/code&gt; 叹号 exclamation mark/bang&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?&lt;/code&gt; 问号 question mark&lt;/p&gt;
&lt;p&gt;&lt;code&gt;,&lt;/code&gt; 逗号 comma&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; 点号 dot/period/point&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:&lt;/code&gt; 冒号 colon&lt;/p&gt;
&lt;p&gt;&lt;code&gt;;&lt;/code&gt; 分号 semicolon&lt;/p&gt;
&lt;p&gt;&lt;code&gt;”&lt;/code&gt; 双引号 quotation marks/double quote&lt;/p&gt;
&lt;p&gt;&lt;code&gt;‘&lt;/code&gt; 单引号/撇号 apostrophe/single quote&lt;/p&gt;
&lt;p&gt;`  重音号 backquote/grave accent&lt;/p&gt;
&lt;p&gt;&lt;code&gt;+&lt;/code&gt; 加号 plus sign&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-&lt;/code&gt; 减号/横线 hyphen/dash/minus sign/&lt;/p&gt;
&lt;p&gt;&lt;code&gt;=&lt;/code&gt; 等号 equal sign&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/&lt;/code&gt; 斜线 slash&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\ &lt;/code&gt;反斜线 backslash/escape&lt;/p&gt;
&lt;p&gt;&lt;code&gt;|&lt;/code&gt;竖线 bar/pipe/vertical bar&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt;下划线 underline/underscore&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; 美元符号 dollar sign&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@&lt;/code&gt; at at sign&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#&lt;/code&gt; 井号 crosshatch/sharp/hash&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%&lt;/code&gt; 百分号 percent sign/mod&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; and/和/兼 and/ampersand&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt; 折音号 circumflex/caret&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt; 波浪号 tilde&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{}&lt;/code&gt; （左右）花括号/大括号 (left/right|open/close) braces&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[]&lt;/code&gt; （左右）方括号/中括号 (left/right|open/close) brackets&lt;/p&gt;
&lt;p&gt;&lt;code&gt;()&lt;/code&gt; （左右）圆括号/小括号 (left/right|open/close) parentheses&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 尖括号 angle brackets&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; 大于号 less than&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; 小于号 greater than&lt;/p&gt;
&lt;p&gt;葡语中的变音符号（diacritic mark）在英文中的读法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt; circumflex/care&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt; tilde/squiggle&lt;/p&gt;
&lt;p&gt;&lt;code&gt;´&lt;/code&gt; acute&lt;/p&gt;
&lt;p&gt;` grave&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ç&lt;/code&gt; cedilla&lt;/p&gt;
&lt;p&gt;&lt;code&gt;...&lt;/code&gt; ellipsis&lt;/p&gt;
&lt;h3 id=&#34;希腊字母表&#34;&gt;希腊字母表&lt;/h3&gt;
&lt;p&gt;α　Α　alpha /alpha/ h表示送气音，在古希腊语中尚没有音位/f/，所以/pha/的发音类似普通话的“趴”。&lt;/p&gt;
&lt;p&gt;β　Β　beta /be:ta/ /e:/表示长元音，/e/的发音不是英语D.J.音标里的[e]，而类似K.K.音标里的/e/或者法语的/e/。/t/不送气，所以/ta/类似普通话“搭”而不是“他”。&lt;/p&gt;
&lt;p&gt;γ　Γ　gamma /gam:a/　/m:/表示长辅音，即在发辅音时，其持阻阶段应该适当延长，然后再做除阻动作。&lt;/p&gt;
&lt;p&gt;δ　Δ　delta /de:lta/&lt;/p&gt;
&lt;p&gt;ε　Ε　epsilon /epsilo:n/ /o/的发音要比英国英语字母组合au的发音更闭一些。&lt;/p&gt;
&lt;p&gt;ζ　Ζ　zeta /ze:ta, dze:ta/ /z, dz/浊的塞音或塞擦音。&lt;/p&gt;
&lt;p&gt;η　Η　eta /e:ta/ 第一个音节为长音。&lt;/p&gt;
&lt;p&gt;θ　Θ　theta /the:ta/ /th/表示送气音，t为齿化的(dentalised)塞音，而不是英语里的/t/，类似汉语里的t，但要更紧一些。&lt;/p&gt;
&lt;p&gt;ι　Ι　iota /jo:ta，io:ta/&lt;/p&gt;
&lt;p&gt;κ　Κ　kappa /kap:a/ /p:/表示长辅音，其描述类似/m:/，前一个p类似于英语里“失去爆破”或者汉语粤方言中的塞音韵尾/-p/，/k/不送气。&lt;/p&gt;
&lt;p&gt;λ　Λ　lambda /lambda/&lt;/p&gt;
&lt;p&gt;μ　Μ　my /my:/ /y:/是长元音，类似汉语的“淤”以及法语字母u单独存在时的发音。&lt;/p&gt;
&lt;p&gt;ν　Ν　ny /ny:/&lt;/p&gt;
&lt;p&gt;ξ　Ξ　xi /ksi:/&lt;/p&gt;
&lt;p&gt;ο　Ο　omicron /omikro:n/ micron表示“小”，所以是“短o”的意思。&lt;/p&gt;
&lt;p&gt;π　Π　pi /pi:/ /p/不送气，所以应该类似“逼”而不是“批”。&lt;/p&gt;
&lt;p&gt;ρ　Ρ　rho /rho:/ /rh/实际上表示清化的擦颤音，这里打不出来，姑且用这个组合吧。据说捷克语里有，这就是为什么Dvorak被翻译为“德沃夏克”而不是“德沃拉克”的原因。据说古希腊语有两个颤音，一个是词头的擦颤音，一个是词尾的成音节的真正浊颤音，所以希腊字母标里有两个rho，一个只用在词头，一个只用在词尾。&lt;/p&gt;
&lt;p&gt;σ　Σ　sigma /sigma/ /s/为齿化的，类似汉语的s-，而不是英语的[s]。与rho类似希腊字母表里也有两个sigma，一个在词头，一个在词尾，据说在词尾的也能成音节，会不会读得象汉语的“丝”一样就不得而知了。&lt;/p&gt;
&lt;p&gt;τ　Τ　tau /tau,tay?/ 后面一部分得读音不得而知，/u/还是/y/？/t/不送气，所以应该类似“搭屋”/“搭淤”，而非“套”。&lt;/p&gt;
&lt;p&gt;υ　Υ　ypsilon /y:psilo:n/ /y/类似汉语的“淤”而非“乌”，拉丁语里没有这个音，所以字母命名为 igraeca，即“希腊的i”的意思。与/i/部位相同，但是圆唇元音。&lt;/p&gt;
&lt;p&gt;φ　Φ　phi /phi:/ /ph/表示送气音，所以应该类似“批”。&lt;/p&gt;
&lt;p&gt;χ　Χ　chi /khi:/ c在古代拉丁语里的读音总是为/k/，/kh/为送气音。&lt;/p&gt;
&lt;p&gt;ψ　Ψ　psi /psi:/&lt;/p&gt;
&lt;p&gt;ω　Ω　omega /o:me:ga/ /o:/是长音，因为mega表示大的意思，即“大的o”&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;time-zone&#34;&gt;Time Zone&lt;/h2&gt;
&lt;p&gt;SGT (Singapore, GMT+08:00)&lt;/p&gt;
&lt;p&gt;IST (Mumbai, GMT+05:30)&lt;/p&gt;
&lt;p&gt;BST (London, GMT+0100)&lt;/p&gt;
&lt;p&gt;EDT (New York, GMT-05:00)&lt;/p&gt;
&lt;p&gt;PDT (San Francisco, GMT-08:00)&lt;/p&gt;
&lt;h1 id=&#34;the-lantern-festival&#34;&gt;&lt;strong&gt;The Lantern Festival&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;灯笼 lantern&lt;/p&gt;
&lt;p&gt;赏花灯 View lanterns&lt;/p&gt;
&lt;p&gt;折叠灯笼/纸灯笼 Chinese lantern&lt;/p&gt;
&lt;p&gt;天灯（孔明灯） sky lantern&lt;/p&gt;
&lt;p&gt;灯会/灯展 lantern show&lt;/p&gt;
&lt;p&gt;灯谜 lantern riddle/riddles written on lanterns&lt;/p&gt;
&lt;p&gt;形容很多灯笼可以说：a sea of lanterns&lt;/p&gt;
&lt;p&gt;舞龙狮 the lion or dragon dance&lt;/p&gt;
&lt;p&gt;庙会 temple fair&lt;/p&gt;
&lt;p&gt;踩高跷 stilt walking&lt;/p&gt;
&lt;p&gt;扭秧歌 yangge dance （OED收了“秧歌”的威妥玛拼音yang-ko）&lt;/p&gt;
&lt;p&gt;吃元宵 eating yuan xiao （OED词典收录了“元宵”的威妥玛拼音yuan hsiao）汤圆 还可以说：sweet dumplings /glutinous rice ball （字面”糯米团子”）/rice-flour dumpling（字面“米粉团子”）/glue pudding”（字面“黏在一起的布丁”）&lt;/p&gt;
&lt;p&gt;看烟花 Watching fireworks&lt;/p&gt;
&lt;p&gt;猜灯谜 Guessing lantern riddles 也可以说：solve riddles on the lanterns/riddle guessing games&lt;/p&gt;
&lt;p&gt;Things will happen as you wish! 心想事成&lt;/p&gt;
&lt;p&gt;Make a fortune! 发大财&lt;/p&gt;
&lt;p&gt;Happy Lantern Festival! 元宵节快乐&lt;/p&gt;
&lt;p&gt;I am tall when I am young and I am short when I am old. What am I? A candle&lt;/p&gt;
&lt;p&gt;Which letter is an animal? B(bee)&lt;/p&gt;
&lt;p&gt;Why is the letter E so important? Because it is the beginning of everything.&lt;/p&gt;
&lt;h1 id=&#34;different-types-of-coffeehttpswwwtasteofhomecomarticletypes-of-coffee&#34;&gt;&lt;a href=&#34;https://www.tasteofhome.com/article/types-of-coffee/&#34;&gt;Different Types of Coffee&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We cover all the different types of coffee from lattes to red eyes. All of your burning coffee questions are &lt;em&gt;finally&lt;/em&gt; answered.&lt;/p&gt;
&lt;p&gt;Every editorial product is independently selected, though we may be compensated or receive an affiliate commission if you buy something through our links.&lt;/p&gt;
&lt;p&gt;We’ve all been there, standing in line at a favorite coffeeshop, sweating because we’re not entirely sure of the &lt;a href=&#34;https://www.tasteofhome.com/article/whats-the-difference-between-iced-coffee-and-cold-brew-coffee/&#34;&gt;difference between a cold brew vs. a classic iced coffee&lt;/a&gt;. Oh gosh, I know I have. Good news: we’re covering everything from the difference of Arabica and Robusta coffee beans to &lt;em&gt;all&lt;/em&gt; the ways to brew your favorite &lt;a href=&#34;https://www.tasteofhome.com/article/the-real-reason-why-coffee-is-called-a-cup-of-joe/&#34;&gt;cup of joe&lt;/a&gt;. Hold on tight. We’re diving deep into your morning go-to drink.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.tasteofhome.com/wp-content/uploads/2020/02/COFFEE-BEANS-01.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;different-types-of-coffee-beans&#34;&gt;Different Types of Coffee Beans&lt;/h2&gt;
&lt;p&gt;In U.S. supermarkets, you’ll typically find two types of coffee beans for sale: Arabica and Robusta. You may be wondering, is there a &lt;a href=&#34;https://www.tasteofhome.com/article/arabica-vs-robusta-coffee/&#34;&gt;difference between Arabica and Robusta&lt;/a&gt;? Oh, there definitely is. Let’s get right to it.&lt;/p&gt;
&lt;h4 id=&#34;arabica&#34;&gt;Arabica&lt;/h4&gt;
&lt;p&gt;Arabica is the most popular type of coffee, hands down. Depending on who you ask, many coffee enthusiasts prefer using Arabica beans due to its taste. Typically used for black coffee, Arabica beans have a sweeter, more complex flavor that you can drink straight. Funny thing is, even though it’s the most popular, it doesn’t have as much caffeine as Robusta.&lt;/p&gt;
&lt;h4 id=&#34;robusta&#34;&gt;Robusta&lt;/h4&gt;
&lt;p&gt;While Arabica is the most popular, Robusta is cheaper and stronger. Because of its bitter flavor, you’ll typically see Robusta used for espresso drinks and in instant coffee mixes. If your Monday morning is lagging, reach for a cup of coffee that uses Robusta beans. Their high caffeine content will wake you right up!&lt;/p&gt;
&lt;h2 id=&#34;types-of-coffee-drinks&#34;&gt;Types of Coffee Drinks&lt;/h2&gt;
&lt;p&gt;Latte, americano, affogato…it’s crazy all that you can do with a few small beans. Whether you’re a coffee newbie or you consider yourself a coffee connoisseur, there are so many &lt;a href=&#34;https://www.tasteofhome.com/collection/homemade-coffee-shop-drinks/&#34;&gt;types of coffee drinks&lt;/a&gt; to discover. Here are some of the most popular types ordered by coffee lovers nationwide.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.tasteofhome.com/wp-content/uploads/2020/02/Types-of-Coffee-Drinks_1200X1200.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;black&#34;&gt;Black&lt;/h4&gt;
&lt;p&gt;Black coffee is as simple as it gets with ground coffee beans steeped in hot water, served warm. And if you want to sound fancy, you can call black coffee by its proper name: cafe noir.&lt;/p&gt;
&lt;p&gt;**Black coffee 黑咖啡：**由热水冲泡研磨咖啡豆的经典咖啡&lt;/p&gt;
&lt;h4 id=&#34;latte&#34;&gt;Latte&lt;/h4&gt;
&lt;p&gt;As the most popular coffee drink out there, the latte is comprised of a shot of espresso and steamed milk with just a touch of foam. It can be ordered plain or with a flavor shot of anything from vanilla to pumpkin spice. (Here’s how to make a copycat Starbucks &lt;a href=&#34;https://www.tasteofhome.com/article/copycat-pumpkin-spice-latte-recipe/&#34;&gt;pumpkin spice latte&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Latte 拿铁：&lt;/strong&gt; 浓缩咖啡加比较多的热牛奶&lt;/p&gt;
&lt;h4 id=&#34;cappuccino&#34;&gt;Cappuccino&lt;/h4&gt;
&lt;p&gt;Cappuccino is a latte made with more foam than steamed milk, often with a sprinkle of cocoa powder or cinnamon on top. Sometimes you can find variations that use cream instead of milk or ones that throw in flavor shot, as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cappucino 卡布奇诺：&lt;/strong&gt; 浓缩咖啡加一些热牛奶，比拿铁多一些奶泡&lt;/p&gt;
&lt;h4 id=&#34;americano&#34;&gt;Americano&lt;/h4&gt;
&lt;p&gt;With a similar flavor to black coffee, the americano consists of an espresso shot diluted in hot water. Pro tip: if you’re making your own, pour the espresso first, then add the hot water.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Americano 美式咖啡：&lt;/strong&gt; 浓缩咖啡加热开水。本质上Long Black同Americano都是同一种，即Espresso加水，分別在先后次序；Americano是将水加进Espresso中，而Long Black则是将Espresso加进热水水之中，味道与外观相若，但由于Long Black是把咖啡加入热水之中，故会留有一层油在表面，而且味道亦更浓烈，至于Americano则刚好相反，因而口感较清爽&lt;/p&gt;
&lt;h4 id=&#34;espresso&#34;&gt;Espresso&lt;/h4&gt;
&lt;p&gt;An espresso shot can be served solo or used as the foundation of most coffee drinks, like lattes and macchiatos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Espresso 浓缩咖啡：&lt;/strong&gt; 在浓缩咖啡机中制成的一小杯咖啡。&lt;/p&gt;
&lt;h4 id=&#34;doppio&#34;&gt;Doppio&lt;/h4&gt;
&lt;p&gt;A double shot of espresso, the doppio is perfect for putting extra pep in your step.&lt;/p&gt;
&lt;h4 id=&#34;cortado&#34;&gt;Cortado&lt;/h4&gt;
&lt;p&gt;Like yin and yang, a cortado is the perfect balance of espresso and warm steamed milk. The milk is used to cut back on the espresso’s acidity.&lt;/p&gt;
&lt;h4 id=&#34;red-eye&#34;&gt;Red Eye&lt;/h4&gt;
&lt;p&gt;Named after those pesky midnight flights, a red eye can cure any tiresome morning. A full cup of hot coffee with an espresso shot mixed in, this will definitely get your heart racing.&lt;/p&gt;
&lt;h4 id=&#34;galão&#34;&gt;Galão&lt;/h4&gt;
&lt;p&gt;Originating in Portugal, this hot coffee drink is closely related to the latte and cappuccino. Only difference is it contains about twice as much foamed milk, making it a lighter drink compared to the other two.&lt;/p&gt;
&lt;h4 id=&#34;lungo&#34;&gt;Lungo&lt;/h4&gt;
&lt;p&gt;A lungo is a long-pull espresso. The longer the pull, the more caffeine there is and the more ounces you can enjoy.&lt;/p&gt;
&lt;h4 id=&#34;macchiato&#34;&gt;Macchiato&lt;/h4&gt;
&lt;p&gt;The macchiato is another espresso-based drink that has a small amount of foam on top. It’s the happy medium between a cappuccino and a doppio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Macchiato 玛奇朵：&lt;/strong&gt; 浓缩咖啡加一點點热牛奶。&lt;/p&gt;
&lt;h4 id=&#34;mocha&#34;&gt;Mocha&lt;/h4&gt;
&lt;p&gt;For all you chocolate lovers out there, you’ll fall in love with a mocha (or maybe you already have). The mocha is a chocolate espresso drink with steamed milk and foam.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mocha 摩卡：&lt;/strong&gt; 拿铁加巧克力糖浆。&lt;/p&gt;
&lt;h4 id=&#34;ristretto&#34;&gt;Ristretto&lt;/h4&gt;
&lt;p&gt;Ristretto is an espresso shot. It uses less hot water which creates a sweeter flavor compared to the bitter taste of a traditional shot of espresso or a doppio.&lt;/p&gt;
&lt;h4 id=&#34;flat-white&#34;&gt;Flat White&lt;/h4&gt;
&lt;p&gt;This Aussie-born drink is basically a cappuccino without the foam or chocolate sprinkle. It’s an espresso drink with steamed milk.&lt;/p&gt;
&lt;h4 id=&#34;affogato&#34;&gt;Affogato&lt;/h4&gt;
&lt;p&gt;The affogato is an excuse to enjoy a scoop of ice cream any time of day (and any time of year in my opinion). Served with a scoop of ice cream and a shot of espresso, or two. The affogato is extra delish &lt;a href=&#34;https://www.tasteofhome.com/recipes/brownie-affogato-sundaes/&#34;&gt;served over a brownie&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;café-au-lait&#34;&gt;Café au Lait&lt;/h4&gt;
&lt;p&gt;Café au lait is perfect for the coffee minimalist who wants a bit more flavor. Just add a splash of warm milk to your coffee and you’re all set!&lt;/p&gt;
&lt;h4 id=&#34;irish&#34;&gt;Irish&lt;/h4&gt;
&lt;p&gt;Irish coffee consists of black coffee, whiskey and sugar, topped with whipped cream. Here’s an &lt;a href=&#34;https://www.tasteofhome.com/article/how-to-make-irish-coffee-recipe/&#34;&gt;Irish coffee recipe&lt;/a&gt; that will warm you right up.&lt;/p&gt;
&lt;h2 id=&#34;types-of-iced-coffee&#34;&gt;Types of Iced Coffee&lt;/h2&gt;
&lt;p&gt;What’s more refreshing than cool iced coffee in the summertime? Or maybe you enjoy these chilled drinks all year long. (We do!) Here are some of the best iced coffee drinks you can sip on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.tasteofhome.com/wp-content/uploads/2020/02/Types-of-iced-Coffee-2_1200X1200.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;iced-coffee&#34;&gt;Iced Coffee&lt;/h4&gt;
&lt;p&gt;A coffee with ice, typically served with a dash of milk, cream or sweetener—iced coffee is really as simple as that.&lt;/p&gt;
&lt;h4 id=&#34;iced-espresso&#34;&gt;Iced Espresso&lt;/h4&gt;
&lt;p&gt;Like an iced coffee, iced espresso can be served straight or with a dash of milk, cream or sweetener. You can also ice speciality espresso-based drinks like americanos, mochas, macchiatos, lattes and flat whites.&lt;/p&gt;
&lt;h4 id=&#34;cold-brew&#34;&gt;Cold Brew&lt;/h4&gt;
&lt;p&gt;The trendiest of the iced coffee bunch, cold brew coffees are made by steeping coffee beans from anywhere between 6-36 hours, depending on how strong you would like your cold brew. Once the beans are done steeping, add cold milk or cream. Here are a few of our best &lt;a href=&#34;https://www.tasteofhome.com/article/how-to-make-cold-brew-coffee-as-tasty-as-a-coffeehouses/&#34;&gt;cold brew coffee tips&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;**Cold brew 冷萃咖啡：**类似黑咖啡，经由长时间冷水浸泡在研磨咖啡豆里制成。&lt;/p&gt;
&lt;h4 id=&#34;frappuccino&#34;&gt;Frappuccino&lt;/h4&gt;
&lt;p&gt;Made famous by Starbucks, the Frappuccino is a blended iced coffee drink that’s topped with whipped cream and syrup. But not all Frapps are made the same: watch out for coffee-free versions. Unless you’re into that sorta thing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frappé 希腊冰咖啡：&lt;/strong&gt; 浓缩咖啡加冰塊，和打泡的牛奶混合。&lt;/p&gt;
&lt;h4 id=&#34;nitro&#34;&gt;Nitro&lt;/h4&gt;
&lt;p&gt;A cold brew + nitrogen bubbles = a cold brew coffee with a frothy, Guinness-like consistency. (It’s poured via a nitro tap, too.)&lt;/p&gt;
&lt;h4 id=&#34;mazagran&#34;&gt;Mazagran&lt;/h4&gt;
&lt;p&gt;Maza-who?! Mazagran coffee is a cross between iced coffee, tea and your favorite rum drink. It typically consists of espresso, lemon, sugar and (sometimes) rum.&lt;/p&gt;
&lt;h2 id=&#34;types-of-coffee-makers&#34;&gt;Types of Coffee Makers&lt;/h2&gt;
&lt;p&gt;Now that you’re a master on all the coffee types, let’s learn how to make ’em! From French presses to Mokas, there are plenty of ways to prepare your dream cup of java.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.tasteofhome.com/wp-content/uploads/2020/02/Types-of-Coffee-Makers-1200x1200-.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;french-press&#34;&gt;French Press&lt;/h4&gt;
&lt;p&gt;This manual coffee maker is extremely easy to use. Add ground coffee beans into your French press, pour piping hot water over the grounds, let the coffee steep for a few minutes and finally, press the plunger down and pour! Simple as that. French presses can be used for any bean, but many people prefer using them for darker, richer roasts. Also, how fancy does this &lt;a href=&#34;https://www.amazon.com/dp/B082FN5Y6Y/?ots=1&amp;amp;slotNum=0&amp;amp;imprToken=96ba92f3-91dc-0fed-0f5&amp;amp;tag=tohmke-20&#34;&gt;French press&lt;/a&gt; look? Make your morning brew…in style!&lt;/p&gt;
&lt;h4 id=&#34;percolator&#34;&gt;Percolator&lt;/h4&gt;
&lt;p&gt;Try out a &lt;a href=&#34;https://www.amazon.com/dp/B002LVUIK8/?ots=1&amp;amp;slotNum=1&amp;amp;imprToken=96ba92f3-91dc-0fed-0f5&amp;amp;tag=tohmke-20&#34;&gt;percolator&lt;/a&gt; to add a retro feel to your daily brew—like 1880s retro. To put it simply, percolators brew coffee by continuously pushing boiling hot water bubbles up into the “coffee chamber” to steep the coffee grains. This cycle is repeated until the coffee is ready to serve. They’re typically used for medium roasts and prepared over the stovetop, but percolators can work over any heated surface, even a campfire (hint, hint!).&lt;/p&gt;
&lt;h4 id=&#34;single-serve&#34;&gt;Single Serve&lt;/h4&gt;
&lt;p&gt;Single serve coffee maker sales have really peaked in the past few years. Measure out your desired coffee amount, pour into the reusable filter, pour water in and voila! A cup of coffee just for you will be ready soon. Single serve coffee makers are perfect for single-person households (or those where just one person drinks coffee). Try out this &lt;a href=&#34;https://www.amazon.com/dp/B07457Z312/?ots=1&amp;amp;slotNum=2&amp;amp;imprToken=96ba92f3-91dc-0fed-0f5&amp;amp;tag=tohmke-20&#34;&gt;budget-friendly single serve coffee maker&lt;/a&gt; which includes a fun travel mug!&lt;/p&gt;
&lt;h4 id=&#34;aeropress&#34;&gt;AeroPress&lt;/h4&gt;
&lt;p&gt;We’ve got another manual coffee maker for you. The &lt;a href=&#34;https://www.amazon.com/dp/B0047BIWSK/?ots=1&amp;amp;slotNum=3&amp;amp;imprToken=96ba92f3-91dc-0fed-0f5&amp;amp;tag=tohmke-20&#34;&gt;AeroPress&lt;/a&gt; is very similar to the French press. To use an AeroPress, we recommend checking out &lt;a href=&#34;https://aeropress.com/use-it-now/getting-started/&#34;&gt;this beautiful get-started guide&lt;/a&gt;. You can make espresso, lattes, cold brews or just a classic cup of coffee in this nifty little machine.&lt;/p&gt;
&lt;h4 id=&#34;drip&#34;&gt;Drip&lt;/h4&gt;
&lt;p&gt;Aah, yes. The classic electric coffee maker you know and love. To get your brew going in a &lt;a href=&#34;https://www.amazon.com/dp/B00MVWGQX0/?ots=1&amp;amp;slotNum=4&amp;amp;imprToken=96ba92f3-91dc-0fed-0f5&amp;amp;tag=tohmke-20&#34;&gt;drip coffee maker&lt;/a&gt;, all you have to do is scoop your coffee, pour it into the filter, pour some water in and press start to let the drip coffee maker do it’s coffee magic. Soon, you’ll hear the sweet sounds of your coffee dripping right into your coffee pot. Mornings, conquered.&lt;/p&gt;
&lt;p&gt;Some drip coffee makers also come with a &lt;a href=&#34;https://www.amazon.com/dp/B000TQEDE4/?ots=1&amp;amp;slotNum=5&amp;amp;imprToken=96ba92f3-91dc-0fed-0f5&amp;amp;tag=tohmke-20&#34;&gt;thermal carafe&lt;/a&gt;. Typically with a double layered, stainless steel wall, thermal carafes keep your coffee tasting fresh and hot for hours longer than most glass carafes do. Some drip coffee makers use a thermal carafe, but traditionally, they use a glass carafe instead.&lt;/p&gt;
&lt;h4 id=&#34;pour-over&#34;&gt;Pour Over&lt;/h4&gt;
&lt;p&gt;A pour-over coffee maker is exactly what it sounds like: you manually pour hot water over the beans. With a solid 5-star rating on Amazon, pour-over coffee makers like &lt;a href=&#34;https://www.amazon.com/Chemex-Classic-Pour-over-Glass-Coffeemaker/dp/B017M9TJA8/?ots=1&amp;amp;slotNum=6&amp;amp;imprToken=96ba92f3-91dc-0fed-0f5&amp;amp;tag=tohmke-20&#34;&gt;Chemex&lt;/a&gt; are a solid choice. Fans love the fact that you get to control the strength of the coffee, plus the pots are super easy to clean. You do need a special kind of filter, though, which is pricier than the typical drip coffee filter. However, some are reusable.&lt;/p&gt;
&lt;h4 id=&#34;cold-brew-1&#34;&gt;Cold Brew&lt;/h4&gt;
&lt;p&gt;Diehard cold brew fans may want to invest in a &lt;a href=&#34;https://www.amazon.com/dp/B00FFLY64U/?ots=1&amp;amp;slotNum=7&amp;amp;imprToken=96ba92f3-91dc-0fed-0f5&amp;amp;tag=tohmke-20&#34;&gt;cold brew coffee maker&lt;/a&gt;. To use a cold brew maker, throw in your coffee grounds, brew and serve. You can store the coffee for up to 36 hours. If you’re looking for a multi-functional coffee maker, you can prepare cold brew coffees in other makers, like the AeroPress.&lt;/p&gt;
&lt;h4 id=&#34;moka&#34;&gt;Moka&lt;/h4&gt;
&lt;p&gt;Moka pots share a lot of similarities with the percolator and there’s often confusion between the two. Both need a heated surface, like a stovetop or even a campfire. However, the &lt;a href=&#34;https://www.amazon.com/dp/B000CNY6UK/?ots=1&amp;amp;slotNum=8&amp;amp;imprToken=96ba92f3-91dc-0fed-0f5&amp;amp;tag=tohmke-20&#34;&gt;Moka pot&lt;/a&gt; produces an espresso-like drink and its brewing process is a bit different than the percolator. You need to keep more of an eye on it because when the Moka pot’s water is spent, you should remove the pot from the heat surface to avoid burnt-tasting coffee. Whereas with the percolator’s simple brewing process, the longer you leave it running, the stronger the coffee will be.&lt;/p&gt;
&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;
&lt;p&gt;**Pour over 手沖咖啡 ：**类似黑咖啡，由热水倒在研磨咖啡豆上，並且从滤杯滴下制成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Decaf 低咖啡因：&lt;/strong&gt; 低咖啡因咖啡或是无咖啡因。&lt;/p&gt;
&lt;p&gt;**Steamer 牛奶：**有泡沫的热牛奶加上甜甜的口味。&lt;/p&gt;
&lt;p&gt;**Lemonade 柠檬水：**一种由柠檬汁、糖和水制成的冰的饮料。&lt;/p&gt;
&lt;h3 id=&#34;more&#34;&gt;More…&lt;/h3&gt;
&lt;p&gt;在很多咖啡店里，你可以加一些不同的口味到你的饮品里。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vanilla 香草&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hazelnut 榛果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caramel 焦糖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Toffee 太妃糖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;INFORMATION&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.coffeereview.com/coffee-glossary/&#34;&gt;COFFEE GLOSSARY&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ingredients&#34;&gt;Ingredients&lt;/h1&gt;
&lt;h2 id=&#34;meat&#34;&gt;Meat&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/v2-5fd7917287c26049d496f6f9b16955a2_r.jpg&#34; alt=&#34;Meat&#34;&gt;&lt;/p&gt;
&lt;p&gt;lamb 羔羊肉 [læm]&lt;/p&gt;
&lt;p&gt;butcher 肉店老板 [ˈbʊtʃər]&lt;/p&gt;
&lt;p&gt;meat hook 吊肉钩 [miːt hʊk]&lt;/p&gt;
&lt;p&gt;knife sharpener 磨刀器&lt;/p&gt;
&lt;p&gt;scales 秤 [skeɪlz]&lt;/p&gt;
&lt;p&gt;bacon 熏肉 [ˈbeɪkən]&lt;/p&gt;
&lt;p&gt;sausages 香肠 [ˈsɔsɪdʒɪz]&lt;/p&gt;
&lt;p&gt;liver 肝脏 [ˈlɪvər]&lt;/p&gt;
&lt;p&gt;pork 猪肉 [pɔːrk]&lt;/p&gt;
&lt;p&gt;offal 下水 [ˈɔːfl]&lt;/p&gt;
&lt;p&gt;free range 放养的 [ˌfriː reɪndʒ]&lt;/p&gt;
&lt;p&gt;cooked meat 熟肉 [kʊkt miːt]&lt;/p&gt;
&lt;p&gt;beef 牛肉 [biːf]&lt;/p&gt;
&lt;p&gt;rabbit 兔肉 [ˈræbɪt]&lt;/p&gt;
&lt;p&gt;cured 腌制的 [kjʊrd]&lt;/p&gt;
&lt;p&gt;organic 有机（饲养）的 [ɔːrˈɡænɪk]&lt;/p&gt;
&lt;p&gt;white meat 白肉（指家禽肉、鱼肉等）&lt;/p&gt;
&lt;p&gt;veal 小牛肉 [viːl]&lt;/p&gt;
&lt;p&gt;tongue 牛舌 [tʌŋ]&lt;/p&gt;
&lt;p&gt;smoked 熏制的 [smoʊkt]&lt;/p&gt;
&lt;p&gt;lean meat 瘦肉 [liːn miːt]&lt;/p&gt;
&lt;p&gt;red meat 红肉（指牛肉、猪肉和羊肉）&lt;/p&gt;
&lt;h2 id=&#34;cuts&#34;&gt;Cuts&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/v2-8cd664994b62af4220f6be06ddc57077_r.jpg&#34; alt=&#34;cuts&#34;&gt;&lt;/p&gt;
&lt;p&gt;ham 火腿 [hæm]&lt;/p&gt;
&lt;p&gt;rind 肉皮 [raɪnd]&lt;/p&gt;
&lt;p&gt;slice 薄片 [slaɪs]&lt;/p&gt;
&lt;p&gt;sirloin steak 牛上腰排 [ˈsɜːrlɔɪn steɪk]&lt;/p&gt;
&lt;p&gt;rasher 火腿片 [ˈræʃər]&lt;/p&gt;
&lt;p&gt;mince 肉馅 [mɪns]&lt;/p&gt;
&lt;p&gt;fat 肥肉 [fæt]&lt;/p&gt;
&lt;p&gt;rib 肋排 [rɪb]&lt;/p&gt;
&lt;p&gt;chop 排骨 [tʃɑːp]&lt;/p&gt;
&lt;p&gt;bone 骨头 [boʊn]&lt;/p&gt;
&lt;p&gt;fillet 里脊肉 [fɪˈleɪ]&lt;/p&gt;
&lt;p&gt;joint 后腿肉 [dʒɔɪnt]&lt;/p&gt;
&lt;p&gt;kidney 肾 [ˈkɪdni]&lt;/p&gt;
&lt;p&gt;rump steak 牛腿排 [rʌmp steɪk]&lt;/p&gt;
&lt;p&gt;heart 心 [hɑːrt]&lt;/p&gt;
&lt;h2 id=&#34;poultry&#34;&gt;Poultry&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://pic4.zhimg.com/v2-609fbff8bdd72b7474c7ea368d922f1f_r.jpg&#34; alt=&#34;poultry&#34;&gt;&lt;/p&gt;
&lt;p&gt;skin 皮 [skɪn]&lt;/p&gt;
&lt;p&gt;turkey 火鸡 [ˈtɜːrki]&lt;/p&gt;
&lt;p&gt;breast 胸 [brest]&lt;/p&gt;
&lt;p&gt;thigh 大腿 [θaɪ]&lt;/p&gt;
&lt;p&gt;dressed chicken 去毛开膛的鸡&lt;/p&gt;
&lt;p&gt;chicken 鸡 [ˈtʃɪkɪn]&lt;/p&gt;
&lt;p&gt;pheasant 野鸡 [ˈfeznt]&lt;/p&gt;
&lt;p&gt;duck 鸭 [dʌk]&lt;/p&gt;
&lt;p&gt;leg 腿 [leɡ]&lt;/p&gt;
&lt;p&gt;quail 鹌鹑 [kweɪl]&lt;/p&gt;
&lt;p&gt;goose 鹅 [ɡuːs]&lt;/p&gt;
&lt;h2 id=&#34;fish&#34;&gt;Fish&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://pic2.zhimg.com/v2-f0a3656178aa492097cadbe6f6adc641_r.jpg&#34; alt=&#34;fish&#34;&gt;&lt;/p&gt;
&lt;p&gt;peeled prawns 去皮虾 [piːld prɔnz]&lt;/p&gt;
&lt;p&gt;ice 冰 [aɪs]&lt;/p&gt;
&lt;p&gt;red mullet 羊鱼 [red ˈmʌlɪt]&lt;/p&gt;
&lt;p&gt;halibut fillets 大比目鱼片 [ˈhælɪbət fɪˈleɪs]&lt;/p&gt;
&lt;p&gt;rainbow trout 虹鳟鱼 [ˌreɪnboʊ ˈtraʊt]&lt;/p&gt;
&lt;p&gt;skate wings 鳐鱼翅 [skeɪt wɪŋz]&lt;/p&gt;
&lt;p&gt;fishmongers 水产店&lt;/p&gt;
&lt;p&gt;monkfish 鮟鱇鱼英 [ mʌŋkfɪʃ]&lt;/p&gt;
&lt;p&gt;mackerel 鲭鱼 [ˈmækrəl]&lt;/p&gt;
&lt;p&gt;swordfish 剑鱼 [ˈsɔːrdfɪʃ]&lt;/p&gt;
&lt;p&gt;Dover sole 鳎鱼 [ˈdoʊvər soʊl]&lt;/p&gt;
&lt;p&gt;lemon sole 黄盖鲽 [ˌlemən ˈsoʊl]&lt;/p&gt;
&lt;p&gt;haddock 黑线鳕 [ˈhædək]&lt;/p&gt;
&lt;p&gt;sardine 沙丁鱼 [ˌsɑːrˈdiːn]&lt;/p&gt;
&lt;p&gt;skate 鳐鱼 [skeɪt]&lt;/p&gt;
&lt;p&gt;whiting 牙鳕 [ˈwaɪtɪŋ]&lt;/p&gt;
&lt;p&gt;sea bass 海鲈 [siː beɪs]&lt;/p&gt;
&lt;p&gt;salmon 鲑鱼 [ˈsæmən]&lt;/p&gt;
&lt;p&gt;cod 鳕鱼 [kɑːd]&lt;/p&gt;
&lt;p&gt;sea bream 鲷鱼 [siː briːm]&lt;/p&gt;
&lt;p&gt;tuna 金枪鱼 [ˈtuːnə]&lt;/p&gt;
&lt;h2 id=&#34;seafood&#34;&gt;Seafood&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/v2-d619088b7be2ece96a803f1dabe99b30_r.jpg&#34; alt=&#34;seafood&#34;&gt;&lt;/p&gt;
&lt;p&gt;scallop 扇贝 [ˈskæləp]&lt;/p&gt;
&lt;p&gt;crab 螃蟹 [kræb]&lt;/p&gt;
&lt;p&gt;lobster 龙虾 [ˈlɑːbstər]&lt;/p&gt;
&lt;p&gt;king prawn 大对虾 [kɪŋ prɔːn]&lt;/p&gt;
&lt;p&gt;mussel 贻贝 [ˈmʌsl]&lt;/p&gt;
&lt;p&gt;crayfish 小龙虾 [ˈkreɪfɪʃ]&lt;/p&gt;
&lt;p&gt;oyster 牡蛎 [ˈɔɪstər]&lt;/p&gt;
&lt;p&gt;razor-shell 蛏子 [ˈreɪzər ʃel]&lt;/p&gt;
&lt;p&gt;cockle 鸟蛤 [ˈkɑːkl]&lt;/p&gt;
&lt;p&gt;octopus 章鱼乌贼 [ˈɑːktəpʊs]&lt;/p&gt;
&lt;p&gt;cuttlefish 乌贼 [ˈkʌtlfɪʃ]&lt;/p&gt;
&lt;p&gt;clam 蛤蜊 [klæm]&lt;/p&gt;
&lt;p&gt;frozen 冷冻的 [ˈfroʊzn]&lt;/p&gt;
&lt;p&gt;salted 盐渍的 [ˈsɔːltɪd]&lt;/p&gt;
&lt;p&gt;smoked 熏制的 [smoʊkt]&lt;/p&gt;
&lt;p&gt;descaled 去麟的  [di skeɪl]&lt;/p&gt;
&lt;p&gt;fillet 去骨鱼片 [fɪˈleɪ]&lt;/p&gt;
&lt;p&gt;loin 腰肉 [lɔɪn]&lt;/p&gt;
&lt;p&gt;tail 尾部 [teɪl]&lt;/p&gt;
&lt;p&gt;bone 骨头 [boʊn]&lt;/p&gt;
&lt;p&gt;scale 鳞片 [skeɪl]&lt;/p&gt;
&lt;p&gt;fresh 新鲜 [freʃ]&lt;/p&gt;
&lt;p&gt;cleaned 处理干净的 [kliːnd]&lt;/p&gt;
&lt;p&gt;skinned 去皮的 [skɪnd]&lt;/p&gt;
&lt;p&gt;boned 去骨的 [boʊnd]&lt;/p&gt;
&lt;p&gt;filleted 切片的 [fɪˈleɪɪd]&lt;/p&gt;
&lt;p&gt;steak 鱼片 [steɪk]&lt;/p&gt;
&lt;p&gt;Wil you clean it for me?&lt;/p&gt;
&lt;h2 id=&#34;vegeatables&#34;&gt;Vegeatables&lt;/h2&gt;
&lt;h3 id=&#34;a&#34;&gt;A&lt;/h3&gt;
&lt;p&gt;Adzuki bean 红豆 [ə ʒuki]&lt;/p&gt;
&lt;p&gt;Aloe 芦荟 [ ælo]&lt;/p&gt;
&lt;p&gt;Aniseed 八角 [ ænəsid]&lt;/p&gt;
&lt;p&gt;Aubergine 茄子 [ obɚʒin]&lt;/p&gt;
&lt;p&gt;Asparagus 芦笋 [ə spærəgəs]&lt;/p&gt;
&lt;h3 id=&#34;b&#34;&gt;B&lt;/h3&gt;
&lt;p&gt;Bamboo Shoot 笋 [,bæm bu]&lt;/p&gt;
&lt;p&gt;Broccoli 西兰花 [ brɔkəli]&lt;/p&gt;
&lt;p&gt;Bean Sprout 绿豆芽 [spraʊt]&lt;/p&gt;
&lt;p&gt;Beetroot 甜菜 [ bitrut]&lt;/p&gt;
&lt;p&gt;Brussels sprout 球芽甘蓝&lt;/p&gt;
&lt;p&gt;Bitter gourd 苦瓜 [ɡʊrd]&lt;/p&gt;
&lt;p&gt;Bok-choy 小白菜 [ bɔk tʃɔɪ]&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;C&lt;/h3&gt;
&lt;p&gt;Carrot 胡萝卜 [ kærət]&lt;/p&gt;
&lt;p&gt;Cabbage 卷心菜 [ˈkæbɪdʒ]&lt;/p&gt;
&lt;p&gt;Celery 芹菜 [ sɛləri]&lt;/p&gt;
&lt;p&gt;Cucumber 黄瓜 [ kjʊ,kʌmbɚ]&lt;/p&gt;
&lt;p&gt;Cauliflower 花菜 [ kɔlɪ flaʊɚ]&lt;/p&gt;
&lt;p&gt;Cloud ear/wood ear 木耳&lt;/p&gt;
&lt;p&gt;Chive 细香葱 [tʃaɪv]&lt;/p&gt;
&lt;p&gt;Corn 玉米 [kɔrn]&lt;/p&gt;
&lt;p&gt;Chili 辣椒 [ tʃɪli]&lt;/p&gt;
&lt;p&gt;Coriander 香菜 [,kɔrɪ ændɚ]&lt;/p&gt;
&lt;p&gt;Cinnamon 肉桂 [ sɪnəmən]&lt;/p&gt;
&lt;p&gt;Chinese Kale 芥蓝 [kel]&lt;/p&gt;
&lt;p&gt;Chinese Radish/Daikon 白萝卜&lt;/p&gt;
&lt;p&gt;Chinese Yam 山药 [jæm]&lt;/p&gt;
&lt;p&gt;Chrysanthemum greens 茼蒿 [krɪ sænθəməm]&lt;/p&gt;
&lt;h3 id=&#34;e&#34;&gt;E&lt;/h3&gt;
&lt;p&gt;Eggplant 茄子 [ ɛɡplænt]&lt;/p&gt;
&lt;p&gt;Eddoes 小芋头 [ edəʊ]&lt;/p&gt;
&lt;p&gt;Enoki mushroom 金针菇 [e nɔki:]&lt;/p&gt;
&lt;h3 id=&#34;f&#34;&gt;F&lt;/h3&gt;
&lt;p&gt;French Bean 四季豆/刀豆&lt;/p&gt;
&lt;p&gt;Fennel 茴香 [ fɛnl]&lt;/p&gt;
&lt;h3 id=&#34;g&#34;&gt;G&lt;/h3&gt;
&lt;p&gt;Ginger 姜 [ dʒɪndʒɚ]&lt;/p&gt;
&lt;p&gt;Garlic 大蒜 [ ɡɑrlɪk]&lt;/p&gt;
&lt;p&gt;Garlic sprout 蒜苗/苔&lt;/p&gt;
&lt;p&gt;Green Pepper 青椒&lt;/p&gt;
&lt;h3 id=&#34;k&#34;&gt;K&lt;/h3&gt;
&lt;p&gt;Kohlrabi 甘蓝 [ kol rɑbi]&lt;/p&gt;
&lt;p&gt;Kelp 海带 [kɛlp]&lt;/p&gt;
&lt;p&gt;King oyster mushroom 杏鲍菇&lt;/p&gt;
&lt;h3 id=&#34;l&#34;&gt;L&lt;/h3&gt;
&lt;p&gt;Lettuce 莴苣/生菜 [ lɛtɪs]&lt;/p&gt;
&lt;p&gt;Lotus seed 莲子&lt;/p&gt;
&lt;p&gt;Loofah 丝瓜 [ lufə]&lt;/p&gt;
&lt;p&gt;Laurel 月桂 [ lɔrəl]&lt;/p&gt;
&lt;p&gt;Leek 韭葱 [lik]&lt;/p&gt;
&lt;p&gt;Laver 紫菜 [ levɚ]&lt;/p&gt;
&lt;p&gt;Licorice 甘草 [ lɪkərɪs; lɪkərɪʃ]&lt;/p&gt;
&lt;p&gt;Lotus root 莲藕&lt;/p&gt;
&lt;h3 id=&#34;m&#34;&gt;M&lt;/h3&gt;
&lt;p&gt;Mushroom 蘑菇 [ mʌʃrʊm]&lt;/p&gt;
&lt;p&gt;Mung bean 绿豆&lt;/p&gt;
&lt;h3 id=&#34;o&#34;&gt;O&lt;/h3&gt;
&lt;p&gt;Onion 洋葱 [ ʌnjən]&lt;/p&gt;
&lt;h3 id=&#34;p&#34;&gt;P&lt;/h3&gt;
&lt;p&gt;Pumpkin 南瓜 [ pʌmpkɪn]&lt;/p&gt;
&lt;p&gt;Pepper 胡椒&lt;/p&gt;
&lt;p&gt;Pickled cucumber 酸黄瓜&lt;/p&gt;
&lt;h3 id=&#34;r&#34;&gt;R&lt;/h3&gt;
&lt;p&gt;Radish 萝卜 [ rædɪʃ]&lt;/p&gt;
&lt;p&gt;Romaine 生菜 [rə(ʊ) meɪn]&lt;/p&gt;
&lt;p&gt;Red pepper 红椒&lt;/p&gt;
&lt;p&gt;Red bean 泛指红色的豆&lt;/p&gt;
&lt;h3 id=&#34;s&#34;&gt;S&lt;/h3&gt;
&lt;p&gt;Spring onion/Scallion 青葱 [ skælɪən]&lt;/p&gt;
&lt;p&gt;Silver ear fungus 白木耳&lt;/p&gt;
&lt;p&gt;Soybean 大豆 [ sɔɪ,bin]&lt;/p&gt;
&lt;p&gt;Soybean sprout 黄豆芽&lt;/p&gt;
&lt;p&gt;Spinach 菠菜 [ spɪnɪtʃ]&lt;/p&gt;
&lt;p&gt;Straw mushroom 草菇&lt;/p&gt;
&lt;p&gt;Green bean 刀豆&lt;/p&gt;
&lt;p&gt;Sweet Potato 红薯&lt;/p&gt;
&lt;p&gt;Seaweed 海藻 [ si wid]&lt;/p&gt;
&lt;p&gt;Snow Pea 荷兰豆&lt;/p&gt;
&lt;h3 id=&#34;t&#34;&gt;T&lt;/h3&gt;
&lt;p&gt;Taro 大芋头 [ tærəʊ]&lt;/p&gt;
&lt;h3 id=&#34;w&#34;&gt;W&lt;/h3&gt;
&lt;p&gt;Watercress 豆瓣菜 [ wɔtɚ krɛs]&lt;/p&gt;
&lt;p&gt;Water spinach 空心菜&lt;/p&gt;
&lt;p&gt;Water caltrop 菱角 [ kæltrəp]&lt;/p&gt;
&lt;p&gt;White gourd 冬瓜 [ɡʊrd]&lt;/p&gt;
&lt;p&gt;Water chestnut 荸荠 [ˈwɔtɚ ˈtʃɛsˌnʌt]&lt;/p&gt;
&lt;p&gt;Wakame/sea mustard 裙带藻（味增汤海带）&lt;/p&gt;
&lt;p&gt;Wild rice stem 茭白&lt;/p&gt;
&lt;h3 id=&#34;y&#34;&gt;Y&lt;/h3&gt;
&lt;p&gt;Yellow pepper 黄椒&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;hotel&#34;&gt;Hotel&lt;/h1&gt;
&lt;h2 id=&#34;bed&#34;&gt;Bed&lt;/h2&gt;
&lt;p&gt;single bed/twin bed: 39×74in&lt;/p&gt;
&lt;p&gt;full-size bed: 54×74in&lt;/p&gt;
&lt;p&gt;queen-size bed: 60×80in&lt;/p&gt;
&lt;p&gt;king-size bed: 76×80in&lt;/p&gt;
&lt;h2 id=&#34;room&#34;&gt;Room&lt;/h2&gt;
&lt;p&gt;single room：通常有一个full-size 的大床&lt;/p&gt;
&lt;p&gt;double room：单床双人房，通常有一张queen-size bed 或double bed 的双人床&lt;/p&gt;
&lt;p&gt;twin room：双床双人房，通常配备两个single bed 的独立床铺&lt;/p&gt;
&lt;p&gt;triple room：三人房，可以睡三人，通常有双人床和单人床各一张，或是其他组合&lt;/p&gt;
&lt;p&gt;suite：套房，比一般客房大，有多个房间，可能还分行政套房或家庭套房&lt;/p&gt;
&lt;p&gt;adjoining/connecting rooms：相连房，两个房间有门直接互通连接在一起，适合人多的家庭或团体&lt;/p&gt;
&lt;h2 id=&#34;facility&#34;&gt;Facility&lt;/h2&gt;
&lt;p&gt;amenities&lt;/p&gt;
&lt;p&gt;AC：空调，Air conditioning 的缩写&lt;/p&gt;
&lt;p&gt;heating：暖气&lt;/p&gt;
&lt;p&gt;bathroom&lt;/p&gt;
&lt;p&gt;internet access&lt;/p&gt;
&lt;p&gt;wireless printing&lt;/p&gt;
&lt;p&gt;fan：风扇&lt;/p&gt;
&lt;p&gt;balcony：阳台&lt;/p&gt;
&lt;p&gt;patio：露台、庭院&lt;/p&gt;
&lt;p&gt;smoke-free：禁烟、禁止抽烟&lt;/p&gt;
&lt;p&gt;complimentary：赠送的。观光饭店通常会提供免费早餐和个人浴室用品&lt;/p&gt;
&lt;p&gt;bathtub：浴缸&lt;/p&gt;
&lt;p&gt;shower：淋浴。shower head 是喷水的淋浴头。standing shower 是站立式淋浴&lt;/p&gt;
&lt;p&gt;towel：毛巾。手巾是hand towel，而bath mat 是地板上的浴垫&lt;/p&gt;
&lt;p&gt;robe：长袍。浴后穿也被称为bathrobe，浴袍&lt;/p&gt;
&lt;p&gt;toiletries：洗浴用品。例如洗发、护发用品，肥皂、牙刷和牙膏&lt;/p&gt;
&lt;p&gt;hair dryer：吹风机，也称为blow dryer&lt;/p&gt;
&lt;p&gt;sink：洗脸槽。它有一个faucet（水龙头）和drain（排水管）&lt;/p&gt;
&lt;p&gt;soap：有的饭店还同时提供hand soap 与body soap&lt;/p&gt;
&lt;p&gt;lamp&lt;/p&gt;
&lt;p&gt;executive desk：大办公桌。经常配备在商务套房使用&lt;/p&gt;
&lt;p&gt;kitchenette：小厨房。通常配有microwave（微波炉）和sink（洗涤槽）。大部份酒店客房内都会有mini-fridge（小冰箱）&lt;/p&gt;
&lt;p&gt;coffee machine&lt;/p&gt;
&lt;p&gt;room service：客房服务&lt;/p&gt;
&lt;p&gt;turndown service：夜床服务&lt;/p&gt;
&lt;p&gt;curtain&lt;/p&gt;
&lt;p&gt;TV：remote control（遥控器），pay-per-view channel（付费频道）&lt;/p&gt;
&lt;p&gt;safe：保险箱。让客人放置贵重物品的小盒子&lt;/p&gt;
&lt;p&gt;cot：婴儿床&lt;/p&gt;
&lt;p&gt;pull-out sofa：折叠沙发&lt;/p&gt;
&lt;p&gt;armchair：扶手椅&lt;/p&gt;
&lt;p&gt;bed linen：床单和枕套&lt;/p&gt;
&lt;p&gt;iron and ironing board：熨斗和熨衣板&lt;/p&gt;
&lt;p&gt;private jacuzzi：私人按摩浴缸，jacuzzi/whirlpool tub（按摩浴缸）&lt;/p&gt;
&lt;p&gt;bar&lt;/p&gt;
&lt;p&gt;brochure&lt;/p&gt;
&lt;p&gt;airport shuttle：机场巴士&lt;/p&gt;
&lt;p&gt;parking lot：停车场，valet parking service（代客泊车服务）&lt;/p&gt;
&lt;p&gt;continental breakfast：欧陆式早餐&lt;/p&gt;
&lt;p&gt;catering service：外烩餐饮服务&lt;/p&gt;
&lt;p&gt;buffet：自助餐，breakfast buffet/dinner buffet&lt;/p&gt;
&lt;p&gt;ice machine&lt;/p&gt;
&lt;p&gt;vending machine：自动贩卖机&lt;/p&gt;
&lt;p&gt;wheelchair accessible：轮椅通道。通常用电梯和斜坡&lt;/p&gt;
&lt;p&gt;fitness/workout room：健身房&lt;/p&gt;
&lt;p&gt;swimming pool&lt;/p&gt;
&lt;p&gt;spa&lt;/p&gt;
&lt;p&gt;laundry&lt;/p&gt;
&lt;p&gt;dry cleaning&lt;/p&gt;
&lt;p&gt;business center&lt;/p&gt;
&lt;p&gt;pets allowed/pet-friendly&lt;/p&gt;
&lt;p&gt;ski storage：滑雪用具寄存&lt;/p&gt;
&lt;p&gt;main entrance：正门&lt;/p&gt;
&lt;p&gt;reception：前台，front desk&lt;/p&gt;
&lt;p&gt;lobby：饭店大厅&lt;/p&gt;
&lt;p&gt;banquet/meeting room：宴会厅/会议室&lt;/p&gt;
&lt;p&gt;elevator/lift[英]&lt;/p&gt;
&lt;p&gt;stairs/stairway：楼梯&lt;/p&gt;
&lt;p&gt;hall：走廊，hallway/corridor&lt;/p&gt;
&lt;p&gt;emergency exit&lt;/p&gt;
&lt;h2 id=&#34;hotel-staff&#34;&gt;Hotel Staff&lt;/h2&gt;
&lt;p&gt;manager&lt;/p&gt;
&lt;p&gt;receptionist&lt;/p&gt;
&lt;p&gt;concierge：旅馆柜台职员&lt;/p&gt;
&lt;p&gt;bellboy：行李员&lt;/p&gt;
&lt;p&gt;housekeeper&lt;/p&gt;
&lt;p&gt;booking a room&lt;/p&gt;
&lt;p&gt;making a reservation&lt;/p&gt;
&lt;p&gt;vacancy/No Vacancy&lt;/p&gt;
&lt;p&gt;conference/convention：会议，banquet（宴会）&lt;/p&gt;
&lt;p&gt;wedding party&lt;/p&gt;
&lt;p&gt;check-in&lt;/p&gt;
&lt;p&gt;check-out&lt;/p&gt;
&lt;p&gt;key card&lt;/p&gt;
&lt;p&gt;deposit：保证金、定金&lt;/p&gt;
&lt;p&gt;morning call/wake-up call&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;pronounce&#34;&gt;Pronounce&lt;/h1&gt;
&lt;h2 id=&#34;live&#34;&gt;Live&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;[liv]&lt;/em&gt;
vi.活,生存；居住; 住；继续存在,留存
vt.&amp;amp; vi.以某种方式生活
&lt;em&gt;[laiv]&lt;/em&gt;
adj.活的,有生命的；真正的；燃烧着的；带电的；未爆炸的; 随时可用的；当前重要的；现场直播的,实况转播的
adv.实地,现场地,以直播方式&lt;/p&gt;
- https://www.openheart.icu/speech/i-am-a-freshman/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Adaptive Code</title>
        <link>https://www.openheart.icu/cs/adaptive-code/</link>
        <pubDate>Sat, 21 Nov 2020 22:30:12 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/adaptive-code/</guid>
        <description>42th openheart https://www.openheart.icu/cs/adaptive-code/ -&lt;h1 id=&#34;adaptive-code-agile-coding-with-design-patterns-and-solid-principleshttpsgithubcomadaptivecode&#34;&gt;&lt;a href=&#34;https://github.com/AdaptiveCode&#34;&gt;Adaptive Code: Agile coding with design patterns and SOLID principles&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;从标题中就不难发现，Adaptive Code的重点有三个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;敏捷编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设计模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SOLID(单一功能、开闭原则、里氏替换、接口隔离以及依赖反转)原则&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scrum&#34;&gt;Scrum&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.scrum.org/resources/what-is-scrum&#34;&gt;scrum.org&lt;/a&gt;  2020-Scrum-Guide-US&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scrum is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lightweight&lt;/li&gt;
&lt;li&gt;Simple to understand&lt;/li&gt;
&lt;li&gt;Difficult to master&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;what&#34;&gt;What&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;All work is prioritized on the product backlog and, at the start of each sprint, the development team commits to the work that they will complete during the new iteration by placing it on the sprint backlog. The unit of work within Scrum is the &lt;strong&gt;story&lt;/strong&gt;. The product backlog is a prioritized queue of pending stories, and each sprint is defined by the stories that will be developed during an iteration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前公司也是采用的这种开发框架，将一个项目分为多个迭代（sprint），但是此处引出了一个之前没听过的story。Story在后续Hierarchy of composition中也提到并详细介绍，此处的story可以就相当于是产品积压项，Story下可以有确定的Task（一个Story需要多个人完成，每个人都有自己的任务）。&lt;/p&gt;
&lt;h4 id=&#34;agile-software-development-敏捷软件开发与scrum&#34;&gt;Agile software development (敏捷软件开发)与Scrum&lt;/h4&gt;
&lt;p&gt;Scrum is one of the most common implementations of an Agile process.&lt;/p&gt;
&lt;h4 id=&#34;roles-and-responsibilities&#34;&gt;Roles and responsibilities&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Product owner&lt;/strong&gt;(PO, provides the link between the client or customer and the rest of the development team, &lt;strong&gt;what is to be done&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scrum master&lt;/strong&gt;(SM, shields the team from any external distractions during the sprint and tackles any of the impediments that the team flags during the daily Scrum meeting, &lt;strong&gt;how it is to be done&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Development team&lt;/strong&gt;(generalizing specialists)&lt;/p&gt;
&lt;h4 id=&#34;the-scrum-board&#34;&gt;The Scrum board&lt;/h4&gt;
&lt;p&gt;Physical Scrum boards/Digital Scrum boards.&lt;/p&gt;
&lt;h4 id=&#34;sprint-burndown-chart&#34;&gt;Sprint burndown chart&lt;/h4&gt;
&lt;p&gt;closely to the path of perfection.&lt;/p&gt;
&lt;h4 id=&#34;product-backlog&#34;&gt;Product backlog&lt;/h4&gt;
&lt;p&gt;产品积压项，对应产品的新feature。&lt;/p&gt;
&lt;h4 id=&#34;sprint-planning&#34;&gt;Sprint planning&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Avoiding Parkinson’s Law&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Parkinson’s Law states: “Work expands so as to fill the time available for its completion.” —Cyril Northcote Parkinson&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://wiki.mbalib.com/wiki/%E5%B8%95%E9%87%91%E6%A3%AE%E5%AE%9A%E5%BE%8B&#34;&gt;帕金森定律&lt;/a&gt;是指企业在发展过程中往往会因业务的扩展或其他原因而出现的一种现象，这一效应使得企业的机构迅速膨胀资源浪费员工积极性下降。&lt;/p&gt;
&lt;p&gt;The focus should remain on completing the story—that is, on meeting the definition of done—as quickly as possible.&lt;/p&gt;
&lt;p&gt;Affinity estimation &lt;strong&gt;合理&lt;/strong&gt;的工时分配（取决于对项目业务、研发人员的能力的了解程度，以及对其他突发情况的风险应对计划）&lt;/p&gt;
&lt;p&gt;从大到小排序所有的stories，然后从小到大开始。&lt;/p&gt;
&lt;h4 id=&#34;stand-up-meeting&#34;&gt;Stand-up meeting&lt;/h4&gt;
&lt;p&gt;死亡询问What did you do yesterday? What will you do today? What impediments do you face?&lt;/p&gt;
&lt;h3 id=&#34;why&#34;&gt;Why&lt;/h3&gt;
&lt;h4 id=&#34;cynefin-framework&#34;&gt;Cynefin framework&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Lean, or Agile, approaches to software acknowledge that the problem of software delivery is at least complicated and can even be complex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;敏捷开发或精益求精的软件，才能保证在Cynefin的第一或第二象限，避免进入Chaos或者all is not quite as it seems(一切都不尽如人意)的Obvious。我的理解是，Chaos就是毫无头绪；而Obvious就是传统的瀑布式开发，难以&lt;strong&gt;适应复杂的需求或者频繁的需求变更&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;scrum-versus-waterfall&#34;&gt;Scrum versus waterfall&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;waterfall&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the output from one stage becomes the input to the next&lt;/li&gt;
&lt;li&gt;each phase is completed before moving to the next phase&lt;/li&gt;
&lt;li&gt;no errors, issues, problems, or m standings are discovered after a phase has completed&lt;/li&gt;
&lt;li&gt;document-centric, generating a lot of documentation that does not directly improve the software product&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Agile processes：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;welcomes change and allows everyone to adapt to the changes that will occur&lt;/li&gt;
&lt;li&gt;This is not to say that documentation is unimportant or that Agile processes never produce documentation(living documents, such as wikis)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;shortcoming&#34;&gt;Shortcoming&lt;/h4&gt;
&lt;h3 id=&#34;how&#34;&gt;How&lt;/h3&gt;
&lt;p&gt;本章开始就提出如下问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Given that Agile frameworks are now prevalent, how can you ensure that the code you write enables and complements your development framework?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这肯定也是我们所关注的重中之重。&lt;/p&gt;
&lt;p&gt;敏捷开发流程之外还需要注意的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rigidity&lt;/li&gt;
&lt;li&gt;Lack of abstractions&lt;/li&gt;
&lt;li&gt;Too many abstractions&lt;/li&gt;
&lt;li&gt;Mixed responsibilities&lt;/li&gt;
&lt;li&gt;Untestability&lt;/li&gt;
&lt;li&gt;Skyhooks vs. cranes(All skyhooks should be replaced with appropriate cranes.)
&lt;ul&gt;
&lt;li&gt;Skyhooks:
&lt;ul&gt;
&lt;li&gt;Static methods&lt;/li&gt;
&lt;li&gt;Static classes (including singletons)&lt;/li&gt;
&lt;li&gt;Object construction that uses new&lt;/li&gt;
&lt;li&gt;Extension methods&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cranes:
&lt;ul&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;li&gt;Dependency injection&lt;/li&gt;
&lt;li&gt;Inversion of control&lt;/li&gt;
&lt;li&gt;Factories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metrics&lt;/li&gt;
&lt;li&gt;Unit test coverage&lt;/li&gt;
&lt;li&gt;Cyclomatic complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kanban&#34;&gt;Kanban&lt;/h2&gt;
&lt;p&gt;Kanban is a very &lt;strong&gt;simple&lt;/strong&gt; process &lt;strong&gt;with minimal rules&lt;/strong&gt; and a &lt;strong&gt;handful&lt;/strong&gt; of general guidelines.&lt;/p&gt;
&lt;p&gt;看板是一个非常简单的过程，具有最少的规则和一些通用准则。&lt;/p&gt;
&lt;p&gt;看板常被用来指代流程本身。简单的看板可以包含only a high-level process(SIPOC模型？，Supplier Input Process Output Customer)：To Do, Doing, and Done(the states map, 类似个人的timesheet，正因为看板的简单通用小到个人大到集体都可以使用)。当然也可以定义许多的规则严格把控整个软件的流程（Analyze/Implement/Verify/Deliver）&lt;/p&gt;
&lt;p&gt;The popular online work-tracking software : &lt;a href=&#34;https://trello.com/&#34;&gt;Trello&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;limiting-work-in-progress&#34;&gt;Limiting work in progress&lt;/h3&gt;
&lt;p&gt;用来避免流程中受到需求变更的影响  right-sizing work(Imaportant)&lt;/p&gt;
&lt;h3 id=&#34;event-driven-ceremoniesmeeting&#34;&gt;Event-driven ceremonies(meeting)&lt;/h3&gt;
&lt;p&gt;避免频繁甚至意义不大的会议打断研发的思路&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You would never have been precisely accurate.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;classes-of-servicepriority&#34;&gt;Classes of service(priority)&lt;/h3&gt;
&lt;p&gt;当工作具有不同的风险特征时，使用Classes of service使团队能够确定紧急性或重要性很高的工作，并在必要时将精力集中在那里。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;service level agreements (SLAs) 服务级别协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第95个百分位(95th percentile) 指的是所给数集中超过其95%的数，95th百分点是统计时所采用的最高值，超过的5%的数据将被舍弃。百分位数的意义就在于，我们可以了解到某一个样本在整个样本集合中所处的位置或者某一个样本组的值大概是怎么样分布的。计算百分位数的方法：
&lt;ul&gt;
&lt;li&gt;最近序数方法（The Nearest Rank method）n = ((p / 100) * N) eg.p=95 N=20 n=19 则20个序列中第19个为95th percentile&lt;/li&gt;
&lt;li&gt;在最近序数间线性插值的方法（The Linear Interpolation Between Closest Ranks method）&lt;/li&gt;
&lt;li&gt;权重百分位数方法（The Weighted Percentile method）&lt;/li&gt;
&lt;li&gt;微软excel表格算法（Microsoft Excel method）&lt;/li&gt;
&lt;li&gt;NIST方法（NIST method）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;class WIP limits. 限制使用的典型例子就是重构，并根据工作量大小调整。如果重构的工作量大，则设定高限制（宽松eg.整个限制的75%）；相反则低限制（紧张eg.整个限制的25%）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;People as a class of service 开发人员也可以进行灵活的分配，比如通过看板的SLA和95th percentile得知项目中的前端工作确实很高时，可以重新分配足够的前端研发到项目中加速任务的完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;
&lt;h4 id=&#34;lead-time--cycle-time&#34;&gt;Lead time &amp;amp; Cycle time&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cycle time = Time spent in progress&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lead time = Time spent waiting in backlog + cycle time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lead time measures the time elapsed between order and delivery, thus it measures your production process from your customer’s perspective. Cycle time starts when the actual work begins on the unit and ends when it is ready for delivery.&lt;/p&gt;
&lt;p&gt;In other words, cycle time measures the completion rate and lead time measures the arrival rate.&lt;/p&gt;
&lt;h4 id=&#34;cumulative-flow-diagrams&#34;&gt;Cumulative flow diagrams&lt;/h4&gt;
&lt;p&gt;By graphing the data as a stacked area chart with the number of &lt;strong&gt;work items on the y-axis&lt;/strong&gt; and the &lt;strong&gt;day number on the x-axis&lt;/strong&gt;……&lt;/p&gt;
&lt;p&gt;如何从累积流程图中获取测量整个流程的数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Lead time Measuring the x-axis distance between the To Do and Done areas gives the lead time of work items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cycle time Measuring the x-axis distance between the Doing and Done areas gives the cycle time of work items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Work in progress Measuring the y-axis distance between the Doing and Done areas gives &lt;strong&gt;the total number of work items that are currently in progress&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unhealthy flows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Too much work in progress: a lack of WIP limits&lt;/li&gt;
&lt;li&gt;Scope creep: 将过量的任务放到TODO，没有考虑是否具有完成这些任务的能力，从而导致lead times(生产周期)变长&lt;/li&gt;
&lt;li&gt;Long phase of delivery: most commonly the Implement phase, when coding occurs. Apply smaller WIP limits to the bottleneck&lt;/li&gt;
&lt;li&gt;Delivery plateau: 交付平稳期&lt;/li&gt;
&lt;li&gt;Regulated deployment phase: 团队限制，比如只有周五才可以发布……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scrum管理变更的方法是对Sprint设置时间并锁定输入，以便在Sprint开始后到达的新工作必须等到下一次迭代后才能确定优先级和计划时间。看板允许随时添加新工作，但仅提供有关完成新工作可能需要多长时间的服务级别协议（SLA）。WIP Limts看板限制进行中的工作，以确保优先于完成工作而不是开始新的工作。&lt;/p&gt;
&lt;p&gt;Scrum is Agile for new teams, while Kanban is Agile for mature teams. 如果工作只是项目的一部分，并且时间和金钱资源有限，那么Scrum是最好的选择，因为每个冲刺都可以单独进行成本估算。如果工作是连续的，没有确定的结束日期，则看板更适合。&lt;/p&gt;
&lt;h2 id=&#34;dependencies-and-layering&#34;&gt;Dependencies and layering&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Framework dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Third-party dependencies&lt;/p&gt;
&lt;p&gt;The main reason to use a third-party dependency is to exchange the effort required for implementing some features or infrastructure for the effort of integrating something that is already written and suitable for the job.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;.net core 可以使用NuGet依赖管理工具&lt;/p&gt;
&lt;p&gt;directed graph(acyclic digraphs/cyclic digraph) 用有向图对依赖结构建模 A-&amp;gt;B 为A依赖B；此方式只能展示出依赖关系，并不能展示出依赖关系的具体分类（集成、聚合、复合、关联）。&lt;/p&gt;
&lt;h3 id=&#34;managing-dependencies&#34;&gt;Managing dependencies&lt;/h3&gt;
&lt;p&gt;patterns: 经验总结后可以重用的模式&lt;/p&gt;
&lt;p&gt;anti-patterns: 实际开发中发先存在许多不仅没多少优点，甚至会引入很多问题的模式&lt;/p&gt;
&lt;p&gt;Code smells: 如果某段代码可能存在问题(some code is potentially problematic)，就可以说有代码味道&lt;/p&gt;
&lt;h4 id=&#34;resolving-dependencies建议朗读并背诵&#34;&gt;Resolving dependencies(建议朗读并背诵)&lt;/h4&gt;
&lt;h5 id=&#34;assemblies&#34;&gt;Assemblies&lt;/h5&gt;
&lt;p&gt;The Common Language Runtime (CLR), which is the virtual machine that the .NET Framework uses to execute code instructions, is a software product like any other and has been programmed to behave in a predictable and logical way when hosting applications.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resolution process&lt;/strong&gt; The assembly resolution process is an important facet of the CLR. This covers the gap between adding a reference to an assembly or project and having the application running with this assembly loaded. The process is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/AssemblyResolutionProcess-20201226102807.jpg&#34; alt=&#34;Assembly resolution process&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The CLR uses a just-in-time (JIT) model to resolve assemblies. As was already proven earlier in the chapter, the references contained in an application are not resolved as you start up the application, but rather when you first make use of a feature of that assembly—literally just in time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each assembly has an identity that is a composite of its name, version, culture, and public key token. Features such as binding redirects can change this identity, so determining it is not quite as simple as it might seem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the assembly’s identity has been established, the CLR is able to determine whether it has already attempted to resolve this dependency previously during the current execution of the application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asking this question causes the CLR to branch depending on the answer. If you have attempted to resolve this assembly, that process has either already succeeded or failed. If it succeeded, the CLR can use the assembly that has already been loaded, and it exits early. If not, the CLR knows that it need not continue attempting to resolve this assembly because it will fail.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alternatively, if this is the first attempt to resolve the assembly, the CLR first checks the global assembly cache (GAC). The GAC is a machine-wide assembly repository that allows multiple versions of the same assembly to be executed in the same application. If the assembly is found in the GAC, the resolution process is successful and the discovered assembly is loaded. So you now know that, because the GAC is searched first, the presence of an applicable assembly in the GAC will take precedence over an assembly on the file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the assembly could not be found in the GAC, the CLR starts probing a variety of directories in search of it. The directories searched depend on the app.config settings. If there is a codeBase element in the app.config, that location is checked and—if the assembly is not foundno other locations are subsequently checked. However, the default is for the application’s root directory to be searched, which is typically the /bin folder that relates to the entry point or web application. If the assembly cannot be found there, the resolution process fails and an exception is thrown by the CLR. Typically, this results in the termination of the application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/tools/fuslogvw-exe-assembly-binding-log-viewer&#34;&gt;The Fusion log(程序集绑定日志)&lt;/a&gt;&lt;/strong&gt;  用来打印CLR加载程序集失败的问题，开启以后，任何托管应用程序的所有尝试（无论成功与否）都会被记录到日志中。&lt;/p&gt;
&lt;p&gt;Not all dependencies require assembly references. One alternative is to deploy the service code as a hosted service. This requires inter-process or inter-network communication, but it minimizes the assembly references required between client and server.&lt;/p&gt;
&lt;h4 id=&#34;services待深入了解&#34;&gt;Services(待深入了解)&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;已知端点(编译时就知道服务的位置，直接为客户端创建一个服务代理)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建Proxy的两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Visual Studio为项目添加一个服务引用&lt;/li&gt;
&lt;li&gt;使用.NET Framework的&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.servicemodel.channelfactory-1?view=dotnet-plat-ext-5.0&#34;&gt;Channel Factory&lt;/a&gt;类编码创建服务代理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;服务发现(只知道服务的绑定类型或协定，但并不清楚服务的宿主地址)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Managed mode 托管模式
&lt;ul&gt;
&lt;li&gt;客户端请求中心服务&lt;/li&gt;
&lt;li&gt;single point of failure (SPOF)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ad-Hoc mode 临时模式
&lt;ul&gt;
&lt;li&gt;采用组播网路消息(multicast network messages)&lt;/li&gt;
&lt;li&gt;使用UDP协议，每个可发现的服务都会在一个特定的IP地址和端口上等待查询请求(The default implementation of this uses the User Datagram Protocol (UDP), with each discoverable service listening on a specified IP address 1 for queries)， 不可用的服务是不会被发现的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/wcf-discovery&#34;&gt;WCF(Windows Communication Foundation) Discovery&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For an alternative to &lt;em&gt;WCF&lt;/em&gt;, consider gRPC. - - DOTNET 5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;REST(REpresentational State Transfer))ful services&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/january/service-station-an-introduction-to-restful-services-with-wcf&#34;&gt;An Introduction To RESTful Services With WCF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.net core web api 和 grpc 都属于RESTful的服务，更适合跨平台&lt;/p&gt;
&lt;h3 id=&#34;layering&#34;&gt;Layering&lt;/h3&gt;
&lt;p&gt;逻辑层与物理层(Layers vs. tiers)&lt;/p&gt;
&lt;p&gt;两层：用户界面-访问数据&lt;/p&gt;
&lt;p&gt;三层：用户界面-业务逻辑-数据访问(MVC属于用户界面层)&lt;/p&gt;
&lt;h4 id=&#34;cross-cutting-concerns切面&#34;&gt;Cross-cutting concerns(切面)&lt;/h4&gt;
&lt;p&gt;Sometimes a component’s responsibilities are not easily limited to a single layer. Functions such as auditing, security, and caching can permeate through the entire application, because they are applicable at every layer.&lt;/p&gt;
&lt;p&gt;Aspect-oriented programming (AOP)&lt;/p&gt;
&lt;p&gt;比如使用扩展属性更加明显优雅简介的完成可以大量重用操作。&lt;/p&gt;
&lt;h4 id=&#34;asymmetric-layering非对称分层&#34;&gt;Asymmetric layering(非对称分层)&lt;/h4&gt;
&lt;p&gt;Command/Query Separation(CQS): Bertrand Meyer, in his book Object-Oriented Software Construction (Prentice Hall, 1997), used the phrase command/query separation (CQS) to explain that all object methods should be one of only two things: a command or a query.&lt;/p&gt;
&lt;p&gt;Command/Query Responsibility Segregation(CQRS): Commands and queries follow much the same rules as with CQS, but CQRS goes one step further: it acknowledges that commands and queries might need to follow different paths through the layering in order to be best handled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/CQRS-20201227140634.jpg&#34; alt=&#34;Domain models should only be used for handling commands.&#34;&gt;&lt;/p&gt;
&lt;p&gt;Sound management of dependencies很重要&lt;/p&gt;
&lt;h2 id=&#34;interfaces-and-design-patterns&#34;&gt;Interfaces and design patterns&lt;/h2&gt;
&lt;h3 id=&#34;diamond-inheritance-problem&#34;&gt;Diamond inheritance problem&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/Diamond-20201227143025.png&#34; alt=&#34;Diamond inheritance&#34;&gt;&lt;/p&gt;
&lt;p&gt;Because of this ambiguity, the .NET Framework does not allow multiple inheritance of classes.&lt;/p&gt;
&lt;h3 id=&#34;explicit-implementation&#34;&gt;Explicit implementation&lt;/h3&gt;
&lt;h3 id=&#34;polymorphism多态&#34;&gt;Polymorphism(多态)&lt;/h3&gt;
&lt;p&gt;The ability to use an object of one type and have it implicitly act as if it were of a different type is called polymorphism.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KrisNie/ImageHosting/main/Blog/Polymorphism-20201227144730.png&#34; alt=&#34;ploymorphism&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;adaptive-design-patterns&#34;&gt;Adaptive design patterns&lt;/h3&gt;
&lt;h4 id=&#34;the-null-object-pattern&#34;&gt;The Null Object pattern&lt;/h4&gt;
&lt;h4 id=&#34;the-isnull-property-anti-pattern&#34;&gt;The IsNull property anti-pattern&lt;/h4&gt;
&lt;h4 id=&#34;the-adapter-pattern&#34;&gt;The Adapter pattern&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The Class Adapter pattern&lt;/li&gt;
&lt;li&gt;The Object Adapter pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-strategy-pattern&#34;&gt;The Strategy pattern&lt;/h4&gt;
&lt;h4 id=&#34;further-versatility&#34;&gt;Further versatility&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Duck-typing&lt;/li&gt;
&lt;li&gt;Mixins&lt;/li&gt;
&lt;li&gt;Fluent interfaces&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;testinghttpsdocsmicrosoftcomen-usvisualstudiotestviewvs-2019&#34;&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/test/?view=vs-2019&#34;&gt;Testing&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;unit-testing&#34;&gt;Unit Testing&lt;/h3&gt;
&lt;p&gt;Unit test: Testing a single unit of code, very small atomic test.&lt;/p&gt;
&lt;p&gt;Integration test: Testing multiple units of code integrated together, to go through the different layers and ensure they are using eachother correctly. These should be done after unit tests have verified the individual units work independently. Many people mistakenly refer to these as unit tests.&lt;/p&gt;
&lt;p&gt;Built Verification Test: Testing the built product by deploying it and running tests that will interact with it in the manner a user would. Also mistakenly referred to as unit tests frequently. These are the largest most full featured tests and often just done manually by testing teams rather than being automated.&lt;/p&gt;
&lt;p&gt;Unit testing is the discipline of writing code that tests other code. Every unit test is composed of three distinct parts(AAA):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;arrange&lt;/strong&gt;ment of the preconditions of the test 准备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The performance of the &lt;strong&gt;act&lt;/strong&gt; that is being tested 操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;assert&lt;/strong&gt;ion that the expected behavior occurred 断言&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[TestClass]&lt;/span&gt; 
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;AccountTest&lt;/span&gt; 
{
&lt;span style=&#34;color:#658b00&#34;&gt;    [TestMethod]&lt;/span&gt; 
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;void&lt;/span&gt; AddingTransactionChangesBalance() {
        &lt;span style=&#34;color:#228b22&#34;&gt;// Arrange
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;var&lt;/span&gt; account = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Account();
        &lt;span style=&#34;color:#228b22&#34;&gt;// Act 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      	account.AddTransaction(&lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;m);
        &lt;span style=&#34;color:#228b22&#34;&gt;// Assert 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;      	Assert.AreEqual(&lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;m, account.Balance);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/test/run-unit-tests-with-test-explorer?view=vs-2019&#34;&gt;Running the tests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MSTest is a convenient choice for unit tests—hence its use for the examples in this chapter—but it is not a great choice. NUnit and XUnit are better alternative testing frameworks that rely on external dependencies.&lt;/p&gt;
&lt;h4 id=&#34;test-driven-development&#34;&gt;Test-driven development&lt;/h4&gt;
&lt;p&gt;When you use a TDD approach to writing software, you write the unit tests and the production code in tandem, with a failing test written for every expected behavior exhibited by every method of every class in the production code. The failing test fails only because the production code does not exist yet. The test states—via assertions—that the production code should act in some way, but because it does not yet, the test fails. After the production code is implemented in the simplest way possible to satisfy the test’s requirements, the test will succeed.&lt;/p&gt;
&lt;p&gt;Red, green, refactor:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write a failing test that targets the expected behavior of the SUT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement just enough of the SUT so that the new test passes without breaking existing successful tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If any refactoring can be done on the SUT to improve its design or overall quality, now is the time to do so.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After the transition from red to green for each unit test, you had the opportunity to refactor the implementation of the SUT.&lt;/p&gt;
&lt;p&gt;Addition: &lt;a href=&#34;https://martinfowler.com/articles/is-tdd-dead/&#34;&gt;Is TDD Dead?&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;test-double&#34;&gt;Test double&lt;/h4&gt;
&lt;p&gt;测试替身&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dummies&lt;/strong&gt; This is the simplest of all test doubles. Dummies are intended to fulfil parameter lists and have no special behavior. Often, real implementations are used as dummies and might be primitive types, which are nevertheless required to turn a unit test green.&lt;/p&gt;
&lt;p&gt;被测试方法需要一些参数，但是这些参数实际上并没有用到，它们的存在只是为了满足调用方法的参数要求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spies&lt;/strong&gt; A spy records the calls that have been made to its methods, along with the parameters that were supplied to each call. The record of these calls can then be used in assertions to ensure that certain calls were made.&lt;/p&gt;
&lt;p&gt;确认方法调用记录如何调用，并在断言中可以使用调用结果，断言程序运行的正确性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stubs&lt;/strong&gt; A stub is a dependency that is required by the system under test and that will return a pre-supplied answer whenever queried. Stubs are most useful at the seams of an application, where external dependencies are required. Instead of depending on a database, you can depend on a stub that can return dummy data.&lt;/p&gt;
&lt;p&gt;在测试中为每个调用提供一个封装好的响应，它可以使用很直接的方式模拟依赖项的行为。例如我们可以使用Stub把相关数据放到内存里查询而不是查询真实的数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fakes&lt;/strong&gt; A fake is very similar to a stub, but the intent is subtly different. Fakes are not supplied with any preconceived responses to queries, but are instead closer to real implementations with some necessary concession to avoid an external dependency. Personally, I make a distinction between a manually implemented mock and a mock that is supplied by a mocking framework: manual mocks are called fakes.&lt;/p&gt;
&lt;p&gt;Fake 可以是某个 Data Access Object 或者 Repository 的基于内存的实现；该实现并不会真的去进行数据库操作。这就允许了我们能够在并没有真的启动数据库或者执行耗时的外部请求的情况下进行服务的测试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mocks&lt;/strong&gt; Whereas stubs and fakes provide test doubles for dependencies that are indirect queries, mocks are test doubles for dependencies that have indirect commands. Mocks are useful to determine whether a command was executed on a dependency of the system under test.&lt;/p&gt;
&lt;p&gt;模拟一个具有特性行为的对象，在测试开始前根据期望提供需要的结果。被测试对象往往调用这个对象的方法时，根据条件得到不同的输入，从而满足测试对象的不同场景。例如，mock 数据库的存储层，返回正常数据、空或者丢出异常等情况。当我们并不希望真的调用生产环境下的代码或者在测试中难于验证真实代码执行效果的时候，我们会用 Mock 来替代那些真实的对象。典型的例子即是对邮件发送服务的测试，我们并不希望每次进行测试的时候都发送一封邮件，毕竟我们很难去验证邮件是否真的被发出了或者被接收了。我们更多地关注于邮件服务是否按照我们的预期在合适的业务流中被调用。&lt;/p&gt;
&lt;h4 id=&#34;manual-test-fakery&#34;&gt;Manual test fakery&lt;/h4&gt;
&lt;h4 id=&#34;mocking-frameworks&#34;&gt;Mocking frameworks&lt;/h4&gt;
&lt;p&gt;The most popular: &lt;a href=&#34;https://github.com/Moq/moq4/wiki/Quickstart&#34;&gt;MOQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在一个项目里, 我们经常需要把某一部分程序独立出来以便我们可以对这部分进行测试. 这就要求我们不要考虑项目其余部分的复杂性, 我们只想关注需要被测试的那部分. 这里就需要用到模拟(Mock)技术.&lt;/p&gt;
&lt;p&gt;Mocking is the act of taking a small piece of code that may depend on other things, mocking those other things up so that you can control the circumstances surrounding the piece of code you want to test.&lt;/p&gt;
&lt;p&gt;The purpose of mocking is atomicity in tests. It allows you to test just the individual piece of code you want, without having it&amp;rsquo;s tests affected due to bugs in dependent code pieces. Also mocking gives you the ability to fabricate a variety of scenarios to test the edge cases of each piece of code.&lt;/p&gt;
&lt;p&gt;Mocking is generally purposed for creating boundaries around the target code in unit tests, though it&amp;rsquo;s not uncommon to use it in integration tests too for fabricating a resource that acts as the seed to the integrated code chain you&amp;rsquo;re targeting.&lt;/p&gt;
&lt;p&gt;Moq lets you set the following expectations on a method call:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Call some other lambda expression.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return a specific value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Throw a specified type of exception.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify that this method was called.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mocks and test over-specification: An over-specified test is fragile, but you can avoid this fragility by changing what you assert. In other words, a test is over-specified when it has knowledge of the SUT’s &lt;em&gt;implementation&lt;/em&gt; rather than its &lt;em&gt;expected behavior&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&#34;testing-all-control-flows&#34;&gt;Testing all control flows&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Happy Path&lt;/em&gt;: the execution path through the code that yields no errors and causes no problems.&lt;/p&gt;
&lt;p&gt;There are a few gaps that need to be addressed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if the account repository is a null reference?&lt;/li&gt;
&lt;li&gt;What if the repository cannot find the account?&lt;/li&gt;
&lt;li&gt;What if the account method throws an exception?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To avoid leaking dependencies between layers, it is good practice to wrap an exception thrown at a lower layer in a new exception for this layer. The exceptions that the domain model throws will be specific to that layer. If the service layer allows this to propagate up to the controller, the controller will need knowledge of the DomainException type to catch and handle these exceptions. This introduces a dependency between the controller and the domain model layer, which should be avoided. Instead, the service will catch the domain model exceptions and wrap them in ServiceException instances before throwing them up to the controller. Due to the controller’s dependency on the service layer, it is able to catch the exceptions that it defines. It is important to acknowledge that the ServiceException contains the DomainException as an inner exception—without this, valuable context about the original exception is lost: the entry point of the application might be able to unwrap this exception in a global exception handler, for example.&lt;/p&gt;
&lt;h4 id=&#34;test-setup&#34;&gt;Test setup&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#658b00&#34;&gt;[TestInitialize]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;writing-tests-first&#34;&gt;Writing tests first&lt;/h3&gt;
&lt;h4 id=&#34;what-is-tdd&#34;&gt;What is TDD?&lt;/h4&gt;
&lt;p&gt;The “&lt;strong&gt;purist&lt;/strong&gt;” idea of TDD is that it is a design tool—that developers should approach the keyboard without forethought of the production code they might implement.&lt;/p&gt;
&lt;p&gt;The “&lt;strong&gt;pragmatic&lt;/strong&gt;” idea of TDD is that developers write the unit tests first.&lt;/p&gt;
&lt;h4 id=&#34;test-driven-design&#34;&gt;Test-driven design&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Write exactly one new test. It should be the smallest test which seems to point in the direction of a solution.&lt;/li&gt;
&lt;li&gt;Run the test to make sure it fails.&lt;/li&gt;
&lt;li&gt;Make the test from (1) pass by writing the least amount of implementation code you can IN THE TEST METHOD.&lt;/li&gt;
&lt;li&gt;Refactor to remove duplication or otherwise as required to improve the design. Be strict about the refactorings. Only introduce new abstractions (methods, classes, etc) when they will help to improve the design of the code. Specifically:
&lt;ol&gt;
&lt;li&gt;ONLY Extract a new method if there is sufficient code duplication in the test methods.&lt;/li&gt;
&lt;li&gt;When extracting a method, initially extract it to the test class (don’t create a new class yet). ONLY create a new class when a clear grouping of methods emerges and when the test class starts to feel crowded or too large.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Repeat the process by writing another test (go back to step 1).&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;test-first-development&#34;&gt;Test-first development&lt;/h4&gt;
&lt;p&gt;TDD = TFD + Refactoring&lt;/p&gt;
&lt;p&gt;TDD是测试驱动，TFD是测试优先，测试优先出现红色就需要重构，这样就靠向了TDD。&lt;/p&gt;
&lt;h3 id=&#34;further-testing&#34;&gt;Further testing&lt;/h3&gt;
&lt;h4 id=&#34;the-testing-pyramid&#34;&gt;The testing pyramid&lt;/h4&gt;
&lt;p&gt;The testing pyramid reminds you of the relative number of tests that you should aim to maintain.&lt;/p&gt;
&lt;h4 id=&#34;the-testing-quadrant&#34;&gt;The testing quadrant&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://lisacrispin.com/wp-content/uploads/2011/11/Agile-Testing-Quadrants.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;The testing quadrant diagram explains that tests can be useful to different stakeholders and for different reasons.&lt;/p&gt;
&lt;h3 id=&#34;testing-for-prevention-and-cure&#34;&gt;Testing for prevention and cure&lt;/h3&gt;
&lt;h4 id=&#34;how-do-you-decrease-mttr&#34;&gt;How do you decrease MTTR?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;li&gt;alerting&lt;/li&gt;
&lt;li&gt;monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://lisacrispin.com/2011/11/08/using-the-agile-testing-quadrants/&#34;&gt;Using the Agile Testing Quadrants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/what-is/elk-stack&#34;&gt;ELK Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;refactoring&#34;&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;Refactoring is the process of incrementally improving the design of existing code.&lt;/p&gt;
&lt;p&gt;This is an important point—refactoring changes the &lt;em&gt;arrangement&lt;/em&gt; of the code, not the &lt;em&gt;outcome&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;changing-existing-code&#34;&gt;Changing existing code&lt;/h3&gt;
&lt;h4 id=&#34;replacing-magic-numbers-with-constants&#34;&gt;Replacing “magic numbers” with constants&lt;/h4&gt;
&lt;p&gt;To the person who wrote the code, their significance might be obvious because that person has prior knowledge of what it all means. In reality, that will probably only be true for a week, perhaps two, before the person’s memory starts to fade and they lose track of what that 5, or that 2, means.&lt;/p&gt;
&lt;h4 id=&#34;replacing-a-conditional-expression-with-polymorphism&#34;&gt;Replacing a conditional expression with polymorphism&lt;/h4&gt;
&lt;p&gt;子类继承父类以替换Switch&lt;/p&gt;
&lt;h4 id=&#34;replacing-a-constructor-with-a-factory-method&#34;&gt;Replacing a constructor with a factory method&lt;/h4&gt;
&lt;h4 id=&#34;replacing-inheritance-with-delegation&#34;&gt;Replacing inheritance with delegation&lt;/h4&gt;
&lt;h4 id=&#34;code-smell-refused-bequest&#34;&gt;Code smell: Refused bequest&lt;/h4&gt;
&lt;p&gt;如果存在一个子类与其他子类不一致，比如不需要实现一个基类中的方法，此时可以有两种方法&lt;/p&gt;
&lt;h3 id=&#34;aggressive-refactoring&#34;&gt;Aggressive refactoring&lt;/h3&gt;
&lt;p&gt;Code is never done. Code can be working, good enough, sufficient, valuable, and producing revenue. But it is rarely, if ever, complete.&lt;/p&gt;
&lt;h4 id=&#34;red-green-refactorredesign&#34;&gt;Red, green, refactor…redesign&lt;/h4&gt;
&lt;h2 id=&#34;dependency-inversionhttpswwwopenhearticucsdependency-injection&#34;&gt;&lt;a href=&#34;https://www.openheart.icu/cs/dependency-injection/&#34;&gt;Dependency inversion&lt;/a&gt;&lt;/h2&gt;
- https://www.openheart.icu/cs/adaptive-code/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Domain-driven design</title>
        <link>https://www.openheart.icu/cs/domain-driven-design/</link>
        <pubDate>Sat, 21 Nov 2020 22:30:12 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/domain-driven-design/</guid>
        <description>42th openheart https://www.openheart.icu/cs/domain-driven-design/ -- https://www.openheart.icu/cs/domain-driven-design/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
    
        <item>
        <title>Test-driven development</title>
        <link>https://www.openheart.icu/cs/test-driven-development/</link>
        <pubDate>Sat, 21 Nov 2020 22:30:12 +0000</pubDate>
        
        <guid>https://www.openheart.icu/cs/test-driven-development/</guid>
        <description>42th openheart https://www.openheart.icu/cs/test-driven-development/ -&lt;h1 id=&#34;unit-test-practice&#34;&gt;Unit Test Practice&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;纸上得来终觉浅&lt;/strong&gt;，绝知此事要躬行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;shifting-left&#34;&gt;Shifting Left&lt;/h2&gt;
&lt;p&gt;所谓左移，左倾，不是指冒险主义。是将整个流程中右边部分向左边移动，比如测试。 : )&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shift Left is a practice intended to find and prevent defects early in the software delivery process. The idea is to improve quality by moving tasks to the left as early in the lifecycle as possible.&lt;/p&gt;
&lt;p&gt;In the traditional software development model, requirements are kept on the left side of the plan, and the delivery and testing requirements on the right. The problem is that these practices can’t handle changing expectations and requirements, resulting in negative outcomes for the business such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increased costs&lt;/li&gt;
&lt;li&gt;Increased time to market&lt;/li&gt;
&lt;li&gt;Unexpected errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Shift left approach emphasizes the need for developers to concentrate on quality from their earliest stage of a software build, rather than waiting for errors and bugs to be found late in the SDLC(&lt;a href=&#34;https://en.wikipedia.org/wiki/Systems_development_life_cycle&#34;&gt;Systems development life cycle&lt;/a&gt;, &lt;a href=&#34;https://www.tutorialspoint.com/sdlc/sdlc_pdf_version.htm&#34;&gt;SDLC Tutorial&lt;/a&gt;). Shifting left enables product teams perform daily tasks like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Providing feedback&lt;/li&gt;
&lt;li&gt;Reviewing changes and progress&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;人工的过程大都是倒置的，比如制作一个杯子，我们得想象杯子的样子，然后按设计高温烧制，最终的杯子才会在我的右手旁，盛着热美式。这本来就与自然相背而行，类人猿进化到人类，人类继续进化，他们（我们）都不晓得要进化成什么样子的生物，一切未知，但前进却永不止步。软件肯定不是自然产物，所以不能放纵各种“变异”和“遗传”，要把控过程，走的每一步、每一个动作都要向最终产物在靠拢。&lt;/p&gt;
&lt;p&gt;其实所谓左移，将流程后半部前移，真正移动的是什么？还是需求。一切是做出更完善的Demand planning，以减少缺陷，提前规避风险。&lt;/p&gt;
&lt;p&gt;软件的需求并不像生活里比比皆是的目标那么简单。明确今天自己要写几行代码，给哪一个心爱的女孩买个GUCCI……这类目标的确立犹如是探囊取物。而一个明确的软件需求，不止要从客户要求里抽象，还要包括对具体实现的思考与设计，保持一切都符合主流规范并贴合市场发展，这难于上青天。（这也可能是IT相关都需要团队工作的原因）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Scrum we refer to the step’s output as the Definition of Done, the DoD, of a user story or an epic. Writing good DoDs is not trivial and many books and articles are written to cover the topic. A user story (and epic for that matter as well) can also have a Definition of Ready, the DoR, meaning that the story is groomed to the point that it makes sense, and everything is clear enough so the story can be planned. Where the DoD defines the quality requirements of the outcome user story or epic, it is the DoR that defines the user story or epic’s input.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;明确的目标（力所能及），就是对过程最好的掌控。A clear goal (Able To Do) is the best control of the process.&lt;/p&gt;
&lt;h3 id=&#34;shift-left-testinghttpsenwikipediaorgwikishift-left_testing&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Shift-left_testing&#34;&gt;Shift Left Testing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;字面意思。 Literally interpretation&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Shift Left testing&lt;/strong&gt; means testing earlier in the software development process.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;iso&#34;&gt;ISO&lt;/h3&gt;
&lt;p&gt;Im my opinion, ISO means a standard, criterion, norm, touchstone&amp;hellip; what we must follow. Like: Veracode will help do a check of our codes, Source Code Scanning with SonarQube.&lt;/p&gt;
&lt;p&gt;BCI should be mentioned here, non-governmental organization may be a joke to me now.&lt;/p&gt;
&lt;h2 id=&#34;bdd&#34;&gt;BDD&lt;/h2&gt;
&lt;p&gt;Behavior Driven Development.&lt;/p&gt;
&lt;p&gt;BDD的过程就是在完善“左移”，将需求（架构）描述的更加清晰。&lt;/p&gt;
&lt;h3 id=&#34;specflowhttpsspecfloworg&#34;&gt;&lt;a href=&#34;https://specflow.org/&#34;&gt;SpecFlow&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Building up the logic to test that a particular behavior is being satisfied can be tedious. One of the tools Doire demonstrated in his presentation was SpecFlow (&lt;a href=&#34;http://specflow.org/&#34;&gt;specflow.org&lt;/a&gt;). &lt;strong&gt;This tool integrates with Visual Studio and enables you to define user stories—called scenarios—using its simple rules.&lt;/strong&gt; It then automates some of the creation and execution of the methods (some with tests and some without). The goal is to validate that the rules of the story are being satisfied.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/38145106/what-is-major-difference-between-integration-testing-and-behavioral-testing-bdd&#34;&gt;What is Major Difference between Integration Testing and Behavioral Testing BDD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/july/data-points-behavior-driven-design-with-specflow&#34;&gt;Data Points - Behavior-Driven Design with SpecFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/archive/msdn-magazine/2010/december/msdn-magazine-bdd-primer-behavior-driven-development-with-specflow-and-watin&#34;&gt;BDD Primer - Behavior-Driven Development with SpecFlow and WatiN&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tfd&#34;&gt;TFD&lt;/h2&gt;
&lt;h2 id=&#34;tdd&#34;&gt;TDD&lt;/h2&gt;
&lt;h2 id=&#34;questions&#34;&gt;Questions&lt;/h2&gt;
&lt;h3 id=&#34;unit-test-api&#34;&gt;Unit Test API&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;You should either create Mocks or use Isolation Framework in order to simulate API environment. Unit tests should not depend on resources like internet connections, network, endpoints etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The job of a remote API client is to issue certain calls - no more, no less. Therefore, its test should verify that it issues those calls - no more, no less.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说我们在对各种与API相关的Code做Unit Test时，不需要去测试我们的请求是否能获取正确的结果。非要测试，也只是去测试我们的请求有没有真正的去发送。这也意味着，API相关的Unit Test需要对Code进行做出更准确的分割，保证Coverage然后对分割后与请求无关的Code 进行Unit Test。&lt;/p&gt;
&lt;h3 id=&#34;non-mockable&#34;&gt;Non-Mockable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Internal/Protected/Private 对于此类Classes/Methods，首先肯定要避免在UT会直接需要mock。期次可以考虑Use Fake Method in Unit Test to implement the non-mockable Object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Can&amp;rsquo;t Be Mock Type, Like cant be overrided, not interface, not virtual type. 遇到此类可以考虑将此类进行封装，这种情况往往是第三方或者.NET本身限制，存在共性，可以把这些不能mock的Classes/Methods封装成新的Interface保证可以被mock。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reference-1&#34;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3129821/how-to-unit-test-your-api&#34;&gt;How to unit test your API?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://softwareengineering.stackexchange.com/questions/252748/is-it-actually-worth-unit-testing-an-api-client&#34;&gt;Is it actually worth unit-testing an API client?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;refactor&#34;&gt;Refactor&lt;/h2&gt;
&lt;p&gt;如何有效地refactor？&lt;/p&gt;
&lt;h1 id=&#34;issue&#34;&gt;Issue&lt;/h1&gt;
&lt;h2 id=&#34;how-to-test-a-recursive-function&#34;&gt;How to test a recursive Function&lt;/h2&gt;
&lt;p&gt;recursion 在所难免，那应该如何优雅的测试递归呢？&lt;/p&gt;
&lt;p&gt;Stack Overflow推荐方式是设置待测试interface所对应class的method为vitrul，然后增加fake class。为fake class增加额外的property，该property用来记录待测试method的执行次数。然后再UT中不再对原interface测试，而是对fake class测试。&lt;/p&gt;
&lt;p&gt;但是如果是直接对class进行测试，那为何不直接在待测试的class中增加property用来记录method执行次数。然后UT直接测试class。新加的property虽然在生产环境中也会进行计算，但是不会通过interface暴露给接口使用方，自增的property对性能影响也不大。&lt;/p&gt;
&lt;h3 id=&#34;reference-2&#34;&gt;Reference&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/32660959/test-a-recursive-function-with-moq&#34;&gt;Test a recursive Function with Moq&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;how-to-test-for-order-of-calls&#34;&gt;How to test for order of calls&lt;/h2&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;mock.InSequence(mockSequence).Setup(x =&amp;gt; x.A()).Returns(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;);
mock.InSequence(mockSequence).Setup(x =&amp;gt; x.B()).Returns(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;It might not be very obvious, but what this code &lt;em&gt;really&lt;/em&gt; does is to set up two conditional setups, such that the second setup will not be matched by any invocations until after &lt;code&gt;A&lt;/code&gt; has been matched.&lt;/p&gt;
&lt;p&gt;You can think of it this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; step = &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;
mock.When(() =&amp;gt; step == &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;).Setup(x =&amp;gt; x.A()).Returns(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;).Callback(() =&amp;gt; step++);
mock.When(() =&amp;gt; step == &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;).Setup(x =&amp;gt; x.B()).Returns(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;).Callback(() =&amp;gt; step++);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
- https://www.openheart.icu/cs/test-driven-development/ - ALL RIGHTS RESERVED KRIS NIE</description>
        </item>
    
    
  </channel>
</rss> 